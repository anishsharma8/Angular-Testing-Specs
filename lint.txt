Linting "Angular-Testing-Specs"...
/home/vinay/projects/Angular-Testing-Specs/e2e/src/app.e2e-spec.ts:1:1
ERROR: 1:1    class-name-pascal       import { AppPage } from './app.po';
import { browser, logging } from 'protractor';

describe('workspace-project App', () => {
  let page: AppPage;

  beforeEach(() => {
    page = new AppPage();
  });

  it('should display welcome message', () => {
    page.navigateTo();
    expect(page.getTitleText()).toEqual('Angular-Testing-Specs app is running!');
  });

  afterEach(async () => {
    // Assert that there are no errors emitted from the browser
    const logs = await browser.manage().logs().get(logging.Type.BROWSER);
    expect(logs).not.toContain(jasmine.objectContaining({
      level: logging.Level.SEVERE,
    } as logging.Entry));
  });
});

ERROR: 1:8    class-name-pascal       import { AppPage } from './app.po';
ERROR: 1:8    class-name-pascal       { AppPage }
ERROR: 1:10   class-name-pascal       { AppPage }
ERROR: 1:10   class-name-pascal       AppPage
ERROR: 1:25   class-name-pascal       import { AppPage } from './app.po';
ERROR: 2:1    class-name-pascal       import { AppPage } from './app.po';
import { browser, logging } from 'protractor';

describe('workspace-project App', () => {
  let page: AppPage;

  beforeEach(() => {
    page = new AppPage();
  });

  it('should display welcome message', () => {
    page.navigateTo();
    expect(page.getTitleText()).toEqual('Angular-Testing-Specs app is running!');
  });

  afterEach(async () => {
    // Assert that there are no errors emitted from the browser
    const logs = await browser.manage().logs().get(logging.Type.BROWSER);
    expect(logs).not.toContain(jasmine.objectContaining({
      level: logging.Level.SEVERE,
    } as logging.Entry));
  });
});

ERROR: 2:8    class-name-pascal       import { browser, logging } from 'protractor';
ERROR: 2:8    class-name-pascal       { browser, logging }
ERROR: 2:10   class-name-pascal       { browser, logging }
ERROR: 2:10   class-name-pascal       browser
ERROR: 2:19   class-name-pascal       { browser, logging }
ERROR: 2:19   class-name-pascal       logging
ERROR: 2:34   class-name-pascal       import { browser, logging } from 'protractor';
ERROR: 4:1    class-name-pascal       import { AppPage } from './app.po';
import { browser, logging } from 'protractor';

describe('workspace-project App', () => {
  let page: AppPage;

  beforeEach(() => {
    page = new AppPage();
  });

  it('should display welcome message', () => {
    page.navigateTo();
    expect(page.getTitleText()).toEqual('Angular-Testing-Specs app is running!');
  });

  afterEach(async () => {
    // Assert that there are no errors emitted from the browser
    const logs = await browser.manage().logs().get(logging.Type.BROWSER);
    expect(logs).not.toContain(jasmine.objectContaining({
      level: logging.Level.SEVERE,
    } as logging.Entry));
  });
});

ERROR: 4:1    class-name-pascal       describe('workspace-project App', () => {
  let page: AppPage;

  beforeEach(() => {
    page = new AppPage();
  });

  it('should display welcome message', () => {
    page.navigateTo();
    expect(page.getTitleText()).toEqual('Angular-Testing-Specs app is running!');
  });

  afterEach(async () => {
    // Assert that there are no errors emitted from the browser
    const logs = await browser.manage().logs().get(logging.Type.BROWSER);
    expect(logs).not.toContain(jasmine.objectContaining({
      level: logging.Level.SEVERE,
    } as logging.Entry));
  });
});
ERROR: 4:1    class-name-pascal       describe('workspace-project App', () => {
  let page: AppPage;

  beforeEach(() => {
    page = new AppPage();
  });

  it('should display welcome message', () => {
    page.navigateTo();
    expect(page.getTitleText()).toEqual('Angular-Testing-Specs app is running!');
  });

  afterEach(async () => {
    // Assert that there are no errors emitted from the browser
    const logs = await browser.manage().logs().get(logging.Type.BROWSER);
    expect(logs).not.toContain(jasmine.objectContaining({
      level: logging.Level.SEVERE,
    } as logging.Entry));
  });
})
ERROR: 4:10   class-name-pascal       describe('workspace-project App', () => {
  let page: AppPage;

  beforeEach(() => {
    page = new AppPage();
  });

  it('should display welcome message', () => {
    page.navigateTo();
    expect(page.getTitleText()).toEqual('Angular-Testing-Specs app is running!');
  });

  afterEach(async () => {
    // Assert that there are no errors emitted from the browser
    const logs = await browser.manage().logs().get(logging.Type.BROWSER);
    expect(logs).not.toContain(jasmine.objectContaining({
      level: logging.Level.SEVERE,
    } as logging.Entry));
  });
})
ERROR: 4:35   class-name-pascal       describe('workspace-project App', () => {
  let page: AppPage;

  beforeEach(() => {
    page = new AppPage();
  });

  it('should display welcome message', () => {
    page.navigateTo();
    expect(page.getTitleText()).toEqual('Angular-Testing-Specs app is running!');
  });

  afterEach(async () => {
    // Assert that there are no errors emitted from the browser
    const logs = await browser.manage().logs().get(logging.Type.BROWSER);
    expect(logs).not.toContain(jasmine.objectContaining({
      level: logging.Level.SEVERE,
    } as logging.Entry));
  });
})
ERROR: 4:38   class-name-pascal       () => {
  let page: AppPage;

  beforeEach(() => {
    page = new AppPage();
  });

  it('should display welcome message', () => {
    page.navigateTo();
    expect(page.getTitleText()).toEqual('Angular-Testing-Specs app is running!');
  });

  afterEach(async () => {
    // Assert that there are no errors emitted from the browser
    const logs = await browser.manage().logs().get(logging.Type.BROWSER);
    expect(logs).not.toContain(jasmine.objectContaining({
      level: logging.Level.SEVERE,
    } as logging.Entry));
  });
}
ERROR: 4:41   class-name-pascal       () => {
  let page: AppPage;

  beforeEach(() => {
    page = new AppPage();
  });

  it('should display welcome message', () => {
    page.navigateTo();
    expect(page.getTitleText()).toEqual('Angular-Testing-Specs app is running!');
  });

  afterEach(async () => {
    // Assert that there are no errors emitted from the browser
    const logs = await browser.manage().logs().get(logging.Type.BROWSER);
    expect(logs).not.toContain(jasmine.objectContaining({
      level: logging.Level.SEVERE,
    } as logging.Entry));
  });
}
ERROR: 5:3    class-name-pascal       {
  let page: AppPage;

  beforeEach(() => {
    page = new AppPage();
  });

  it('should display welcome message', () => {
    page.navigateTo();
    expect(page.getTitleText()).toEqual('Angular-Testing-Specs app is running!');
  });

  afterEach(async () => {
    // Assert that there are no errors emitted from the browser
    const logs = await browser.manage().logs().get(logging.Type.BROWSER);
    expect(logs).not.toContain(jasmine.objectContaining({
      level: logging.Level.SEVERE,
    } as logging.Entry));
  });
}
ERROR: 5:3    class-name-pascal       let page: AppPage;
ERROR: 5:7    class-name-pascal       let page: AppPage
ERROR: 5:7    class-name-pascal       page: AppPage
ERROR: 5:13   class-name-pascal       page: AppPage
ERROR: 5:13   class-name-pascal       AppPage
ERROR: 7:3    class-name-pascal       {
  let page: AppPage;

  beforeEach(() => {
    page = new AppPage();
  });

  it('should display welcome message', () => {
    page.navigateTo();
    expect(page.getTitleText()).toEqual('Angular-Testing-Specs app is running!');
  });

  afterEach(async () => {
    // Assert that there are no errors emitted from the browser
    const logs = await browser.manage().logs().get(logging.Type.BROWSER);
    expect(logs).not.toContain(jasmine.objectContaining({
      level: logging.Level.SEVERE,
    } as logging.Entry));
  });
}
ERROR: 7:3    class-name-pascal       beforeEach(() => {
    page = new AppPage();
  });
ERROR: 7:3    class-name-pascal       beforeEach(() => {
    page = new AppPage();
  })
ERROR: 7:14   class-name-pascal       beforeEach(() => {
    page = new AppPage();
  })
ERROR: 7:17   class-name-pascal       () => {
    page = new AppPage();
  }
ERROR: 7:20   class-name-pascal       () => {
    page = new AppPage();
  }
ERROR: 8:5    class-name-pascal       {
    page = new AppPage();
  }
ERROR: 8:5    class-name-pascal       page = new AppPage();
ERROR: 8:5    class-name-pascal       page = new AppPage()
ERROR: 8:10   class-name-pascal       page = new AppPage()
ERROR: 8:12   class-name-pascal       page = new AppPage()
ERROR: 8:16   class-name-pascal       new AppPage()
ERROR: 11:3   class-name-pascal       {
  let page: AppPage;

  beforeEach(() => {
    page = new AppPage();
  });

  it('should display welcome message', () => {
    page.navigateTo();
    expect(page.getTitleText()).toEqual('Angular-Testing-Specs app is running!');
  });

  afterEach(async () => {
    // Assert that there are no errors emitted from the browser
    const logs = await browser.manage().logs().get(logging.Type.BROWSER);
    expect(logs).not.toContain(jasmine.objectContaining({
      level: logging.Level.SEVERE,
    } as logging.Entry));
  });
}
ERROR: 11:3   class-name-pascal       it('should display welcome message', () => {
    page.navigateTo();
    expect(page.getTitleText()).toEqual('Angular-Testing-Specs app is running!');
  });
ERROR: 11:3   class-name-pascal       it('should display welcome message', () => {
    page.navigateTo();
    expect(page.getTitleText()).toEqual('Angular-Testing-Specs app is running!');
  })
ERROR: 11:6   class-name-pascal       it('should display welcome message', () => {
    page.navigateTo();
    expect(page.getTitleText()).toEqual('Angular-Testing-Specs app is running!');
  })
ERROR: 11:40  class-name-pascal       it('should display welcome message', () => {
    page.navigateTo();
    expect(page.getTitleText()).toEqual('Angular-Testing-Specs app is running!');
  })
ERROR: 11:43  class-name-pascal       () => {
    page.navigateTo();
    expect(page.getTitleText()).toEqual('Angular-Testing-Specs app is running!');
  }
ERROR: 11:46  class-name-pascal       () => {
    page.navigateTo();
    expect(page.getTitleText()).toEqual('Angular-Testing-Specs app is running!');
  }
ERROR: 12:5   class-name-pascal       {
    page.navigateTo();
    expect(page.getTitleText()).toEqual('Angular-Testing-Specs app is running!');
  }
ERROR: 12:5   class-name-pascal       page.navigateTo();
ERROR: 12:5   class-name-pascal       page.navigateTo()
ERROR: 12:5   class-name-pascal       page.navigateTo
ERROR: 12:10  class-name-pascal       page.navigateTo
ERROR: 13:5   class-name-pascal       {
    page.navigateTo();
    expect(page.getTitleText()).toEqual('Angular-Testing-Specs app is running!');
  }
ERROR: 13:5   class-name-pascal       expect(page.getTitleText()).toEqual('Angular-Testing-Specs app is running!');
ERROR: 13:5   class-name-pascal       expect(page.getTitleText()).toEqual('Angular-Testing-Specs app is running!')
ERROR: 13:5   class-name-pascal       expect(page.getTitleText()).toEqual
ERROR: 13:5   class-name-pascal       expect(page.getTitleText())
ERROR: 13:12  class-name-pascal       expect(page.getTitleText())
ERROR: 13:12  class-name-pascal       page.getTitleText()
ERROR: 13:12  class-name-pascal       page.getTitleText
ERROR: 13:17  class-name-pascal       page.getTitleText
ERROR: 13:33  class-name-pascal       expect(page.getTitleText()).toEqual
ERROR: 13:41  class-name-pascal       expect(page.getTitleText()).toEqual('Angular-Testing-Specs app is running!')
ERROR: 16:3   class-name-pascal       {
  let page: AppPage;

  beforeEach(() => {
    page = new AppPage();
  });

  it('should display welcome message', () => {
    page.navigateTo();
    expect(page.getTitleText()).toEqual('Angular-Testing-Specs app is running!');
  });

  afterEach(async () => {
    // Assert that there are no errors emitted from the browser
    const logs = await browser.manage().logs().get(logging.Type.BROWSER);
    expect(logs).not.toContain(jasmine.objectContaining({
      level: logging.Level.SEVERE,
    } as logging.Entry));
  });
}
ERROR: 16:3   class-name-pascal       afterEach(async () => {
    // Assert that there are no errors emitted from the browser
    const logs = await browser.manage().logs().get(logging.Type.BROWSER);
    expect(logs).not.toContain(jasmine.objectContaining({
      level: logging.Level.SEVERE,
    } as logging.Entry));
  });
ERROR: 16:3   class-name-pascal       afterEach(async () => {
    // Assert that there are no errors emitted from the browser
    const logs = await browser.manage().logs().get(logging.Type.BROWSER);
    expect(logs).not.toContain(jasmine.objectContaining({
      level: logging.Level.SEVERE,
    } as logging.Entry));
  })
ERROR: 16:13  class-name-pascal       afterEach(async () => {
    // Assert that there are no errors emitted from the browser
    const logs = await browser.manage().logs().get(logging.Type.BROWSER);
    expect(logs).not.toContain(jasmine.objectContaining({
      level: logging.Level.SEVERE,
    } as logging.Entry));
  })
ERROR: 16:13  class-name-pascal       async () => {
    // Assert that there are no errors emitted from the browser
    const logs = await browser.manage().logs().get(logging.Type.BROWSER);
    expect(logs).not.toContain(jasmine.objectContaining({
      level: logging.Level.SEVERE,
    } as logging.Entry));
  }
ERROR: 16:22  class-name-pascal       async () => {
    // Assert that there are no errors emitted from the browser
    const logs = await browser.manage().logs().get(logging.Type.BROWSER);
    expect(logs).not.toContain(jasmine.objectContaining({
      level: logging.Level.SEVERE,
    } as logging.Entry));
  }
ERROR: 16:25  class-name-pascal       async () => {
    // Assert that there are no errors emitted from the browser
    const logs = await browser.manage().logs().get(logging.Type.BROWSER);
    expect(logs).not.toContain(jasmine.objectContaining({
      level: logging.Level.SEVERE,
    } as logging.Entry));
  }
ERROR: 18:5   class-name-pascal       {
    // Assert that there are no errors emitted from the browser
    const logs = await browser.manage().logs().get(logging.Type.BROWSER);
    expect(logs).not.toContain(jasmine.objectContaining({
      level: logging.Level.SEVERE,
    } as logging.Entry));
  }
ERROR: 18:5   class-name-pascal       const logs = await browser.manage().logs().get(logging.Type.BROWSER);
ERROR: 18:11  class-name-pascal       const logs = await browser.manage().logs().get(logging.Type.BROWSER)
ERROR: 18:11  class-name-pascal       logs = await browser.manage().logs().get(logging.Type.BROWSER)
ERROR: 18:18  class-name-pascal       logs = await browser.manage().logs().get(logging.Type.BROWSER)
ERROR: 18:24  class-name-pascal       await browser.manage().logs().get(logging.Type.BROWSER)
ERROR: 18:24  class-name-pascal       browser.manage().logs().get(logging.Type.BROWSER)
ERROR: 18:24  class-name-pascal       browser.manage().logs().get
ERROR: 18:24  class-name-pascal       browser.manage().logs()
ERROR: 18:24  class-name-pascal       browser.manage().logs
ERROR: 18:24  class-name-pascal       browser.manage()
ERROR: 18:24  class-name-pascal       browser.manage
ERROR: 18:32  class-name-pascal       browser.manage
ERROR: 18:41  class-name-pascal       browser.manage().logs
ERROR: 18:48  class-name-pascal       browser.manage().logs().get
ERROR: 18:52  class-name-pascal       browser.manage().logs().get(logging.Type.BROWSER)
ERROR: 18:52  class-name-pascal       logging.Type.BROWSER
ERROR: 18:52  class-name-pascal       logging.Type
ERROR: 18:60  class-name-pascal       logging.Type
ERROR: 18:65  class-name-pascal       logging.Type.BROWSER
ERROR: 19:5   class-name-pascal       {
    // Assert that there are no errors emitted from the browser
    const logs = await browser.manage().logs().get(logging.Type.BROWSER);
    expect(logs).not.toContain(jasmine.objectContaining({
      level: logging.Level.SEVERE,
    } as logging.Entry));
  }
ERROR: 19:5   class-name-pascal       expect(logs).not.toContain(jasmine.objectContaining({
      level: logging.Level.SEVERE,
    } as logging.Entry));
ERROR: 19:5   class-name-pascal       expect(logs).not.toContain(jasmine.objectContaining({
      level: logging.Level.SEVERE,
    } as logging.Entry))
ERROR: 19:5   class-name-pascal       expect(logs).not.toContain
ERROR: 19:5   class-name-pascal       expect(logs).not
ERROR: 19:5   class-name-pascal       expect(logs)
ERROR: 19:12  class-name-pascal       expect(logs)
ERROR: 19:18  class-name-pascal       expect(logs).not
ERROR: 19:22  class-name-pascal       expect(logs).not.toContain
ERROR: 19:32  class-name-pascal       expect(logs).not.toContain(jasmine.objectContaining({
      level: logging.Level.SEVERE,
    } as logging.Entry))
ERROR: 19:32  class-name-pascal       jasmine.objectContaining({
      level: logging.Level.SEVERE,
    } as logging.Entry)
ERROR: 19:32  class-name-pascal       jasmine.objectContaining
ERROR: 19:40  class-name-pascal       jasmine.objectContaining
ERROR: 19:57  class-name-pascal       jasmine.objectContaining({
      level: logging.Level.SEVERE,
    } as logging.Entry)
ERROR: 19:57  class-name-pascal       {
      level: logging.Level.SEVERE,
    } as logging.Entry
ERROR: 20:7   class-name-pascal       {
      level: logging.Level.SEVERE,
    }
ERROR: 20:7   class-name-pascal       level: logging.Level.SEVERE
ERROR: 20:14  class-name-pascal       level: logging.Level.SEVERE
ERROR: 20:14  class-name-pascal       logging.Level.SEVERE
ERROR: 20:14  class-name-pascal       logging.Level
ERROR: 20:22  class-name-pascal       logging.Level
ERROR: 20:28  class-name-pascal       logging.Level.SEVERE
ERROR: 21:10  class-name-pascal       {
      level: logging.Level.SEVERE,
    } as logging.Entry
ERROR: 21:10  class-name-pascal       logging.Entry
ERROR: 21:10  class-name-pascal       logging.Entry
ERROR: 21:18  class-name-pascal       logging.Entry
ERROR: 24:1   class-name-pascal       import { AppPage } from './app.po';
import { browser, logging } from 'protractor';

describe('workspace-project App', () => {
  let page: AppPage;

  beforeEach(() => {
    page = new AppPage();
  });

  it('should display welcome message', () => {
    page.navigateTo();
    expect(page.getTitleText()).toEqual('Angular-Testing-Specs app is running!');
  });

  afterEach(async () => {
    // Assert that there are no errors emitted from the browser
    const logs = await browser.manage().logs().get(logging.Type.BROWSER);
    expect(logs).not.toContain(jasmine.objectContaining({
      level: logging.Level.SEVERE,
    } as logging.Entry));
  });
});


/home/vinay/projects/Angular-Testing-Specs/e2e/src/app.po.ts:1:1
ERROR: 1:1    class-name-pascal       import { browser, by, element } from 'protractor';

export class AppPage {
  navigateTo(): Promise<unknown> {
    return browser.get(browser.baseUrl) as Promise<unknown>;
  }

  getTitleText(): Promise<string> {
    return element(by.css('app-root .content span')).getText() as Promise<string>;
  }
}

ERROR: 1:8    class-name-pascal       import { browser, by, element } from 'protractor';
ERROR: 1:8    class-name-pascal       { browser, by, element }
ERROR: 1:10   class-name-pascal       { browser, by, element }
ERROR: 1:10   class-name-pascal       browser
ERROR: 1:19   class-name-pascal       { browser, by, element }
ERROR: 1:19   class-name-pascal       by
ERROR: 1:23   class-name-pascal       { browser, by, element }
ERROR: 1:23   class-name-pascal       element
ERROR: 1:38   class-name-pascal       import { browser, by, element } from 'protractor';
ERROR: 3:1    class-name-pascal       import { browser, by, element } from 'protractor';

export class AppPage {
  navigateTo(): Promise<unknown> {
    return browser.get(browser.baseUrl) as Promise<unknown>;
  }

  getTitleText(): Promise<string> {
    return element(by.css('app-root .content span')).getText() as Promise<string>;
  }
}

ERROR: 3:1    class-name-pascal       export class AppPage {
  navigateTo(): Promise<unknown> {
    return browser.get(browser.baseUrl) as Promise<unknown>;
  }

  getTitleText(): Promise<string> {
    return element(by.css('app-root .content span')).getText() as Promise<string>;
  }
}
ERROR: 3:14   class-name-pascal       export class AppPage {
  navigateTo(): Promise<unknown> {
    return browser.get(browser.baseUrl) as Promise<unknown>;
  }

  getTitleText(): Promise<string> {
    return element(by.css('app-root .content span')).getText() as Promise<string>;
  }
}
ERROR: 4:3    class-name-pascal       export class AppPage {
  navigateTo(): Promise<unknown> {
    return browser.get(browser.baseUrl) as Promise<unknown>;
  }

  getTitleText(): Promise<string> {
    return element(by.css('app-root .content span')).getText() as Promise<string>;
  }
}
ERROR: 4:3    class-name-pascal       navigateTo(): Promise<unknown> {
    return browser.get(browser.baseUrl) as Promise<unknown>;
  }
ERROR: 4:17   class-name-pascal       navigateTo(): Promise<unknown> {
    return browser.get(browser.baseUrl) as Promise<unknown>;
  }
ERROR: 4:17   class-name-pascal       Promise<unknown>
ERROR: 4:25   class-name-pascal       Promise<unknown>
ERROR: 4:34   class-name-pascal       navigateTo(): Promise<unknown> {
    return browser.get(browser.baseUrl) as Promise<unknown>;
  }
ERROR: 5:5    class-name-pascal       {
    return browser.get(browser.baseUrl) as Promise<unknown>;
  }
ERROR: 5:12   class-name-pascal       return browser.get(browser.baseUrl) as Promise<unknown>;
ERROR: 5:12   class-name-pascal       browser.get(browser.baseUrl) as Promise<unknown>
ERROR: 5:12   class-name-pascal       browser.get(browser.baseUrl)
ERROR: 5:12   class-name-pascal       browser.get
ERROR: 5:20   class-name-pascal       browser.get
ERROR: 5:24   class-name-pascal       browser.get(browser.baseUrl)
ERROR: 5:24   class-name-pascal       browser.baseUrl
ERROR: 5:32   class-name-pascal       browser.baseUrl
ERROR: 5:44   class-name-pascal       browser.get(browser.baseUrl) as Promise<unknown>
ERROR: 5:44   class-name-pascal       Promise<unknown>
ERROR: 5:52   class-name-pascal       Promise<unknown>
ERROR: 8:3    class-name-pascal       export class AppPage {
  navigateTo(): Promise<unknown> {
    return browser.get(browser.baseUrl) as Promise<unknown>;
  }

  getTitleText(): Promise<string> {
    return element(by.css('app-root .content span')).getText() as Promise<string>;
  }
}
ERROR: 8:3    class-name-pascal       getTitleText(): Promise<string> {
    return element(by.css('app-root .content span')).getText() as Promise<string>;
  }
ERROR: 8:19   class-name-pascal       getTitleText(): Promise<string> {
    return element(by.css('app-root .content span')).getText() as Promise<string>;
  }
ERROR: 8:19   class-name-pascal       Promise<string>
ERROR: 8:27   class-name-pascal       Promise<string>
ERROR: 8:35   class-name-pascal       getTitleText(): Promise<string> {
    return element(by.css('app-root .content span')).getText() as Promise<string>;
  }
ERROR: 9:5    class-name-pascal       {
    return element(by.css('app-root .content span')).getText() as Promise<string>;
  }
ERROR: 9:12   class-name-pascal       return element(by.css('app-root .content span')).getText() as Promise<string>;
ERROR: 9:12   class-name-pascal       element(by.css('app-root .content span')).getText() as Promise<string>
ERROR: 9:12   class-name-pascal       element(by.css('app-root .content span')).getText()
ERROR: 9:12   class-name-pascal       element(by.css('app-root .content span')).getText
ERROR: 9:12   class-name-pascal       element(by.css('app-root .content span'))
ERROR: 9:20   class-name-pascal       element(by.css('app-root .content span'))
ERROR: 9:20   class-name-pascal       by.css('app-root .content span')
ERROR: 9:20   class-name-pascal       by.css
ERROR: 9:23   class-name-pascal       by.css
ERROR: 9:27   class-name-pascal       by.css('app-root .content span')
ERROR: 9:54   class-name-pascal       element(by.css('app-root .content span')).getText
ERROR: 9:67   class-name-pascal       element(by.css('app-root .content span')).getText() as Promise<string>
ERROR: 9:67   class-name-pascal       Promise<string>
ERROR: 9:75   class-name-pascal       Promise<string>
ERROR: 12:1   class-name-pascal       import { browser, by, element } from 'protractor';

export class AppPage {
  navigateTo(): Promise<unknown> {
    return browser.get(browser.baseUrl) as Promise<unknown>;
  }

  getTitleText(): Promise<string> {
    return element(by.css('app-root .content span')).getText() as Promise<string>;
  }
}


/home/vinay/projects/Angular-Testing-Specs/src/app/app-routing.module.ts:1:1
ERROR: 1:1    class-name-pascal       import { NgModule } from '@angular/core';
import { Routes, RouterModule } from '@angular/router';

const routes: Routes = [];

@NgModule({
  imports: [RouterModule.forRoot(routes)],
  exports: [RouterModule]
})
export class AppRoutingModule { }

ERROR: 1:8    class-name-pascal       import { NgModule } from '@angular/core';
ERROR: 1:8    class-name-pascal       { NgModule }
ERROR: 1:10   class-name-pascal       { NgModule }
ERROR: 1:10   class-name-pascal       NgModule
ERROR: 1:26   class-name-pascal       import { NgModule } from '@angular/core';
ERROR: 2:1    class-name-pascal       import { NgModule } from '@angular/core';
import { Routes, RouterModule } from '@angular/router';

const routes: Routes = [];

@NgModule({
  imports: [RouterModule.forRoot(routes)],
  exports: [RouterModule]
})
export class AppRoutingModule { }

ERROR: 2:8    class-name-pascal       import { Routes, RouterModule } from '@angular/router';
ERROR: 2:8    class-name-pascal       { Routes, RouterModule }
ERROR: 2:10   class-name-pascal       { Routes, RouterModule }
ERROR: 2:10   class-name-pascal       Routes
ERROR: 2:18   class-name-pascal       { Routes, RouterModule }
ERROR: 2:18   class-name-pascal       RouterModule
ERROR: 2:38   class-name-pascal       import { Routes, RouterModule } from '@angular/router';
ERROR: 4:1    class-name-pascal       import { NgModule } from '@angular/core';
import { Routes, RouterModule } from '@angular/router';

const routes: Routes = [];

@NgModule({
  imports: [RouterModule.forRoot(routes)],
  exports: [RouterModule]
})
export class AppRoutingModule { }

ERROR: 4:1    class-name-pascal       const routes: Routes = [];
ERROR: 4:7    class-name-pascal       const routes: Routes = []
ERROR: 4:7    class-name-pascal       routes: Routes = []
ERROR: 4:15   class-name-pascal       routes: Routes = []
ERROR: 4:15   class-name-pascal       Routes
ERROR: 4:24   class-name-pascal       routes: Routes = []
ERROR: 6:1    class-name-pascal       import { NgModule } from '@angular/core';
import { Routes, RouterModule } from '@angular/router';

const routes: Routes = [];

@NgModule({
  imports: [RouterModule.forRoot(routes)],
  exports: [RouterModule]
})
export class AppRoutingModule { }

ERROR: 6:2    class-name-pascal       @NgModule({
  imports: [RouterModule.forRoot(routes)],
  exports: [RouterModule]
})
ERROR: 6:2    class-name-pascal       NgModule({
  imports: [RouterModule.forRoot(routes)],
  exports: [RouterModule]
})
ERROR: 6:11   class-name-pascal       NgModule({
  imports: [RouterModule.forRoot(routes)],
  exports: [RouterModule]
})
ERROR: 7:3    class-name-pascal       {
  imports: [RouterModule.forRoot(routes)],
  exports: [RouterModule]
}
ERROR: 7:3    class-name-pascal       imports: [RouterModule.forRoot(routes)]
ERROR: 7:12   class-name-pascal       imports: [RouterModule.forRoot(routes)]
ERROR: 7:13   class-name-pascal       [RouterModule.forRoot(routes)]
ERROR: 7:13   class-name-pascal       RouterModule.forRoot(routes)
ERROR: 7:13   class-name-pascal       RouterModule.forRoot
ERROR: 7:26   class-name-pascal       RouterModule.forRoot
ERROR: 7:34   class-name-pascal       RouterModule.forRoot(routes)
ERROR: 8:3    class-name-pascal       {
  imports: [RouterModule.forRoot(routes)],
  exports: [RouterModule]
}
ERROR: 8:3    class-name-pascal       exports: [RouterModule]
ERROR: 8:12   class-name-pascal       exports: [RouterModule]
ERROR: 8:13   class-name-pascal       [RouterModule]
ERROR: 10:1   class-name-pascal       @NgModule({
  imports: [RouterModule.forRoot(routes)],
  exports: [RouterModule]
})
export class AppRoutingModule { }
ERROR: 10:14  class-name-pascal       @NgModule({
  imports: [RouterModule.forRoot(routes)],
  exports: [RouterModule]
})
export class AppRoutingModule { }
ERROR: 11:1   class-name-pascal       import { NgModule } from '@angular/core';
import { Routes, RouterModule } from '@angular/router';

const routes: Routes = [];

@NgModule({
  imports: [RouterModule.forRoot(routes)],
  exports: [RouterModule]
})
export class AppRoutingModule { }


/home/vinay/projects/Angular-Testing-Specs/src/app/app.component.spec.ts:1:1
ERROR: 1:1    class-name-pascal       import { TestBed } from '@angular/core/testing';
import { FormBuilder, FormsModule, ReactiveFormsModule } from '@angular/forms';
import { RouterTestingModule } from '@angular/router/testing';
import { UnitTestService } from 'src/services/unit-test.service';
import { UniTest } from 'src/testing/UnitTest';
import { AppComponent } from './app.component';
import { User } from './user.model';


describe('AppComponent', () => {
  let fixture;
  let a;
  let app;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [
        RouterTestingModule,
        ReactiveFormsModule,
        FormsModule
      ],
      declarations: [
        AppComponent
      ]
    }).compileComponents();
    fixture = TestBed.createComponent(AppComponent);
    app = fixture.componentInstance;
    a = new UniTest(app, 'App Component');
  });
  it('should be created1', () => {
    a.testTitleRendering('Angular-Testing-Specs');
  });
  it('formValid', () => {
    app.initForm();
    a.testFormStatus('testForm');
  });
  it('Form Valid After value set', () => {
    app.initForm();
    a.testFormAfterValue('testForm');
  });
  it('name invalid initially', () => {
    app.initForm();
    a.testFormControlForRequiredError('testForm', 'name');
  });
  it('name valid after value set', () => {
    app.initForm();
    a.testFormControlForRequiredErrorAfterValue('testForm', 'name');
  });
  it('check return type', () => {
    // app.initForm();
    // let user1: User;
    a.checkMethodReturnType('setUser', 'object');
  });
});

ERROR: 1:8    class-name-pascal       import { TestBed } from '@angular/core/testing';
ERROR: 1:8    class-name-pascal       { TestBed }
ERROR: 1:10   class-name-pascal       { TestBed }
ERROR: 1:10   class-name-pascal       TestBed
ERROR: 1:25   class-name-pascal       import { TestBed } from '@angular/core/testing';
ERROR: 2:1    class-name-pascal       import { TestBed } from '@angular/core/testing';
import { FormBuilder, FormsModule, ReactiveFormsModule } from '@angular/forms';
import { RouterTestingModule } from '@angular/router/testing';
import { UnitTestService } from 'src/services/unit-test.service';
import { UniTest } from 'src/testing/UnitTest';
import { AppComponent } from './app.component';
import { User } from './user.model';


describe('AppComponent', () => {
  let fixture;
  let a;
  let app;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [
        RouterTestingModule,
        ReactiveFormsModule,
        FormsModule
      ],
      declarations: [
        AppComponent
      ]
    }).compileComponents();
    fixture = TestBed.createComponent(AppComponent);
    app = fixture.componentInstance;
    a = new UniTest(app, 'App Component');
  });
  it('should be created1', () => {
    a.testTitleRendering('Angular-Testing-Specs');
  });
  it('formValid', () => {
    app.initForm();
    a.testFormStatus('testForm');
  });
  it('Form Valid After value set', () => {
    app.initForm();
    a.testFormAfterValue('testForm');
  });
  it('name invalid initially', () => {
    app.initForm();
    a.testFormControlForRequiredError('testForm', 'name');
  });
  it('name valid after value set', () => {
    app.initForm();
    a.testFormControlForRequiredErrorAfterValue('testForm', 'name');
  });
  it('check return type', () => {
    // app.initForm();
    // let user1: User;
    a.checkMethodReturnType('setUser', 'object');
  });
});

ERROR: 2:8    class-name-pascal       import { FormBuilder, FormsModule, ReactiveFormsModule } from '@angular/forms';
ERROR: 2:8    class-name-pascal       { FormBuilder, FormsModule, ReactiveFormsModule }
ERROR: 2:10   class-name-pascal       { FormBuilder, FormsModule, ReactiveFormsModule }
ERROR: 2:10   class-name-pascal       FormBuilder
ERROR: 2:23   class-name-pascal       { FormBuilder, FormsModule, ReactiveFormsModule }
ERROR: 2:23   class-name-pascal       FormsModule
ERROR: 2:36   class-name-pascal       { FormBuilder, FormsModule, ReactiveFormsModule }
ERROR: 2:36   class-name-pascal       ReactiveFormsModule
ERROR: 2:63   class-name-pascal       import { FormBuilder, FormsModule, ReactiveFormsModule } from '@angular/forms';
ERROR: 3:1    class-name-pascal       import { TestBed } from '@angular/core/testing';
import { FormBuilder, FormsModule, ReactiveFormsModule } from '@angular/forms';
import { RouterTestingModule } from '@angular/router/testing';
import { UnitTestService } from 'src/services/unit-test.service';
import { UniTest } from 'src/testing/UnitTest';
import { AppComponent } from './app.component';
import { User } from './user.model';


describe('AppComponent', () => {
  let fixture;
  let a;
  let app;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [
        RouterTestingModule,
        ReactiveFormsModule,
        FormsModule
      ],
      declarations: [
        AppComponent
      ]
    }).compileComponents();
    fixture = TestBed.createComponent(AppComponent);
    app = fixture.componentInstance;
    a = new UniTest(app, 'App Component');
  });
  it('should be created1', () => {
    a.testTitleRendering('Angular-Testing-Specs');
  });
  it('formValid', () => {
    app.initForm();
    a.testFormStatus('testForm');
  });
  it('Form Valid After value set', () => {
    app.initForm();
    a.testFormAfterValue('testForm');
  });
  it('name invalid initially', () => {
    app.initForm();
    a.testFormControlForRequiredError('testForm', 'name');
  });
  it('name valid after value set', () => {
    app.initForm();
    a.testFormControlForRequiredErrorAfterValue('testForm', 'name');
  });
  it('check return type', () => {
    // app.initForm();
    // let user1: User;
    a.checkMethodReturnType('setUser', 'object');
  });
});

ERROR: 3:8    class-name-pascal       import { RouterTestingModule } from '@angular/router/testing';
ERROR: 3:8    class-name-pascal       { RouterTestingModule }
ERROR: 3:10   class-name-pascal       { RouterTestingModule }
ERROR: 3:10   class-name-pascal       RouterTestingModule
ERROR: 3:37   class-name-pascal       import { RouterTestingModule } from '@angular/router/testing';
ERROR: 4:1    class-name-pascal       import { TestBed } from '@angular/core/testing';
import { FormBuilder, FormsModule, ReactiveFormsModule } from '@angular/forms';
import { RouterTestingModule } from '@angular/router/testing';
import { UnitTestService } from 'src/services/unit-test.service';
import { UniTest } from 'src/testing/UnitTest';
import { AppComponent } from './app.component';
import { User } from './user.model';


describe('AppComponent', () => {
  let fixture;
  let a;
  let app;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [
        RouterTestingModule,
        ReactiveFormsModule,
        FormsModule
      ],
      declarations: [
        AppComponent
      ]
    }).compileComponents();
    fixture = TestBed.createComponent(AppComponent);
    app = fixture.componentInstance;
    a = new UniTest(app, 'App Component');
  });
  it('should be created1', () => {
    a.testTitleRendering('Angular-Testing-Specs');
  });
  it('formValid', () => {
    app.initForm();
    a.testFormStatus('testForm');
  });
  it('Form Valid After value set', () => {
    app.initForm();
    a.testFormAfterValue('testForm');
  });
  it('name invalid initially', () => {
    app.initForm();
    a.testFormControlForRequiredError('testForm', 'name');
  });
  it('name valid after value set', () => {
    app.initForm();
    a.testFormControlForRequiredErrorAfterValue('testForm', 'name');
  });
  it('check return type', () => {
    // app.initForm();
    // let user1: User;
    a.checkMethodReturnType('setUser', 'object');
  });
});

ERROR: 4:8    class-name-pascal       import { UnitTestService } from 'src/services/unit-test.service';
ERROR: 4:8    class-name-pascal       { UnitTestService }
ERROR: 4:10   class-name-pascal       { UnitTestService }
ERROR: 4:10   class-name-pascal       UnitTestService
ERROR: 4:33   class-name-pascal       import { UnitTestService } from 'src/services/unit-test.service';
ERROR: 5:1    class-name-pascal       import { TestBed } from '@angular/core/testing';
import { FormBuilder, FormsModule, ReactiveFormsModule } from '@angular/forms';
import { RouterTestingModule } from '@angular/router/testing';
import { UnitTestService } from 'src/services/unit-test.service';
import { UniTest } from 'src/testing/UnitTest';
import { AppComponent } from './app.component';
import { User } from './user.model';


describe('AppComponent', () => {
  let fixture;
  let a;
  let app;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [
        RouterTestingModule,
        ReactiveFormsModule,
        FormsModule
      ],
      declarations: [
        AppComponent
      ]
    }).compileComponents();
    fixture = TestBed.createComponent(AppComponent);
    app = fixture.componentInstance;
    a = new UniTest(app, 'App Component');
  });
  it('should be created1', () => {
    a.testTitleRendering('Angular-Testing-Specs');
  });
  it('formValid', () => {
    app.initForm();
    a.testFormStatus('testForm');
  });
  it('Form Valid After value set', () => {
    app.initForm();
    a.testFormAfterValue('testForm');
  });
  it('name invalid initially', () => {
    app.initForm();
    a.testFormControlForRequiredError('testForm', 'name');
  });
  it('name valid after value set', () => {
    app.initForm();
    a.testFormControlForRequiredErrorAfterValue('testForm', 'name');
  });
  it('check return type', () => {
    // app.initForm();
    // let user1: User;
    a.checkMethodReturnType('setUser', 'object');
  });
});

ERROR: 5:8    class-name-pascal       import { UniTest } from 'src/testing/UnitTest';
ERROR: 5:8    class-name-pascal       { UniTest }
ERROR: 5:10   class-name-pascal       { UniTest }
ERROR: 5:10   class-name-pascal       UniTest
ERROR: 5:25   class-name-pascal       import { UniTest } from 'src/testing/UnitTest';
ERROR: 6:1    class-name-pascal       import { TestBed } from '@angular/core/testing';
import { FormBuilder, FormsModule, ReactiveFormsModule } from '@angular/forms';
import { RouterTestingModule } from '@angular/router/testing';
import { UnitTestService } from 'src/services/unit-test.service';
import { UniTest } from 'src/testing/UnitTest';
import { AppComponent } from './app.component';
import { User } from './user.model';


describe('AppComponent', () => {
  let fixture;
  let a;
  let app;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [
        RouterTestingModule,
        ReactiveFormsModule,
        FormsModule
      ],
      declarations: [
        AppComponent
      ]
    }).compileComponents();
    fixture = TestBed.createComponent(AppComponent);
    app = fixture.componentInstance;
    a = new UniTest(app, 'App Component');
  });
  it('should be created1', () => {
    a.testTitleRendering('Angular-Testing-Specs');
  });
  it('formValid', () => {
    app.initForm();
    a.testFormStatus('testForm');
  });
  it('Form Valid After value set', () => {
    app.initForm();
    a.testFormAfterValue('testForm');
  });
  it('name invalid initially', () => {
    app.initForm();
    a.testFormControlForRequiredError('testForm', 'name');
  });
  it('name valid after value set', () => {
    app.initForm();
    a.testFormControlForRequiredErrorAfterValue('testForm', 'name');
  });
  it('check return type', () => {
    // app.initForm();
    // let user1: User;
    a.checkMethodReturnType('setUser', 'object');
  });
});

ERROR: 6:8    class-name-pascal       import { AppComponent } from './app.component';
ERROR: 6:8    class-name-pascal       { AppComponent }
ERROR: 6:10   class-name-pascal       { AppComponent }
ERROR: 6:10   class-name-pascal       AppComponent
ERROR: 6:30   class-name-pascal       import { AppComponent } from './app.component';
ERROR: 7:1    class-name-pascal       import { TestBed } from '@angular/core/testing';
import { FormBuilder, FormsModule, ReactiveFormsModule } from '@angular/forms';
import { RouterTestingModule } from '@angular/router/testing';
import { UnitTestService } from 'src/services/unit-test.service';
import { UniTest } from 'src/testing/UnitTest';
import { AppComponent } from './app.component';
import { User } from './user.model';


describe('AppComponent', () => {
  let fixture;
  let a;
  let app;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [
        RouterTestingModule,
        ReactiveFormsModule,
        FormsModule
      ],
      declarations: [
        AppComponent
      ]
    }).compileComponents();
    fixture = TestBed.createComponent(AppComponent);
    app = fixture.componentInstance;
    a = new UniTest(app, 'App Component');
  });
  it('should be created1', () => {
    a.testTitleRendering('Angular-Testing-Specs');
  });
  it('formValid', () => {
    app.initForm();
    a.testFormStatus('testForm');
  });
  it('Form Valid After value set', () => {
    app.initForm();
    a.testFormAfterValue('testForm');
  });
  it('name invalid initially', () => {
    app.initForm();
    a.testFormControlForRequiredError('testForm', 'name');
  });
  it('name valid after value set', () => {
    app.initForm();
    a.testFormControlForRequiredErrorAfterValue('testForm', 'name');
  });
  it('check return type', () => {
    // app.initForm();
    // let user1: User;
    a.checkMethodReturnType('setUser', 'object');
  });
});

ERROR: 7:8    class-name-pascal       import { User } from './user.model';
ERROR: 7:8    class-name-pascal       { User }
ERROR: 7:10   class-name-pascal       { User }
ERROR: 7:10   class-name-pascal       User
ERROR: 7:22   class-name-pascal       import { User } from './user.model';
ERROR: 10:1   class-name-pascal       import { TestBed } from '@angular/core/testing';
import { FormBuilder, FormsModule, ReactiveFormsModule } from '@angular/forms';
import { RouterTestingModule } from '@angular/router/testing';
import { UnitTestService } from 'src/services/unit-test.service';
import { UniTest } from 'src/testing/UnitTest';
import { AppComponent } from './app.component';
import { User } from './user.model';


describe('AppComponent', () => {
  let fixture;
  let a;
  let app;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [
        RouterTestingModule,
        ReactiveFormsModule,
        FormsModule
      ],
      declarations: [
        AppComponent
      ]
    }).compileComponents();
    fixture = TestBed.createComponent(AppComponent);
    app = fixture.componentInstance;
    a = new UniTest(app, 'App Component');
  });
  it('should be created1', () => {
    a.testTitleRendering('Angular-Testing-Specs');
  });
  it('formValid', () => {
    app.initForm();
    a.testFormStatus('testForm');
  });
  it('Form Valid After value set', () => {
    app.initForm();
    a.testFormAfterValue('testForm');
  });
  it('name invalid initially', () => {
    app.initForm();
    a.testFormControlForRequiredError('testForm', 'name');
  });
  it('name valid after value set', () => {
    app.initForm();
    a.testFormControlForRequiredErrorAfterValue('testForm', 'name');
  });
  it('check return type', () => {
    // app.initForm();
    // let user1: User;
    a.checkMethodReturnType('setUser', 'object');
  });
});

ERROR: 10:1   class-name-pascal       describe('AppComponent', () => {
  let fixture;
  let a;
  let app;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [
        RouterTestingModule,
        ReactiveFormsModule,
        FormsModule
      ],
      declarations: [
        AppComponent
      ]
    }).compileComponents();
    fixture = TestBed.createComponent(AppComponent);
    app = fixture.componentInstance;
    a = new UniTest(app, 'App Component');
  });
  it('should be created1', () => {
    a.testTitleRendering('Angular-Testing-Specs');
  });
  it('formValid', () => {
    app.initForm();
    a.testFormStatus('testForm');
  });
  it('Form Valid After value set', () => {
    app.initForm();
    a.testFormAfterValue('testForm');
  });
  it('name invalid initially', () => {
    app.initForm();
    a.testFormControlForRequiredError('testForm', 'name');
  });
  it('name valid after value set', () => {
    app.initForm();
    a.testFormControlForRequiredErrorAfterValue('testForm', 'name');
  });
  it('check return type', () => {
    // app.initForm();
    // let user1: User;
    a.checkMethodReturnType('setUser', 'object');
  });
});
ERROR: 10:1   class-name-pascal       describe('AppComponent', () => {
  let fixture;
  let a;
  let app;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [
        RouterTestingModule,
        ReactiveFormsModule,
        FormsModule
      ],
      declarations: [
        AppComponent
      ]
    }).compileComponents();
    fixture = TestBed.createComponent(AppComponent);
    app = fixture.componentInstance;
    a = new UniTest(app, 'App Component');
  });
  it('should be created1', () => {
    a.testTitleRendering('Angular-Testing-Specs');
  });
  it('formValid', () => {
    app.initForm();
    a.testFormStatus('testForm');
  });
  it('Form Valid After value set', () => {
    app.initForm();
    a.testFormAfterValue('testForm');
  });
  it('name invalid initially', () => {
    app.initForm();
    a.testFormControlForRequiredError('testForm', 'name');
  });
  it('name valid after value set', () => {
    app.initForm();
    a.testFormControlForRequiredErrorAfterValue('testForm', 'name');
  });
  it('check return type', () => {
    // app.initForm();
    // let user1: User;
    a.checkMethodReturnType('setUser', 'object');
  });
})
ERROR: 10:10  class-name-pascal       describe('AppComponent', () => {
  let fixture;
  let a;
  let app;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [
        RouterTestingModule,
        ReactiveFormsModule,
        FormsModule
      ],
      declarations: [
        AppComponent
      ]
    }).compileComponents();
    fixture = TestBed.createComponent(AppComponent);
    app = fixture.componentInstance;
    a = new UniTest(app, 'App Component');
  });
  it('should be created1', () => {
    a.testTitleRendering('Angular-Testing-Specs');
  });
  it('formValid', () => {
    app.initForm();
    a.testFormStatus('testForm');
  });
  it('Form Valid After value set', () => {
    app.initForm();
    a.testFormAfterValue('testForm');
  });
  it('name invalid initially', () => {
    app.initForm();
    a.testFormControlForRequiredError('testForm', 'name');
  });
  it('name valid after value set', () => {
    app.initForm();
    a.testFormControlForRequiredErrorAfterValue('testForm', 'name');
  });
  it('check return type', () => {
    // app.initForm();
    // let user1: User;
    a.checkMethodReturnType('setUser', 'object');
  });
})
ERROR: 10:26  class-name-pascal       describe('AppComponent', () => {
  let fixture;
  let a;
  let app;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [
        RouterTestingModule,
        ReactiveFormsModule,
        FormsModule
      ],
      declarations: [
        AppComponent
      ]
    }).compileComponents();
    fixture = TestBed.createComponent(AppComponent);
    app = fixture.componentInstance;
    a = new UniTest(app, 'App Component');
  });
  it('should be created1', () => {
    a.testTitleRendering('Angular-Testing-Specs');
  });
  it('formValid', () => {
    app.initForm();
    a.testFormStatus('testForm');
  });
  it('Form Valid After value set', () => {
    app.initForm();
    a.testFormAfterValue('testForm');
  });
  it('name invalid initially', () => {
    app.initForm();
    a.testFormControlForRequiredError('testForm', 'name');
  });
  it('name valid after value set', () => {
    app.initForm();
    a.testFormControlForRequiredErrorAfterValue('testForm', 'name');
  });
  it('check return type', () => {
    // app.initForm();
    // let user1: User;
    a.checkMethodReturnType('setUser', 'object');
  });
})
ERROR: 10:29  class-name-pascal       () => {
  let fixture;
  let a;
  let app;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [
        RouterTestingModule,
        ReactiveFormsModule,
        FormsModule
      ],
      declarations: [
        AppComponent
      ]
    }).compileComponents();
    fixture = TestBed.createComponent(AppComponent);
    app = fixture.componentInstance;
    a = new UniTest(app, 'App Component');
  });
  it('should be created1', () => {
    a.testTitleRendering('Angular-Testing-Specs');
  });
  it('formValid', () => {
    app.initForm();
    a.testFormStatus('testForm');
  });
  it('Form Valid After value set', () => {
    app.initForm();
    a.testFormAfterValue('testForm');
  });
  it('name invalid initially', () => {
    app.initForm();
    a.testFormControlForRequiredError('testForm', 'name');
  });
  it('name valid after value set', () => {
    app.initForm();
    a.testFormControlForRequiredErrorAfterValue('testForm', 'name');
  });
  it('check return type', () => {
    // app.initForm();
    // let user1: User;
    a.checkMethodReturnType('setUser', 'object');
  });
}
ERROR: 10:32  class-name-pascal       () => {
  let fixture;
  let a;
  let app;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [
        RouterTestingModule,
        ReactiveFormsModule,
        FormsModule
      ],
      declarations: [
        AppComponent
      ]
    }).compileComponents();
    fixture = TestBed.createComponent(AppComponent);
    app = fixture.componentInstance;
    a = new UniTest(app, 'App Component');
  });
  it('should be created1', () => {
    a.testTitleRendering('Angular-Testing-Specs');
  });
  it('formValid', () => {
    app.initForm();
    a.testFormStatus('testForm');
  });
  it('Form Valid After value set', () => {
    app.initForm();
    a.testFormAfterValue('testForm');
  });
  it('name invalid initially', () => {
    app.initForm();
    a.testFormControlForRequiredError('testForm', 'name');
  });
  it('name valid after value set', () => {
    app.initForm();
    a.testFormControlForRequiredErrorAfterValue('testForm', 'name');
  });
  it('check return type', () => {
    // app.initForm();
    // let user1: User;
    a.checkMethodReturnType('setUser', 'object');
  });
}
ERROR: 11:3   class-name-pascal       {
  let fixture;
  let a;
  let app;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [
        RouterTestingModule,
        ReactiveFormsModule,
        FormsModule
      ],
      declarations: [
        AppComponent
      ]
    }).compileComponents();
    fixture = TestBed.createComponent(AppComponent);
    app = fixture.componentInstance;
    a = new UniTest(app, 'App Component');
  });
  it('should be created1', () => {
    a.testTitleRendering('Angular-Testing-Specs');
  });
  it('formValid', () => {
    app.initForm();
    a.testFormStatus('testForm');
  });
  it('Form Valid After value set', () => {
    app.initForm();
    a.testFormAfterValue('testForm');
  });
  it('name invalid initially', () => {
    app.initForm();
    a.testFormControlForRequiredError('testForm', 'name');
  });
  it('name valid after value set', () => {
    app.initForm();
    a.testFormControlForRequiredErrorAfterValue('testForm', 'name');
  });
  it('check return type', () => {
    // app.initForm();
    // let user1: User;
    a.checkMethodReturnType('setUser', 'object');
  });
}
ERROR: 11:3   class-name-pascal       let fixture;
ERROR: 11:7   class-name-pascal       let fixture
ERROR: 11:7   class-name-pascal       fixture
ERROR: 12:3   class-name-pascal       {
  let fixture;
  let a;
  let app;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [
        RouterTestingModule,
        ReactiveFormsModule,
        FormsModule
      ],
      declarations: [
        AppComponent
      ]
    }).compileComponents();
    fixture = TestBed.createComponent(AppComponent);
    app = fixture.componentInstance;
    a = new UniTest(app, 'App Component');
  });
  it('should be created1', () => {
    a.testTitleRendering('Angular-Testing-Specs');
  });
  it('formValid', () => {
    app.initForm();
    a.testFormStatus('testForm');
  });
  it('Form Valid After value set', () => {
    app.initForm();
    a.testFormAfterValue('testForm');
  });
  it('name invalid initially', () => {
    app.initForm();
    a.testFormControlForRequiredError('testForm', 'name');
  });
  it('name valid after value set', () => {
    app.initForm();
    a.testFormControlForRequiredErrorAfterValue('testForm', 'name');
  });
  it('check return type', () => {
    // app.initForm();
    // let user1: User;
    a.checkMethodReturnType('setUser', 'object');
  });
}
ERROR: 12:3   class-name-pascal       let a;
ERROR: 12:7   class-name-pascal       let a
ERROR: 12:7   class-name-pascal       a
ERROR: 13:3   class-name-pascal       {
  let fixture;
  let a;
  let app;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [
        RouterTestingModule,
        ReactiveFormsModule,
        FormsModule
      ],
      declarations: [
        AppComponent
      ]
    }).compileComponents();
    fixture = TestBed.createComponent(AppComponent);
    app = fixture.componentInstance;
    a = new UniTest(app, 'App Component');
  });
  it('should be created1', () => {
    a.testTitleRendering('Angular-Testing-Specs');
  });
  it('formValid', () => {
    app.initForm();
    a.testFormStatus('testForm');
  });
  it('Form Valid After value set', () => {
    app.initForm();
    a.testFormAfterValue('testForm');
  });
  it('name invalid initially', () => {
    app.initForm();
    a.testFormControlForRequiredError('testForm', 'name');
  });
  it('name valid after value set', () => {
    app.initForm();
    a.testFormControlForRequiredErrorAfterValue('testForm', 'name');
  });
  it('check return type', () => {
    // app.initForm();
    // let user1: User;
    a.checkMethodReturnType('setUser', 'object');
  });
}
ERROR: 13:3   class-name-pascal       let app;
ERROR: 13:7   class-name-pascal       let app
ERROR: 13:7   class-name-pascal       app
ERROR: 15:3   class-name-pascal       {
  let fixture;
  let a;
  let app;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [
        RouterTestingModule,
        ReactiveFormsModule,
        FormsModule
      ],
      declarations: [
        AppComponent
      ]
    }).compileComponents();
    fixture = TestBed.createComponent(AppComponent);
    app = fixture.componentInstance;
    a = new UniTest(app, 'App Component');
  });
  it('should be created1', () => {
    a.testTitleRendering('Angular-Testing-Specs');
  });
  it('formValid', () => {
    app.initForm();
    a.testFormStatus('testForm');
  });
  it('Form Valid After value set', () => {
    app.initForm();
    a.testFormAfterValue('testForm');
  });
  it('name invalid initially', () => {
    app.initForm();
    a.testFormControlForRequiredError('testForm', 'name');
  });
  it('name valid after value set', () => {
    app.initForm();
    a.testFormControlForRequiredErrorAfterValue('testForm', 'name');
  });
  it('check return type', () => {
    // app.initForm();
    // let user1: User;
    a.checkMethodReturnType('setUser', 'object');
  });
}
ERROR: 15:3   class-name-pascal       beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [
        RouterTestingModule,
        ReactiveFormsModule,
        FormsModule
      ],
      declarations: [
        AppComponent
      ]
    }).compileComponents();
    fixture = TestBed.createComponent(AppComponent);
    app = fixture.componentInstance;
    a = new UniTest(app, 'App Component');
  });
ERROR: 15:3   class-name-pascal       beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [
        RouterTestingModule,
        ReactiveFormsModule,
        FormsModule
      ],
      declarations: [
        AppComponent
      ]
    }).compileComponents();
    fixture = TestBed.createComponent(AppComponent);
    app = fixture.componentInstance;
    a = new UniTest(app, 'App Component');
  })
ERROR: 15:14  class-name-pascal       beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [
        RouterTestingModule,
        ReactiveFormsModule,
        FormsModule
      ],
      declarations: [
        AppComponent
      ]
    }).compileComponents();
    fixture = TestBed.createComponent(AppComponent);
    app = fixture.componentInstance;
    a = new UniTest(app, 'App Component');
  })
ERROR: 15:14  class-name-pascal       async () => {
    await TestBed.configureTestingModule({
      imports: [
        RouterTestingModule,
        ReactiveFormsModule,
        FormsModule
      ],
      declarations: [
        AppComponent
      ]
    }).compileComponents();
    fixture = TestBed.createComponent(AppComponent);
    app = fixture.componentInstance;
    a = new UniTest(app, 'App Component');
  }
ERROR: 15:23  class-name-pascal       async () => {
    await TestBed.configureTestingModule({
      imports: [
        RouterTestingModule,
        ReactiveFormsModule,
        FormsModule
      ],
      declarations: [
        AppComponent
      ]
    }).compileComponents();
    fixture = TestBed.createComponent(AppComponent);
    app = fixture.componentInstance;
    a = new UniTest(app, 'App Component');
  }
ERROR: 15:26  class-name-pascal       async () => {
    await TestBed.configureTestingModule({
      imports: [
        RouterTestingModule,
        ReactiveFormsModule,
        FormsModule
      ],
      declarations: [
        AppComponent
      ]
    }).compileComponents();
    fixture = TestBed.createComponent(AppComponent);
    app = fixture.componentInstance;
    a = new UniTest(app, 'App Component');
  }
ERROR: 16:5   class-name-pascal       {
    await TestBed.configureTestingModule({
      imports: [
        RouterTestingModule,
        ReactiveFormsModule,
        FormsModule
      ],
      declarations: [
        AppComponent
      ]
    }).compileComponents();
    fixture = TestBed.createComponent(AppComponent);
    app = fixture.componentInstance;
    a = new UniTest(app, 'App Component');
  }
ERROR: 16:5   class-name-pascal       await TestBed.configureTestingModule({
      imports: [
        RouterTestingModule,
        ReactiveFormsModule,
        FormsModule
      ],
      declarations: [
        AppComponent
      ]
    }).compileComponents();
ERROR: 16:11  class-name-pascal       await TestBed.configureTestingModule({
      imports: [
        RouterTestingModule,
        ReactiveFormsModule,
        FormsModule
      ],
      declarations: [
        AppComponent
      ]
    }).compileComponents()
ERROR: 16:11  class-name-pascal       TestBed.configureTestingModule({
      imports: [
        RouterTestingModule,
        ReactiveFormsModule,
        FormsModule
      ],
      declarations: [
        AppComponent
      ]
    }).compileComponents()
ERROR: 16:11  class-name-pascal       TestBed.configureTestingModule({
      imports: [
        RouterTestingModule,
        ReactiveFormsModule,
        FormsModule
      ],
      declarations: [
        AppComponent
      ]
    }).compileComponents
ERROR: 16:11  class-name-pascal       TestBed.configureTestingModule({
      imports: [
        RouterTestingModule,
        ReactiveFormsModule,
        FormsModule
      ],
      declarations: [
        AppComponent
      ]
    })
ERROR: 16:11  class-name-pascal       TestBed.configureTestingModule
ERROR: 16:19  class-name-pascal       TestBed.configureTestingModule
ERROR: 16:42  class-name-pascal       TestBed.configureTestingModule({
      imports: [
        RouterTestingModule,
        ReactiveFormsModule,
        FormsModule
      ],
      declarations: [
        AppComponent
      ]
    })
ERROR: 17:7   class-name-pascal       {
      imports: [
        RouterTestingModule,
        ReactiveFormsModule,
        FormsModule
      ],
      declarations: [
        AppComponent
      ]
    }
ERROR: 17:7   class-name-pascal       imports: [
        RouterTestingModule,
        ReactiveFormsModule,
        FormsModule
      ]
ERROR: 17:16  class-name-pascal       imports: [
        RouterTestingModule,
        ReactiveFormsModule,
        FormsModule
      ]
ERROR: 18:9   class-name-pascal       [
        RouterTestingModule,
        ReactiveFormsModule,
        FormsModule
      ]
ERROR: 19:9   class-name-pascal       [
        RouterTestingModule,
        ReactiveFormsModule,
        FormsModule
      ]
ERROR: 20:9   class-name-pascal       [
        RouterTestingModule,
        ReactiveFormsModule,
        FormsModule
      ]
ERROR: 22:7   class-name-pascal       {
      imports: [
        RouterTestingModule,
        ReactiveFormsModule,
        FormsModule
      ],
      declarations: [
        AppComponent
      ]
    }
ERROR: 22:7   class-name-pascal       declarations: [
        AppComponent
      ]
ERROR: 22:21  class-name-pascal       declarations: [
        AppComponent
      ]
ERROR: 23:9   class-name-pascal       [
        AppComponent
      ]
ERROR: 25:8   class-name-pascal       TestBed.configureTestingModule({
      imports: [
        RouterTestingModule,
        ReactiveFormsModule,
        FormsModule
      ],
      declarations: [
        AppComponent
      ]
    }).compileComponents
ERROR: 26:5   class-name-pascal       {
    await TestBed.configureTestingModule({
      imports: [
        RouterTestingModule,
        ReactiveFormsModule,
        FormsModule
      ],
      declarations: [
        AppComponent
      ]
    }).compileComponents();
    fixture = TestBed.createComponent(AppComponent);
    app = fixture.componentInstance;
    a = new UniTest(app, 'App Component');
  }
ERROR: 26:5   class-name-pascal       fixture = TestBed.createComponent(AppComponent);
ERROR: 26:5   class-name-pascal       fixture = TestBed.createComponent(AppComponent)
ERROR: 26:13  class-name-pascal       fixture = TestBed.createComponent(AppComponent)
ERROR: 26:15  class-name-pascal       fixture = TestBed.createComponent(AppComponent)
ERROR: 26:15  class-name-pascal       TestBed.createComponent(AppComponent)
ERROR: 26:15  class-name-pascal       TestBed.createComponent
ERROR: 26:23  class-name-pascal       TestBed.createComponent
ERROR: 26:39  class-name-pascal       TestBed.createComponent(AppComponent)
ERROR: 27:5   class-name-pascal       {
    await TestBed.configureTestingModule({
      imports: [
        RouterTestingModule,
        ReactiveFormsModule,
        FormsModule
      ],
      declarations: [
        AppComponent
      ]
    }).compileComponents();
    fixture = TestBed.createComponent(AppComponent);
    app = fixture.componentInstance;
    a = new UniTest(app, 'App Component');
  }
ERROR: 27:5   class-name-pascal       app = fixture.componentInstance;
ERROR: 27:5   class-name-pascal       app = fixture.componentInstance
ERROR: 27:9   class-name-pascal       app = fixture.componentInstance
ERROR: 27:11  class-name-pascal       app = fixture.componentInstance
ERROR: 27:11  class-name-pascal       fixture.componentInstance
ERROR: 27:19  class-name-pascal       fixture.componentInstance
ERROR: 28:5   class-name-pascal       {
    await TestBed.configureTestingModule({
      imports: [
        RouterTestingModule,
        ReactiveFormsModule,
        FormsModule
      ],
      declarations: [
        AppComponent
      ]
    }).compileComponents();
    fixture = TestBed.createComponent(AppComponent);
    app = fixture.componentInstance;
    a = new UniTest(app, 'App Component');
  }
ERROR: 28:5   class-name-pascal       a = new UniTest(app, 'App Component');
ERROR: 28:5   class-name-pascal       a = new UniTest(app, 'App Component')
ERROR: 28:7   class-name-pascal       a = new UniTest(app, 'App Component')
ERROR: 28:9   class-name-pascal       a = new UniTest(app, 'App Component')
ERROR: 28:13  class-name-pascal       new UniTest(app, 'App Component')
ERROR: 28:21  class-name-pascal       new UniTest(app, 'App Component')
ERROR: 28:26  class-name-pascal       new UniTest(app, 'App Component')
ERROR: 30:3   class-name-pascal       {
  let fixture;
  let a;
  let app;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [
        RouterTestingModule,
        ReactiveFormsModule,
        FormsModule
      ],
      declarations: [
        AppComponent
      ]
    }).compileComponents();
    fixture = TestBed.createComponent(AppComponent);
    app = fixture.componentInstance;
    a = new UniTest(app, 'App Component');
  });
  it('should be created1', () => {
    a.testTitleRendering('Angular-Testing-Specs');
  });
  it('formValid', () => {
    app.initForm();
    a.testFormStatus('testForm');
  });
  it('Form Valid After value set', () => {
    app.initForm();
    a.testFormAfterValue('testForm');
  });
  it('name invalid initially', () => {
    app.initForm();
    a.testFormControlForRequiredError('testForm', 'name');
  });
  it('name valid after value set', () => {
    app.initForm();
    a.testFormControlForRequiredErrorAfterValue('testForm', 'name');
  });
  it('check return type', () => {
    // app.initForm();
    // let user1: User;
    a.checkMethodReturnType('setUser', 'object');
  });
}
ERROR: 30:3   class-name-pascal       it('should be created1', () => {
    a.testTitleRendering('Angular-Testing-Specs');
  });
ERROR: 30:3   class-name-pascal       it('should be created1', () => {
    a.testTitleRendering('Angular-Testing-Specs');
  })
ERROR: 30:6   class-name-pascal       it('should be created1', () => {
    a.testTitleRendering('Angular-Testing-Specs');
  })
ERROR: 30:28  class-name-pascal       it('should be created1', () => {
    a.testTitleRendering('Angular-Testing-Specs');
  })
ERROR: 30:31  class-name-pascal       () => {
    a.testTitleRendering('Angular-Testing-Specs');
  }
ERROR: 30:34  class-name-pascal       () => {
    a.testTitleRendering('Angular-Testing-Specs');
  }
ERROR: 31:5   class-name-pascal       {
    a.testTitleRendering('Angular-Testing-Specs');
  }
ERROR: 31:5   class-name-pascal       a.testTitleRendering('Angular-Testing-Specs');
ERROR: 31:5   class-name-pascal       a.testTitleRendering('Angular-Testing-Specs')
ERROR: 31:5   class-name-pascal       a.testTitleRendering
ERROR: 31:7   class-name-pascal       a.testTitleRendering
ERROR: 31:26  class-name-pascal       a.testTitleRendering('Angular-Testing-Specs')
ERROR: 33:3   class-name-pascal       {
  let fixture;
  let a;
  let app;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [
        RouterTestingModule,
        ReactiveFormsModule,
        FormsModule
      ],
      declarations: [
        AppComponent
      ]
    }).compileComponents();
    fixture = TestBed.createComponent(AppComponent);
    app = fixture.componentInstance;
    a = new UniTest(app, 'App Component');
  });
  it('should be created1', () => {
    a.testTitleRendering('Angular-Testing-Specs');
  });
  it('formValid', () => {
    app.initForm();
    a.testFormStatus('testForm');
  });
  it('Form Valid After value set', () => {
    app.initForm();
    a.testFormAfterValue('testForm');
  });
  it('name invalid initially', () => {
    app.initForm();
    a.testFormControlForRequiredError('testForm', 'name');
  });
  it('name valid after value set', () => {
    app.initForm();
    a.testFormControlForRequiredErrorAfterValue('testForm', 'name');
  });
  it('check return type', () => {
    // app.initForm();
    // let user1: User;
    a.checkMethodReturnType('setUser', 'object');
  });
}
ERROR: 33:3   class-name-pascal       it('formValid', () => {
    app.initForm();
    a.testFormStatus('testForm');
  });
ERROR: 33:3   class-name-pascal       it('formValid', () => {
    app.initForm();
    a.testFormStatus('testForm');
  })
ERROR: 33:6   class-name-pascal       it('formValid', () => {
    app.initForm();
    a.testFormStatus('testForm');
  })
ERROR: 33:19  class-name-pascal       it('formValid', () => {
    app.initForm();
    a.testFormStatus('testForm');
  })
ERROR: 33:22  class-name-pascal       () => {
    app.initForm();
    a.testFormStatus('testForm');
  }
ERROR: 33:25  class-name-pascal       () => {
    app.initForm();
    a.testFormStatus('testForm');
  }
ERROR: 34:5   class-name-pascal       {
    app.initForm();
    a.testFormStatus('testForm');
  }
ERROR: 34:5   class-name-pascal       app.initForm();
ERROR: 34:5   class-name-pascal       app.initForm()
ERROR: 34:5   class-name-pascal       app.initForm
ERROR: 34:9   class-name-pascal       app.initForm
ERROR: 35:5   class-name-pascal       {
    app.initForm();
    a.testFormStatus('testForm');
  }
ERROR: 35:5   class-name-pascal       a.testFormStatus('testForm');
ERROR: 35:5   class-name-pascal       a.testFormStatus('testForm')
ERROR: 35:5   class-name-pascal       a.testFormStatus
ERROR: 35:7   class-name-pascal       a.testFormStatus
ERROR: 35:22  class-name-pascal       a.testFormStatus('testForm')
ERROR: 37:3   class-name-pascal       {
  let fixture;
  let a;
  let app;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [
        RouterTestingModule,
        ReactiveFormsModule,
        FormsModule
      ],
      declarations: [
        AppComponent
      ]
    }).compileComponents();
    fixture = TestBed.createComponent(AppComponent);
    app = fixture.componentInstance;
    a = new UniTest(app, 'App Component');
  });
  it('should be created1', () => {
    a.testTitleRendering('Angular-Testing-Specs');
  });
  it('formValid', () => {
    app.initForm();
    a.testFormStatus('testForm');
  });
  it('Form Valid After value set', () => {
    app.initForm();
    a.testFormAfterValue('testForm');
  });
  it('name invalid initially', () => {
    app.initForm();
    a.testFormControlForRequiredError('testForm', 'name');
  });
  it('name valid after value set', () => {
    app.initForm();
    a.testFormControlForRequiredErrorAfterValue('testForm', 'name');
  });
  it('check return type', () => {
    // app.initForm();
    // let user1: User;
    a.checkMethodReturnType('setUser', 'object');
  });
}
ERROR: 37:3   class-name-pascal       it('Form Valid After value set', () => {
    app.initForm();
    a.testFormAfterValue('testForm');
  });
ERROR: 37:3   class-name-pascal       it('Form Valid After value set', () => {
    app.initForm();
    a.testFormAfterValue('testForm');
  })
ERROR: 37:6   class-name-pascal       it('Form Valid After value set', () => {
    app.initForm();
    a.testFormAfterValue('testForm');
  })
ERROR: 37:36  class-name-pascal       it('Form Valid After value set', () => {
    app.initForm();
    a.testFormAfterValue('testForm');
  })
ERROR: 37:39  class-name-pascal       () => {
    app.initForm();
    a.testFormAfterValue('testForm');
  }
ERROR: 37:42  class-name-pascal       () => {
    app.initForm();
    a.testFormAfterValue('testForm');
  }
ERROR: 38:5   class-name-pascal       {
    app.initForm();
    a.testFormAfterValue('testForm');
  }
ERROR: 38:5   class-name-pascal       app.initForm();
ERROR: 38:5   class-name-pascal       app.initForm()
ERROR: 38:5   class-name-pascal       app.initForm
ERROR: 38:9   class-name-pascal       app.initForm
ERROR: 39:5   class-name-pascal       {
    app.initForm();
    a.testFormAfterValue('testForm');
  }
ERROR: 39:5   class-name-pascal       a.testFormAfterValue('testForm');
ERROR: 39:5   class-name-pascal       a.testFormAfterValue('testForm')
ERROR: 39:5   class-name-pascal       a.testFormAfterValue
ERROR: 39:7   class-name-pascal       a.testFormAfterValue
ERROR: 39:26  class-name-pascal       a.testFormAfterValue('testForm')
ERROR: 41:3   class-name-pascal       {
  let fixture;
  let a;
  let app;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [
        RouterTestingModule,
        ReactiveFormsModule,
        FormsModule
      ],
      declarations: [
        AppComponent
      ]
    }).compileComponents();
    fixture = TestBed.createComponent(AppComponent);
    app = fixture.componentInstance;
    a = new UniTest(app, 'App Component');
  });
  it('should be created1', () => {
    a.testTitleRendering('Angular-Testing-Specs');
  });
  it('formValid', () => {
    app.initForm();
    a.testFormStatus('testForm');
  });
  it('Form Valid After value set', () => {
    app.initForm();
    a.testFormAfterValue('testForm');
  });
  it('name invalid initially', () => {
    app.initForm();
    a.testFormControlForRequiredError('testForm', 'name');
  });
  it('name valid after value set', () => {
    app.initForm();
    a.testFormControlForRequiredErrorAfterValue('testForm', 'name');
  });
  it('check return type', () => {
    // app.initForm();
    // let user1: User;
    a.checkMethodReturnType('setUser', 'object');
  });
}
ERROR: 41:3   class-name-pascal       it('name invalid initially', () => {
    app.initForm();
    a.testFormControlForRequiredError('testForm', 'name');
  });
ERROR: 41:3   class-name-pascal       it('name invalid initially', () => {
    app.initForm();
    a.testFormControlForRequiredError('testForm', 'name');
  })
ERROR: 41:6   class-name-pascal       it('name invalid initially', () => {
    app.initForm();
    a.testFormControlForRequiredError('testForm', 'name');
  })
ERROR: 41:32  class-name-pascal       it('name invalid initially', () => {
    app.initForm();
    a.testFormControlForRequiredError('testForm', 'name');
  })
ERROR: 41:35  class-name-pascal       () => {
    app.initForm();
    a.testFormControlForRequiredError('testForm', 'name');
  }
ERROR: 41:38  class-name-pascal       () => {
    app.initForm();
    a.testFormControlForRequiredError('testForm', 'name');
  }
ERROR: 42:5   class-name-pascal       {
    app.initForm();
    a.testFormControlForRequiredError('testForm', 'name');
  }
ERROR: 42:5   class-name-pascal       app.initForm();
ERROR: 42:5   class-name-pascal       app.initForm()
ERROR: 42:5   class-name-pascal       app.initForm
ERROR: 42:9   class-name-pascal       app.initForm
ERROR: 43:5   class-name-pascal       {
    app.initForm();
    a.testFormControlForRequiredError('testForm', 'name');
  }
ERROR: 43:5   class-name-pascal       a.testFormControlForRequiredError('testForm', 'name');
ERROR: 43:5   class-name-pascal       a.testFormControlForRequiredError('testForm', 'name')
ERROR: 43:5   class-name-pascal       a.testFormControlForRequiredError
ERROR: 43:7   class-name-pascal       a.testFormControlForRequiredError
ERROR: 43:39  class-name-pascal       a.testFormControlForRequiredError('testForm', 'name')
ERROR: 43:51  class-name-pascal       a.testFormControlForRequiredError('testForm', 'name')
ERROR: 45:3   class-name-pascal       {
  let fixture;
  let a;
  let app;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [
        RouterTestingModule,
        ReactiveFormsModule,
        FormsModule
      ],
      declarations: [
        AppComponent
      ]
    }).compileComponents();
    fixture = TestBed.createComponent(AppComponent);
    app = fixture.componentInstance;
    a = new UniTest(app, 'App Component');
  });
  it('should be created1', () => {
    a.testTitleRendering('Angular-Testing-Specs');
  });
  it('formValid', () => {
    app.initForm();
    a.testFormStatus('testForm');
  });
  it('Form Valid After value set', () => {
    app.initForm();
    a.testFormAfterValue('testForm');
  });
  it('name invalid initially', () => {
    app.initForm();
    a.testFormControlForRequiredError('testForm', 'name');
  });
  it('name valid after value set', () => {
    app.initForm();
    a.testFormControlForRequiredErrorAfterValue('testForm', 'name');
  });
  it('check return type', () => {
    // app.initForm();
    // let user1: User;
    a.checkMethodReturnType('setUser', 'object');
  });
}
ERROR: 45:3   class-name-pascal       it('name valid after value set', () => {
    app.initForm();
    a.testFormControlForRequiredErrorAfterValue('testForm', 'name');
  });
ERROR: 45:3   class-name-pascal       it('name valid after value set', () => {
    app.initForm();
    a.testFormControlForRequiredErrorAfterValue('testForm', 'name');
  })
ERROR: 45:6   class-name-pascal       it('name valid after value set', () => {
    app.initForm();
    a.testFormControlForRequiredErrorAfterValue('testForm', 'name');
  })
ERROR: 45:36  class-name-pascal       it('name valid after value set', () => {
    app.initForm();
    a.testFormControlForRequiredErrorAfterValue('testForm', 'name');
  })
ERROR: 45:39  class-name-pascal       () => {
    app.initForm();
    a.testFormControlForRequiredErrorAfterValue('testForm', 'name');
  }
ERROR: 45:42  class-name-pascal       () => {
    app.initForm();
    a.testFormControlForRequiredErrorAfterValue('testForm', 'name');
  }
ERROR: 46:5   class-name-pascal       {
    app.initForm();
    a.testFormControlForRequiredErrorAfterValue('testForm', 'name');
  }
ERROR: 46:5   class-name-pascal       app.initForm();
ERROR: 46:5   class-name-pascal       app.initForm()
ERROR: 46:5   class-name-pascal       app.initForm
ERROR: 46:9   class-name-pascal       app.initForm
ERROR: 47:5   class-name-pascal       {
    app.initForm();
    a.testFormControlForRequiredErrorAfterValue('testForm', 'name');
  }
ERROR: 47:5   class-name-pascal       a.testFormControlForRequiredErrorAfterValue('testForm', 'name');
ERROR: 47:5   class-name-pascal       a.testFormControlForRequiredErrorAfterValue('testForm', 'name')
ERROR: 47:5   class-name-pascal       a.testFormControlForRequiredErrorAfterValue
ERROR: 47:7   class-name-pascal       a.testFormControlForRequiredErrorAfterValue
ERROR: 47:49  class-name-pascal       a.testFormControlForRequiredErrorAfterValue('testForm', 'name')
ERROR: 47:61  class-name-pascal       a.testFormControlForRequiredErrorAfterValue('testForm', 'name')
ERROR: 49:3   class-name-pascal       {
  let fixture;
  let a;
  let app;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [
        RouterTestingModule,
        ReactiveFormsModule,
        FormsModule
      ],
      declarations: [
        AppComponent
      ]
    }).compileComponents();
    fixture = TestBed.createComponent(AppComponent);
    app = fixture.componentInstance;
    a = new UniTest(app, 'App Component');
  });
  it('should be created1', () => {
    a.testTitleRendering('Angular-Testing-Specs');
  });
  it('formValid', () => {
    app.initForm();
    a.testFormStatus('testForm');
  });
  it('Form Valid After value set', () => {
    app.initForm();
    a.testFormAfterValue('testForm');
  });
  it('name invalid initially', () => {
    app.initForm();
    a.testFormControlForRequiredError('testForm', 'name');
  });
  it('name valid after value set', () => {
    app.initForm();
    a.testFormControlForRequiredErrorAfterValue('testForm', 'name');
  });
  it('check return type', () => {
    // app.initForm();
    // let user1: User;
    a.checkMethodReturnType('setUser', 'object');
  });
}
ERROR: 49:3   class-name-pascal       it('check return type', () => {
    // app.initForm();
    // let user1: User;
    a.checkMethodReturnType('setUser', 'object');
  });
ERROR: 49:3   class-name-pascal       it('check return type', () => {
    // app.initForm();
    // let user1: User;
    a.checkMethodReturnType('setUser', 'object');
  })
ERROR: 49:6   class-name-pascal       it('check return type', () => {
    // app.initForm();
    // let user1: User;
    a.checkMethodReturnType('setUser', 'object');
  })
ERROR: 49:27  class-name-pascal       it('check return type', () => {
    // app.initForm();
    // let user1: User;
    a.checkMethodReturnType('setUser', 'object');
  })
ERROR: 49:30  class-name-pascal       () => {
    // app.initForm();
    // let user1: User;
    a.checkMethodReturnType('setUser', 'object');
  }
ERROR: 49:33  class-name-pascal       () => {
    // app.initForm();
    // let user1: User;
    a.checkMethodReturnType('setUser', 'object');
  }
ERROR: 52:5   class-name-pascal       {
    // app.initForm();
    // let user1: User;
    a.checkMethodReturnType('setUser', 'object');
  }
ERROR: 52:5   class-name-pascal       a.checkMethodReturnType('setUser', 'object');
ERROR: 52:5   class-name-pascal       a.checkMethodReturnType('setUser', 'object')
ERROR: 52:5   class-name-pascal       a.checkMethodReturnType
ERROR: 52:7   class-name-pascal       a.checkMethodReturnType
ERROR: 52:29  class-name-pascal       a.checkMethodReturnType('setUser', 'object')
ERROR: 52:40  class-name-pascal       a.checkMethodReturnType('setUser', 'object')
ERROR: 55:1   class-name-pascal       import { TestBed } from '@angular/core/testing';
import { FormBuilder, FormsModule, ReactiveFormsModule } from '@angular/forms';
import { RouterTestingModule } from '@angular/router/testing';
import { UnitTestService } from 'src/services/unit-test.service';
import { UniTest } from 'src/testing/UnitTest';
import { AppComponent } from './app.component';
import { User } from './user.model';


describe('AppComponent', () => {
  let fixture;
  let a;
  let app;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [
        RouterTestingModule,
        ReactiveFormsModule,
        FormsModule
      ],
      declarations: [
        AppComponent
      ]
    }).compileComponents();
    fixture = TestBed.createComponent(AppComponent);
    app = fixture.componentInstance;
    a = new UniTest(app, 'App Component');
  });
  it('should be created1', () => {
    a.testTitleRendering('Angular-Testing-Specs');
  });
  it('formValid', () => {
    app.initForm();
    a.testFormStatus('testForm');
  });
  it('Form Valid After value set', () => {
    app.initForm();
    a.testFormAfterValue('testForm');
  });
  it('name invalid initially', () => {
    app.initForm();
    a.testFormControlForRequiredError('testForm', 'name');
  });
  it('name valid after value set', () => {
    app.initForm();
    a.testFormControlForRequiredErrorAfterValue('testForm', 'name');
  });
  it('check return type', () => {
    // app.initForm();
    // let user1: User;
    a.checkMethodReturnType('setUser', 'object');
  });
});


/home/vinay/projects/Angular-Testing-Specs/src/app/app.component.ts:1:1
ERROR: 1:1    class-name-pascal       import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { User } from './user.model';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.scss']
})
export class AppComponent implements OnInit {
  testForm: FormGroup;
  title = 'Angular-Testing-Specs';
  constructor(private fb: FormBuilder) {
  }
  ngOnInit(): void {
    this.initForm();
  }

  initForm(): void {
    this.testForm = this.fb.group({
      name: ['', [Validators.required]],
      email: ['', [Validators.required]]
    });
  }
  setUser(): User {
    const user: User = {
      name: 'vinay',
      email: 'test@gmail.com',
      mob: 9090909090
    };
    return user;
  }
}

export class vinay_verma{
  
}

ERROR: 1:8    class-name-pascal       import { Component, OnInit } from '@angular/core';
ERROR: 1:8    class-name-pascal       { Component, OnInit }
ERROR: 1:10   class-name-pascal       { Component, OnInit }
ERROR: 1:10   class-name-pascal       Component
ERROR: 1:21   class-name-pascal       { Component, OnInit }
ERROR: 1:21   class-name-pascal       OnInit
ERROR: 1:35   class-name-pascal       import { Component, OnInit } from '@angular/core';
ERROR: 2:1    class-name-pascal       import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { User } from './user.model';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.scss']
})
export class AppComponent implements OnInit {
  testForm: FormGroup;
  title = 'Angular-Testing-Specs';
  constructor(private fb: FormBuilder) {
  }
  ngOnInit(): void {
    this.initForm();
  }

  initForm(): void {
    this.testForm = this.fb.group({
      name: ['', [Validators.required]],
      email: ['', [Validators.required]]
    });
  }
  setUser(): User {
    const user: User = {
      name: 'vinay',
      email: 'test@gmail.com',
      mob: 9090909090
    };
    return user;
  }
}

export class vinay_verma{
  
}

ERROR: 2:8    class-name-pascal       import { FormBuilder, FormGroup, Validators } from '@angular/forms';
ERROR: 2:8    class-name-pascal       { FormBuilder, FormGroup, Validators }
ERROR: 2:10   class-name-pascal       { FormBuilder, FormGroup, Validators }
ERROR: 2:10   class-name-pascal       FormBuilder
ERROR: 2:23   class-name-pascal       { FormBuilder, FormGroup, Validators }
ERROR: 2:23   class-name-pascal       FormGroup
ERROR: 2:34   class-name-pascal       { FormBuilder, FormGroup, Validators }
ERROR: 2:34   class-name-pascal       Validators
ERROR: 2:52   class-name-pascal       import { FormBuilder, FormGroup, Validators } from '@angular/forms';
ERROR: 3:1    class-name-pascal       import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { User } from './user.model';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.scss']
})
export class AppComponent implements OnInit {
  testForm: FormGroup;
  title = 'Angular-Testing-Specs';
  constructor(private fb: FormBuilder) {
  }
  ngOnInit(): void {
    this.initForm();
  }

  initForm(): void {
    this.testForm = this.fb.group({
      name: ['', [Validators.required]],
      email: ['', [Validators.required]]
    });
  }
  setUser(): User {
    const user: User = {
      name: 'vinay',
      email: 'test@gmail.com',
      mob: 9090909090
    };
    return user;
  }
}

export class vinay_verma{
  
}

ERROR: 3:8    class-name-pascal       import { User } from './user.model';
ERROR: 3:8    class-name-pascal       { User }
ERROR: 3:10   class-name-pascal       { User }
ERROR: 3:10   class-name-pascal       User
ERROR: 3:22   class-name-pascal       import { User } from './user.model';
ERROR: 5:1    class-name-pascal       import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { User } from './user.model';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.scss']
})
export class AppComponent implements OnInit {
  testForm: FormGroup;
  title = 'Angular-Testing-Specs';
  constructor(private fb: FormBuilder) {
  }
  ngOnInit(): void {
    this.initForm();
  }

  initForm(): void {
    this.testForm = this.fb.group({
      name: ['', [Validators.required]],
      email: ['', [Validators.required]]
    });
  }
  setUser(): User {
    const user: User = {
      name: 'vinay',
      email: 'test@gmail.com',
      mob: 9090909090
    };
    return user;
  }
}

export class vinay_verma{
  
}

ERROR: 5:2    class-name-pascal       @Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.scss']
})
ERROR: 5:2    class-name-pascal       Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.scss']
})
ERROR: 5:12   class-name-pascal       Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.scss']
})
ERROR: 6:3    class-name-pascal       {
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.scss']
}
ERROR: 6:3    class-name-pascal       selector: 'app-root'
ERROR: 6:13   class-name-pascal       selector: 'app-root'
ERROR: 7:3    class-name-pascal       {
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.scss']
}
ERROR: 7:3    class-name-pascal       templateUrl: './app.component.html'
ERROR: 7:16   class-name-pascal       templateUrl: './app.component.html'
ERROR: 8:3    class-name-pascal       {
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.scss']
}
ERROR: 8:3    class-name-pascal       styleUrls: ['./app.component.scss']
ERROR: 8:14   class-name-pascal       styleUrls: ['./app.component.scss']
ERROR: 8:15   class-name-pascal       ['./app.component.scss']
ERROR: 10:1   class-name-pascal       @Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.scss']
})
export class AppComponent implements OnInit {
  testForm: FormGroup;
  title = 'Angular-Testing-Specs';
  constructor(private fb: FormBuilder) {
  }
  ngOnInit(): void {
    this.initForm();
  }

  initForm(): void {
    this.testForm = this.fb.group({
      name: ['', [Validators.required]],
      email: ['', [Validators.required]]
    });
  }
  setUser(): User {
    const user: User = {
      name: 'vinay',
      email: 'test@gmail.com',
      mob: 9090909090
    };
    return user;
  }
}
ERROR: 10:14  class-name-pascal       @Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.scss']
})
export class AppComponent implements OnInit {
  testForm: FormGroup;
  title = 'Angular-Testing-Specs';
  constructor(private fb: FormBuilder) {
  }
  ngOnInit(): void {
    this.initForm();
  }

  initForm(): void {
    this.testForm = this.fb.group({
      name: ['', [Validators.required]],
      email: ['', [Validators.required]]
    });
  }
  setUser(): User {
    const user: User = {
      name: 'vinay',
      email: 'test@gmail.com',
      mob: 9090909090
    };
    return user;
  }
}
ERROR: 10:27  class-name-pascal       @Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.scss']
})
export class AppComponent implements OnInit {
  testForm: FormGroup;
  title = 'Angular-Testing-Specs';
  constructor(private fb: FormBuilder) {
  }
  ngOnInit(): void {
    this.initForm();
  }

  initForm(): void {
    this.testForm = this.fb.group({
      name: ['', [Validators.required]],
      email: ['', [Validators.required]]
    });
  }
  setUser(): User {
    const user: User = {
      name: 'vinay',
      email: 'test@gmail.com',
      mob: 9090909090
    };
    return user;
  }
}
ERROR: 10:38  class-name-pascal       implements OnInit
ERROR: 10:38  class-name-pascal       OnInit
ERROR: 11:3   class-name-pascal       @Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.scss']
})
export class AppComponent implements OnInit {
  testForm: FormGroup;
  title = 'Angular-Testing-Specs';
  constructor(private fb: FormBuilder) {
  }
  ngOnInit(): void {
    this.initForm();
  }

  initForm(): void {
    this.testForm = this.fb.group({
      name: ['', [Validators.required]],
      email: ['', [Validators.required]]
    });
  }
  setUser(): User {
    const user: User = {
      name: 'vinay',
      email: 'test@gmail.com',
      mob: 9090909090
    };
    return user;
  }
}
ERROR: 11:3   class-name-pascal       testForm: FormGroup;
ERROR: 11:13  class-name-pascal       testForm: FormGroup;
ERROR: 11:13  class-name-pascal       FormGroup
ERROR: 12:3   class-name-pascal       @Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.scss']
})
export class AppComponent implements OnInit {
  testForm: FormGroup;
  title = 'Angular-Testing-Specs';
  constructor(private fb: FormBuilder) {
  }
  ngOnInit(): void {
    this.initForm();
  }

  initForm(): void {
    this.testForm = this.fb.group({
      name: ['', [Validators.required]],
      email: ['', [Validators.required]]
    });
  }
  setUser(): User {
    const user: User = {
      name: 'vinay',
      email: 'test@gmail.com',
      mob: 9090909090
    };
    return user;
  }
}
ERROR: 12:3   class-name-pascal       title = 'Angular-Testing-Specs';
ERROR: 12:11  class-name-pascal       title = 'Angular-Testing-Specs';
ERROR: 13:3   class-name-pascal       @Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.scss']
})
export class AppComponent implements OnInit {
  testForm: FormGroup;
  title = 'Angular-Testing-Specs';
  constructor(private fb: FormBuilder) {
  }
  ngOnInit(): void {
    this.initForm();
  }

  initForm(): void {
    this.testForm = this.fb.group({
      name: ['', [Validators.required]],
      email: ['', [Validators.required]]
    });
  }
  setUser(): User {
    const user: User = {
      name: 'vinay',
      email: 'test@gmail.com',
      mob: 9090909090
    };
    return user;
  }
}
ERROR: 13:15  class-name-pascal       constructor(private fb: FormBuilder) {
  }
ERROR: 13:15  class-name-pascal       private fb: FormBuilder
ERROR: 13:23  class-name-pascal       private fb: FormBuilder
ERROR: 13:27  class-name-pascal       private fb: FormBuilder
ERROR: 13:27  class-name-pascal       FormBuilder
ERROR: 13:40  class-name-pascal       constructor(private fb: FormBuilder) {
  }
ERROR: 15:3   class-name-pascal       @Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.scss']
})
export class AppComponent implements OnInit {
  testForm: FormGroup;
  title = 'Angular-Testing-Specs';
  constructor(private fb: FormBuilder) {
  }
  ngOnInit(): void {
    this.initForm();
  }

  initForm(): void {
    this.testForm = this.fb.group({
      name: ['', [Validators.required]],
      email: ['', [Validators.required]]
    });
  }
  setUser(): User {
    const user: User = {
      name: 'vinay',
      email: 'test@gmail.com',
      mob: 9090909090
    };
    return user;
  }
}
ERROR: 15:3   class-name-pascal       ngOnInit(): void {
    this.initForm();
  }
ERROR: 15:15  class-name-pascal       ngOnInit(): void {
    this.initForm();
  }
ERROR: 15:20  class-name-pascal       ngOnInit(): void {
    this.initForm();
  }
ERROR: 16:5   class-name-pascal       {
    this.initForm();
  }
ERROR: 16:5   class-name-pascal       this.initForm();
ERROR: 16:5   class-name-pascal       this.initForm()
ERROR: 16:5   class-name-pascal       this.initForm
ERROR: 16:10  class-name-pascal       this.initForm
ERROR: 19:3   class-name-pascal       @Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.scss']
})
export class AppComponent implements OnInit {
  testForm: FormGroup;
  title = 'Angular-Testing-Specs';
  constructor(private fb: FormBuilder) {
  }
  ngOnInit(): void {
    this.initForm();
  }

  initForm(): void {
    this.testForm = this.fb.group({
      name: ['', [Validators.required]],
      email: ['', [Validators.required]]
    });
  }
  setUser(): User {
    const user: User = {
      name: 'vinay',
      email: 'test@gmail.com',
      mob: 9090909090
    };
    return user;
  }
}
ERROR: 19:3   class-name-pascal       initForm(): void {
    this.testForm = this.fb.group({
      name: ['', [Validators.required]],
      email: ['', [Validators.required]]
    });
  }
ERROR: 19:15  class-name-pascal       initForm(): void {
    this.testForm = this.fb.group({
      name: ['', [Validators.required]],
      email: ['', [Validators.required]]
    });
  }
ERROR: 19:20  class-name-pascal       initForm(): void {
    this.testForm = this.fb.group({
      name: ['', [Validators.required]],
      email: ['', [Validators.required]]
    });
  }
ERROR: 20:5   class-name-pascal       {
    this.testForm = this.fb.group({
      name: ['', [Validators.required]],
      email: ['', [Validators.required]]
    });
  }
ERROR: 20:5   class-name-pascal       this.testForm = this.fb.group({
      name: ['', [Validators.required]],
      email: ['', [Validators.required]]
    });
ERROR: 20:5   class-name-pascal       this.testForm = this.fb.group({
      name: ['', [Validators.required]],
      email: ['', [Validators.required]]
    })
ERROR: 20:5   class-name-pascal       this.testForm
ERROR: 20:10  class-name-pascal       this.testForm
ERROR: 20:19  class-name-pascal       this.testForm = this.fb.group({
      name: ['', [Validators.required]],
      email: ['', [Validators.required]]
    })
ERROR: 20:21  class-name-pascal       this.testForm = this.fb.group({
      name: ['', [Validators.required]],
      email: ['', [Validators.required]]
    })
ERROR: 20:21  class-name-pascal       this.fb.group({
      name: ['', [Validators.required]],
      email: ['', [Validators.required]]
    })
ERROR: 20:21  class-name-pascal       this.fb.group
ERROR: 20:21  class-name-pascal       this.fb
ERROR: 20:26  class-name-pascal       this.fb
ERROR: 20:29  class-name-pascal       this.fb.group
ERROR: 20:35  class-name-pascal       this.fb.group({
      name: ['', [Validators.required]],
      email: ['', [Validators.required]]
    })
ERROR: 21:7   class-name-pascal       {
      name: ['', [Validators.required]],
      email: ['', [Validators.required]]
    }
ERROR: 21:7   class-name-pascal       name: ['', [Validators.required]]
ERROR: 21:13  class-name-pascal       name: ['', [Validators.required]]
ERROR: 21:14  class-name-pascal       ['', [Validators.required]]
ERROR: 21:18  class-name-pascal       ['', [Validators.required]]
ERROR: 21:19  class-name-pascal       [Validators.required]
ERROR: 21:19  class-name-pascal       Validators.required
ERROR: 21:30  class-name-pascal       Validators.required
ERROR: 22:7   class-name-pascal       {
      name: ['', [Validators.required]],
      email: ['', [Validators.required]]
    }
ERROR: 22:7   class-name-pascal       email: ['', [Validators.required]]
ERROR: 22:14  class-name-pascal       email: ['', [Validators.required]]
ERROR: 22:15  class-name-pascal       ['', [Validators.required]]
ERROR: 22:19  class-name-pascal       ['', [Validators.required]]
ERROR: 22:20  class-name-pascal       [Validators.required]
ERROR: 22:20  class-name-pascal       Validators.required
ERROR: 22:31  class-name-pascal       Validators.required
ERROR: 25:3   class-name-pascal       @Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.scss']
})
export class AppComponent implements OnInit {
  testForm: FormGroup;
  title = 'Angular-Testing-Specs';
  constructor(private fb: FormBuilder) {
  }
  ngOnInit(): void {
    this.initForm();
  }

  initForm(): void {
    this.testForm = this.fb.group({
      name: ['', [Validators.required]],
      email: ['', [Validators.required]]
    });
  }
  setUser(): User {
    const user: User = {
      name: 'vinay',
      email: 'test@gmail.com',
      mob: 9090909090
    };
    return user;
  }
}
ERROR: 25:3   class-name-pascal       setUser(): User {
    const user: User = {
      name: 'vinay',
      email: 'test@gmail.com',
      mob: 9090909090
    };
    return user;
  }
ERROR: 25:14  class-name-pascal       setUser(): User {
    const user: User = {
      name: 'vinay',
      email: 'test@gmail.com',
      mob: 9090909090
    };
    return user;
  }
ERROR: 25:14  class-name-pascal       User
ERROR: 25:19  class-name-pascal       setUser(): User {
    const user: User = {
      name: 'vinay',
      email: 'test@gmail.com',
      mob: 9090909090
    };
    return user;
  }
ERROR: 26:5   class-name-pascal       {
    const user: User = {
      name: 'vinay',
      email: 'test@gmail.com',
      mob: 9090909090
    };
    return user;
  }
ERROR: 26:5   class-name-pascal       const user: User = {
      name: 'vinay',
      email: 'test@gmail.com',
      mob: 9090909090
    };
ERROR: 26:11  class-name-pascal       const user: User = {
      name: 'vinay',
      email: 'test@gmail.com',
      mob: 9090909090
    }
ERROR: 26:11  class-name-pascal       user: User = {
      name: 'vinay',
      email: 'test@gmail.com',
      mob: 9090909090
    }
ERROR: 26:17  class-name-pascal       user: User = {
      name: 'vinay',
      email: 'test@gmail.com',
      mob: 9090909090
    }
ERROR: 26:17  class-name-pascal       User
ERROR: 26:24  class-name-pascal       user: User = {
      name: 'vinay',
      email: 'test@gmail.com',
      mob: 9090909090
    }
ERROR: 27:7   class-name-pascal       {
      name: 'vinay',
      email: 'test@gmail.com',
      mob: 9090909090
    }
ERROR: 27:7   class-name-pascal       name: 'vinay'
ERROR: 27:13  class-name-pascal       name: 'vinay'
ERROR: 28:7   class-name-pascal       {
      name: 'vinay',
      email: 'test@gmail.com',
      mob: 9090909090
    }
ERROR: 28:7   class-name-pascal       email: 'test@gmail.com'
ERROR: 28:14  class-name-pascal       email: 'test@gmail.com'
ERROR: 29:7   class-name-pascal       {
      name: 'vinay',
      email: 'test@gmail.com',
      mob: 9090909090
    }
ERROR: 29:7   class-name-pascal       mob: 9090909090
ERROR: 29:12  class-name-pascal       mob: 9090909090
ERROR: 31:5   class-name-pascal       {
    const user: User = {
      name: 'vinay',
      email: 'test@gmail.com',
      mob: 9090909090
    };
    return user;
  }
ERROR: 31:12  class-name-pascal       return user;
ERROR: 35:1   class-name-pascal       import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { User } from './user.model';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.scss']
})
export class AppComponent implements OnInit {
  testForm: FormGroup;
  title = 'Angular-Testing-Specs';
  constructor(private fb: FormBuilder) {
  }
  ngOnInit(): void {
    this.initForm();
  }

  initForm(): void {
    this.testForm = this.fb.group({
      name: ['', [Validators.required]],
      email: ['', [Validators.required]]
    });
  }
  setUser(): User {
    const user: User = {
      name: 'vinay',
      email: 'test@gmail.com',
      mob: 9090909090
    };
    return user;
  }
}

export class vinay_verma{
  
}

ERROR: 35:1   class-name-pascal       export class vinay_verma{
  
}
ERROR: 35:14  class-name              Class name must be in pascal case
ERROR: 35:14  class-name-pascal       export class vinay_verma{
  
}
ERROR: 36:1   no-trailing-whitespace  trailing whitespace
ERROR: 38:1   class-name-pascal       import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { User } from './user.model';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.scss']
})
export class AppComponent implements OnInit {
  testForm: FormGroup;
  title = 'Angular-Testing-Specs';
  constructor(private fb: FormBuilder) {
  }
  ngOnInit(): void {
    this.initForm();
  }

  initForm(): void {
    this.testForm = this.fb.group({
      name: ['', [Validators.required]],
      email: ['', [Validators.required]]
    });
  }
  setUser(): User {
    const user: User = {
      name: 'vinay',
      email: 'test@gmail.com',
      mob: 9090909090
    };
    return user;
  }
}

export class vinay_verma{
  
}


/home/vinay/projects/Angular-Testing-Specs/src/app/app.module.ts:1:1
ERROR: 1:1    class-name-pascal       import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';

import { AppRoutingModule } from './app-routing.module';
import { AppComponent } from './app.component';
import { PipeModule } from './pipe/pipe.module';
import { TestComponent } from './test/test.component';
import { UserComponent } from './user/user.component';
import { DemoComponent } from './demo/demo.component';

@NgModule({
  declarations: [
    AppComponent,
    UserComponent,
    TestComponent,
    DemoComponent
  ],
  imports: [
    BrowserModule,
    AppRoutingModule,
    PipeModule
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule { }

ERROR: 1:8    class-name-pascal       import { BrowserModule } from '@angular/platform-browser';
ERROR: 1:8    class-name-pascal       { BrowserModule }
ERROR: 1:10   class-name-pascal       { BrowserModule }
ERROR: 1:10   class-name-pascal       BrowserModule
ERROR: 1:31   class-name-pascal       import { BrowserModule } from '@angular/platform-browser';
ERROR: 2:1    class-name-pascal       import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';

import { AppRoutingModule } from './app-routing.module';
import { AppComponent } from './app.component';
import { PipeModule } from './pipe/pipe.module';
import { TestComponent } from './test/test.component';
import { UserComponent } from './user/user.component';
import { DemoComponent } from './demo/demo.component';

@NgModule({
  declarations: [
    AppComponent,
    UserComponent,
    TestComponent,
    DemoComponent
  ],
  imports: [
    BrowserModule,
    AppRoutingModule,
    PipeModule
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule { }

ERROR: 2:8    class-name-pascal       import { NgModule } from '@angular/core';
ERROR: 2:8    class-name-pascal       { NgModule }
ERROR: 2:10   class-name-pascal       { NgModule }
ERROR: 2:10   class-name-pascal       NgModule
ERROR: 2:26   class-name-pascal       import { NgModule } from '@angular/core';
ERROR: 4:1    class-name-pascal       import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';

import { AppRoutingModule } from './app-routing.module';
import { AppComponent } from './app.component';
import { PipeModule } from './pipe/pipe.module';
import { TestComponent } from './test/test.component';
import { UserComponent } from './user/user.component';
import { DemoComponent } from './demo/demo.component';

@NgModule({
  declarations: [
    AppComponent,
    UserComponent,
    TestComponent,
    DemoComponent
  ],
  imports: [
    BrowserModule,
    AppRoutingModule,
    PipeModule
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule { }

ERROR: 4:8    class-name-pascal       import { AppRoutingModule } from './app-routing.module';
ERROR: 4:8    class-name-pascal       { AppRoutingModule }
ERROR: 4:10   class-name-pascal       { AppRoutingModule }
ERROR: 4:10   class-name-pascal       AppRoutingModule
ERROR: 4:34   class-name-pascal       import { AppRoutingModule } from './app-routing.module';
ERROR: 5:1    class-name-pascal       import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';

import { AppRoutingModule } from './app-routing.module';
import { AppComponent } from './app.component';
import { PipeModule } from './pipe/pipe.module';
import { TestComponent } from './test/test.component';
import { UserComponent } from './user/user.component';
import { DemoComponent } from './demo/demo.component';

@NgModule({
  declarations: [
    AppComponent,
    UserComponent,
    TestComponent,
    DemoComponent
  ],
  imports: [
    BrowserModule,
    AppRoutingModule,
    PipeModule
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule { }

ERROR: 5:8    class-name-pascal       import { AppComponent } from './app.component';
ERROR: 5:8    class-name-pascal       { AppComponent }
ERROR: 5:10   class-name-pascal       { AppComponent }
ERROR: 5:10   class-name-pascal       AppComponent
ERROR: 5:30   class-name-pascal       import { AppComponent } from './app.component';
ERROR: 6:1    class-name-pascal       import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';

import { AppRoutingModule } from './app-routing.module';
import { AppComponent } from './app.component';
import { PipeModule } from './pipe/pipe.module';
import { TestComponent } from './test/test.component';
import { UserComponent } from './user/user.component';
import { DemoComponent } from './demo/demo.component';

@NgModule({
  declarations: [
    AppComponent,
    UserComponent,
    TestComponent,
    DemoComponent
  ],
  imports: [
    BrowserModule,
    AppRoutingModule,
    PipeModule
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule { }

ERROR: 6:8    class-name-pascal       import { PipeModule } from './pipe/pipe.module';
ERROR: 6:8    class-name-pascal       { PipeModule }
ERROR: 6:10   class-name-pascal       { PipeModule }
ERROR: 6:10   class-name-pascal       PipeModule
ERROR: 6:28   class-name-pascal       import { PipeModule } from './pipe/pipe.module';
ERROR: 7:1    class-name-pascal       import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';

import { AppRoutingModule } from './app-routing.module';
import { AppComponent } from './app.component';
import { PipeModule } from './pipe/pipe.module';
import { TestComponent } from './test/test.component';
import { UserComponent } from './user/user.component';
import { DemoComponent } from './demo/demo.component';

@NgModule({
  declarations: [
    AppComponent,
    UserComponent,
    TestComponent,
    DemoComponent
  ],
  imports: [
    BrowserModule,
    AppRoutingModule,
    PipeModule
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule { }

ERROR: 7:8    class-name-pascal       import { TestComponent } from './test/test.component';
ERROR: 7:8    class-name-pascal       { TestComponent }
ERROR: 7:10   class-name-pascal       { TestComponent }
ERROR: 7:10   class-name-pascal       TestComponent
ERROR: 7:31   class-name-pascal       import { TestComponent } from './test/test.component';
ERROR: 8:1    class-name-pascal       import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';

import { AppRoutingModule } from './app-routing.module';
import { AppComponent } from './app.component';
import { PipeModule } from './pipe/pipe.module';
import { TestComponent } from './test/test.component';
import { UserComponent } from './user/user.component';
import { DemoComponent } from './demo/demo.component';

@NgModule({
  declarations: [
    AppComponent,
    UserComponent,
    TestComponent,
    DemoComponent
  ],
  imports: [
    BrowserModule,
    AppRoutingModule,
    PipeModule
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule { }

ERROR: 8:8    class-name-pascal       import { UserComponent } from './user/user.component';
ERROR: 8:8    class-name-pascal       { UserComponent }
ERROR: 8:10   class-name-pascal       { UserComponent }
ERROR: 8:10   class-name-pascal       UserComponent
ERROR: 8:31   class-name-pascal       import { UserComponent } from './user/user.component';
ERROR: 9:1    class-name-pascal       import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';

import { AppRoutingModule } from './app-routing.module';
import { AppComponent } from './app.component';
import { PipeModule } from './pipe/pipe.module';
import { TestComponent } from './test/test.component';
import { UserComponent } from './user/user.component';
import { DemoComponent } from './demo/demo.component';

@NgModule({
  declarations: [
    AppComponent,
    UserComponent,
    TestComponent,
    DemoComponent
  ],
  imports: [
    BrowserModule,
    AppRoutingModule,
    PipeModule
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule { }

ERROR: 9:8    class-name-pascal       import { DemoComponent } from './demo/demo.component';
ERROR: 9:8    class-name-pascal       { DemoComponent }
ERROR: 9:10   class-name-pascal       { DemoComponent }
ERROR: 9:10   class-name-pascal       DemoComponent
ERROR: 9:31   class-name-pascal       import { DemoComponent } from './demo/demo.component';
ERROR: 11:1   class-name-pascal       import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';

import { AppRoutingModule } from './app-routing.module';
import { AppComponent } from './app.component';
import { PipeModule } from './pipe/pipe.module';
import { TestComponent } from './test/test.component';
import { UserComponent } from './user/user.component';
import { DemoComponent } from './demo/demo.component';

@NgModule({
  declarations: [
    AppComponent,
    UserComponent,
    TestComponent,
    DemoComponent
  ],
  imports: [
    BrowserModule,
    AppRoutingModule,
    PipeModule
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule { }

ERROR: 11:2   class-name-pascal       @NgModule({
  declarations: [
    AppComponent,
    UserComponent,
    TestComponent,
    DemoComponent
  ],
  imports: [
    BrowserModule,
    AppRoutingModule,
    PipeModule
  ],
  providers: [],
  bootstrap: [AppComponent]
})
ERROR: 11:2   class-name-pascal       NgModule({
  declarations: [
    AppComponent,
    UserComponent,
    TestComponent,
    DemoComponent
  ],
  imports: [
    BrowserModule,
    AppRoutingModule,
    PipeModule
  ],
  providers: [],
  bootstrap: [AppComponent]
})
ERROR: 11:11  class-name-pascal       NgModule({
  declarations: [
    AppComponent,
    UserComponent,
    TestComponent,
    DemoComponent
  ],
  imports: [
    BrowserModule,
    AppRoutingModule,
    PipeModule
  ],
  providers: [],
  bootstrap: [AppComponent]
})
ERROR: 12:3   class-name-pascal       {
  declarations: [
    AppComponent,
    UserComponent,
    TestComponent,
    DemoComponent
  ],
  imports: [
    BrowserModule,
    AppRoutingModule,
    PipeModule
  ],
  providers: [],
  bootstrap: [AppComponent]
}
ERROR: 12:3   class-name-pascal       declarations: [
    AppComponent,
    UserComponent,
    TestComponent,
    DemoComponent
  ]
ERROR: 12:17  class-name-pascal       declarations: [
    AppComponent,
    UserComponent,
    TestComponent,
    DemoComponent
  ]
ERROR: 13:5   class-name-pascal       [
    AppComponent,
    UserComponent,
    TestComponent,
    DemoComponent
  ]
ERROR: 14:5   class-name-pascal       [
    AppComponent,
    UserComponent,
    TestComponent,
    DemoComponent
  ]
ERROR: 15:5   class-name-pascal       [
    AppComponent,
    UserComponent,
    TestComponent,
    DemoComponent
  ]
ERROR: 16:5   class-name-pascal       [
    AppComponent,
    UserComponent,
    TestComponent,
    DemoComponent
  ]
ERROR: 18:3   class-name-pascal       {
  declarations: [
    AppComponent,
    UserComponent,
    TestComponent,
    DemoComponent
  ],
  imports: [
    BrowserModule,
    AppRoutingModule,
    PipeModule
  ],
  providers: [],
  bootstrap: [AppComponent]
}
ERROR: 18:3   class-name-pascal       imports: [
    BrowserModule,
    AppRoutingModule,
    PipeModule
  ]
ERROR: 18:12  class-name-pascal       imports: [
    BrowserModule,
    AppRoutingModule,
    PipeModule
  ]
ERROR: 19:5   class-name-pascal       [
    BrowserModule,
    AppRoutingModule,
    PipeModule
  ]
ERROR: 20:5   class-name-pascal       [
    BrowserModule,
    AppRoutingModule,
    PipeModule
  ]
ERROR: 21:5   class-name-pascal       [
    BrowserModule,
    AppRoutingModule,
    PipeModule
  ]
ERROR: 23:3   class-name-pascal       {
  declarations: [
    AppComponent,
    UserComponent,
    TestComponent,
    DemoComponent
  ],
  imports: [
    BrowserModule,
    AppRoutingModule,
    PipeModule
  ],
  providers: [],
  bootstrap: [AppComponent]
}
ERROR: 23:3   class-name-pascal       providers: []
ERROR: 23:14  class-name-pascal       providers: []
ERROR: 24:3   class-name-pascal       {
  declarations: [
    AppComponent,
    UserComponent,
    TestComponent,
    DemoComponent
  ],
  imports: [
    BrowserModule,
    AppRoutingModule,
    PipeModule
  ],
  providers: [],
  bootstrap: [AppComponent]
}
ERROR: 24:3   class-name-pascal       bootstrap: [AppComponent]
ERROR: 24:14  class-name-pascal       bootstrap: [AppComponent]
ERROR: 24:15  class-name-pascal       [AppComponent]
ERROR: 26:1   class-name-pascal       @NgModule({
  declarations: [
    AppComponent,
    UserComponent,
    TestComponent,
    DemoComponent
  ],
  imports: [
    BrowserModule,
    AppRoutingModule,
    PipeModule
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule { }
ERROR: 26:14  class-name-pascal       @NgModule({
  declarations: [
    AppComponent,
    UserComponent,
    TestComponent,
    DemoComponent
  ],
  imports: [
    BrowserModule,
    AppRoutingModule,
    PipeModule
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule { }
ERROR: 27:1   class-name-pascal       import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';

import { AppRoutingModule } from './app-routing.module';
import { AppComponent } from './app.component';
import { PipeModule } from './pipe/pipe.module';
import { TestComponent } from './test/test.component';
import { UserComponent } from './user/user.component';
import { DemoComponent } from './demo/demo.component';

@NgModule({
  declarations: [
    AppComponent,
    UserComponent,
    TestComponent,
    DemoComponent
  ],
  imports: [
    BrowserModule,
    AppRoutingModule,
    PipeModule
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule { }


/home/vinay/projects/Angular-Testing-Specs/src/app/demo/demo.component.ts:1:1
ERROR: 1:1    class-name-pascal       import { Component, OnInit } from '@angular/core';

@Component({
  selector: 'app-demo',
  templateUrl: './demo.component.html',
  styleUrls: ['./demo.component.scss']
})
export class DemoComponent implements OnInit {

  constructor() { }

  ngOnInit(): void {
  }

  hello(): void {
    console.log('hello');
  }

  add(a, b): number {
    return a + b;
  }

}

ERROR: 1:8    class-name-pascal       import { Component, OnInit } from '@angular/core';
ERROR: 1:8    class-name-pascal       { Component, OnInit }
ERROR: 1:10   class-name-pascal       { Component, OnInit }
ERROR: 1:10   class-name-pascal       Component
ERROR: 1:21   class-name-pascal       { Component, OnInit }
ERROR: 1:21   class-name-pascal       OnInit
ERROR: 1:35   class-name-pascal       import { Component, OnInit } from '@angular/core';
ERROR: 3:1    class-name-pascal       import { Component, OnInit } from '@angular/core';

@Component({
  selector: 'app-demo',
  templateUrl: './demo.component.html',
  styleUrls: ['./demo.component.scss']
})
export class DemoComponent implements OnInit {

  constructor() { }

  ngOnInit(): void {
  }

  hello(): void {
    console.log('hello');
  }

  add(a, b): number {
    return a + b;
  }

}

ERROR: 3:2    class-name-pascal       @Component({
  selector: 'app-demo',
  templateUrl: './demo.component.html',
  styleUrls: ['./demo.component.scss']
})
ERROR: 3:2    class-name-pascal       Component({
  selector: 'app-demo',
  templateUrl: './demo.component.html',
  styleUrls: ['./demo.component.scss']
})
ERROR: 3:12   class-name-pascal       Component({
  selector: 'app-demo',
  templateUrl: './demo.component.html',
  styleUrls: ['./demo.component.scss']
})
ERROR: 4:3    class-name-pascal       {
  selector: 'app-demo',
  templateUrl: './demo.component.html',
  styleUrls: ['./demo.component.scss']
}
ERROR: 4:3    class-name-pascal       selector: 'app-demo'
ERROR: 4:13   class-name-pascal       selector: 'app-demo'
ERROR: 5:3    class-name-pascal       {
  selector: 'app-demo',
  templateUrl: './demo.component.html',
  styleUrls: ['./demo.component.scss']
}
ERROR: 5:3    class-name-pascal       templateUrl: './demo.component.html'
ERROR: 5:16   class-name-pascal       templateUrl: './demo.component.html'
ERROR: 6:3    class-name-pascal       {
  selector: 'app-demo',
  templateUrl: './demo.component.html',
  styleUrls: ['./demo.component.scss']
}
ERROR: 6:3    class-name-pascal       styleUrls: ['./demo.component.scss']
ERROR: 6:14   class-name-pascal       styleUrls: ['./demo.component.scss']
ERROR: 6:15   class-name-pascal       ['./demo.component.scss']
ERROR: 8:1    class-name-pascal       @Component({
  selector: 'app-demo',
  templateUrl: './demo.component.html',
  styleUrls: ['./demo.component.scss']
})
export class DemoComponent implements OnInit {

  constructor() { }

  ngOnInit(): void {
  }

  hello(): void {
    console.log('hello');
  }

  add(a, b): number {
    return a + b;
  }

}
ERROR: 8:14   class-name-pascal       @Component({
  selector: 'app-demo',
  templateUrl: './demo.component.html',
  styleUrls: ['./demo.component.scss']
})
export class DemoComponent implements OnInit {

  constructor() { }

  ngOnInit(): void {
  }

  hello(): void {
    console.log('hello');
  }

  add(a, b): number {
    return a + b;
  }

}
ERROR: 8:28   class-name-pascal       @Component({
  selector: 'app-demo',
  templateUrl: './demo.component.html',
  styleUrls: ['./demo.component.scss']
})
export class DemoComponent implements OnInit {

  constructor() { }

  ngOnInit(): void {
  }

  hello(): void {
    console.log('hello');
  }

  add(a, b): number {
    return a + b;
  }

}
ERROR: 8:39   class-name-pascal       implements OnInit
ERROR: 8:39   class-name-pascal       OnInit
ERROR: 10:3   class-name-pascal       @Component({
  selector: 'app-demo',
  templateUrl: './demo.component.html',
  styleUrls: ['./demo.component.scss']
})
export class DemoComponent implements OnInit {

  constructor() { }

  ngOnInit(): void {
  }

  hello(): void {
    console.log('hello');
  }

  add(a, b): number {
    return a + b;
  }

}
ERROR: 10:17  class-name-pascal       constructor() { }
ERROR: 12:3   class-name-pascal       @Component({
  selector: 'app-demo',
  templateUrl: './demo.component.html',
  styleUrls: ['./demo.component.scss']
})
export class DemoComponent implements OnInit {

  constructor() { }

  ngOnInit(): void {
  }

  hello(): void {
    console.log('hello');
  }

  add(a, b): number {
    return a + b;
  }

}
ERROR: 12:3   class-name-pascal       ngOnInit(): void {
  }
ERROR: 12:15  class-name-pascal       ngOnInit(): void {
  }
ERROR: 12:20  class-name-pascal       ngOnInit(): void {
  }
ERROR: 15:3   class-name-pascal       @Component({
  selector: 'app-demo',
  templateUrl: './demo.component.html',
  styleUrls: ['./demo.component.scss']
})
export class DemoComponent implements OnInit {

  constructor() { }

  ngOnInit(): void {
  }

  hello(): void {
    console.log('hello');
  }

  add(a, b): number {
    return a + b;
  }

}
ERROR: 15:3   class-name-pascal       hello(): void {
    console.log('hello');
  }
ERROR: 15:12  class-name-pascal       hello(): void {
    console.log('hello');
  }
ERROR: 15:17  class-name-pascal       hello(): void {
    console.log('hello');
  }
ERROR: 16:5   class-name-pascal       {
    console.log('hello');
  }
ERROR: 16:5   class-name-pascal       console.log('hello');
ERROR: 16:5   class-name-pascal       console.log('hello')
ERROR: 16:5   class-name-pascal       console.log
ERROR: 16:13  class-name-pascal       console.log
ERROR: 16:17  class-name-pascal       console.log('hello')
ERROR: 19:3   class-name-pascal       @Component({
  selector: 'app-demo',
  templateUrl: './demo.component.html',
  styleUrls: ['./demo.component.scss']
})
export class DemoComponent implements OnInit {

  constructor() { }

  ngOnInit(): void {
  }

  hello(): void {
    console.log('hello');
  }

  add(a, b): number {
    return a + b;
  }

}
ERROR: 19:3   class-name-pascal       add(a, b): number {
    return a + b;
  }
ERROR: 19:7   class-name-pascal       add(a, b): number {
    return a + b;
  }
ERROR: 19:7   class-name-pascal       a
ERROR: 19:10  class-name-pascal       add(a, b): number {
    return a + b;
  }
ERROR: 19:10  class-name-pascal       b
ERROR: 19:14  class-name-pascal       add(a, b): number {
    return a + b;
  }
ERROR: 19:21  class-name-pascal       add(a, b): number {
    return a + b;
  }
ERROR: 20:5   class-name-pascal       {
    return a + b;
  }
ERROR: 20:12  class-name-pascal       return a + b;
ERROR: 20:12  class-name-pascal       a + b
ERROR: 20:14  class-name-pascal       a + b
ERROR: 20:16  class-name-pascal       a + b
ERROR: 24:1   class-name-pascal       import { Component, OnInit } from '@angular/core';

@Component({
  selector: 'app-demo',
  templateUrl: './demo.component.html',
  styleUrls: ['./demo.component.scss']
})
export class DemoComponent implements OnInit {

  constructor() { }

  ngOnInit(): void {
  }

  hello(): void {
    console.log('hello');
  }

  add(a, b): number {
    return a + b;
  }

}


/home/vinay/projects/Angular-Testing-Specs/src/app/pipe/pipe.module.ts:1:1
ERROR: 1:1    class-name-pascal       import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';

import { TitleCasePipe } from './title-case.pipe';

@NgModule({
  imports: [ CommonModule ],
  exports: [
    CommonModule,
    FormsModule,
    TitleCasePipe,
  ],
  declarations: [ TitleCasePipe ]
})
export class PipeModule { }
ERROR: 1:8    class-name-pascal       import { NgModule } from '@angular/core';
ERROR: 1:8    class-name-pascal       { NgModule }
ERROR: 1:10   class-name-pascal       { NgModule }
ERROR: 1:10   class-name-pascal       NgModule
ERROR: 1:26   class-name-pascal       import { NgModule } from '@angular/core';
ERROR: 2:1    class-name-pascal       import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';

import { TitleCasePipe } from './title-case.pipe';

@NgModule({
  imports: [ CommonModule ],
  exports: [
    CommonModule,
    FormsModule,
    TitleCasePipe,
  ],
  declarations: [ TitleCasePipe ]
})
export class PipeModule { }
ERROR: 2:8    class-name-pascal       import { CommonModule } from '@angular/common';
ERROR: 2:8    class-name-pascal       { CommonModule }
ERROR: 2:10   class-name-pascal       { CommonModule }
ERROR: 2:10   class-name-pascal       CommonModule
ERROR: 2:30   class-name-pascal       import { CommonModule } from '@angular/common';
ERROR: 3:1    class-name-pascal       import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';

import { TitleCasePipe } from './title-case.pipe';

@NgModule({
  imports: [ CommonModule ],
  exports: [
    CommonModule,
    FormsModule,
    TitleCasePipe,
  ],
  declarations: [ TitleCasePipe ]
})
export class PipeModule { }
ERROR: 3:8    class-name-pascal       import { FormsModule } from '@angular/forms';
ERROR: 3:8    class-name-pascal       { FormsModule }
ERROR: 3:10   class-name-pascal       { FormsModule }
ERROR: 3:10   class-name-pascal       FormsModule
ERROR: 3:29   class-name-pascal       import { FormsModule } from '@angular/forms';
ERROR: 5:1    class-name-pascal       import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';

import { TitleCasePipe } from './title-case.pipe';

@NgModule({
  imports: [ CommonModule ],
  exports: [
    CommonModule,
    FormsModule,
    TitleCasePipe,
  ],
  declarations: [ TitleCasePipe ]
})
export class PipeModule { }
ERROR: 5:8    class-name-pascal       import { TitleCasePipe } from './title-case.pipe';
ERROR: 5:8    class-name-pascal       { TitleCasePipe }
ERROR: 5:10   class-name-pascal       { TitleCasePipe }
ERROR: 5:10   class-name-pascal       TitleCasePipe
ERROR: 5:31   class-name-pascal       import { TitleCasePipe } from './title-case.pipe';
ERROR: 7:1    class-name-pascal       import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';

import { TitleCasePipe } from './title-case.pipe';

@NgModule({
  imports: [ CommonModule ],
  exports: [
    CommonModule,
    FormsModule,
    TitleCasePipe,
  ],
  declarations: [ TitleCasePipe ]
})
export class PipeModule { }
ERROR: 7:2    class-name-pascal       @NgModule({
  imports: [ CommonModule ],
  exports: [
    CommonModule,
    FormsModule,
    TitleCasePipe,
  ],
  declarations: [ TitleCasePipe ]
})
ERROR: 7:2    class-name-pascal       NgModule({
  imports: [ CommonModule ],
  exports: [
    CommonModule,
    FormsModule,
    TitleCasePipe,
  ],
  declarations: [ TitleCasePipe ]
})
ERROR: 7:11   class-name-pascal       NgModule({
  imports: [ CommonModule ],
  exports: [
    CommonModule,
    FormsModule,
    TitleCasePipe,
  ],
  declarations: [ TitleCasePipe ]
})
ERROR: 8:3    class-name-pascal       {
  imports: [ CommonModule ],
  exports: [
    CommonModule,
    FormsModule,
    TitleCasePipe,
  ],
  declarations: [ TitleCasePipe ]
}
ERROR: 8:3    class-name-pascal       imports: [ CommonModule ]
ERROR: 8:12   class-name-pascal       imports: [ CommonModule ]
ERROR: 8:14   class-name-pascal       [ CommonModule ]
ERROR: 9:3    class-name-pascal       {
  imports: [ CommonModule ],
  exports: [
    CommonModule,
    FormsModule,
    TitleCasePipe,
  ],
  declarations: [ TitleCasePipe ]
}
ERROR: 9:3    class-name-pascal       exports: [
    CommonModule,
    FormsModule,
    TitleCasePipe,
  ]
ERROR: 9:12   class-name-pascal       exports: [
    CommonModule,
    FormsModule,
    TitleCasePipe,
  ]
ERROR: 10:5   class-name-pascal       [
    CommonModule,
    FormsModule,
    TitleCasePipe,
  ]
ERROR: 11:5   class-name-pascal       [
    CommonModule,
    FormsModule,
    TitleCasePipe,
  ]
ERROR: 12:5   class-name-pascal       [
    CommonModule,
    FormsModule,
    TitleCasePipe,
  ]
ERROR: 14:3   class-name-pascal       {
  imports: [ CommonModule ],
  exports: [
    CommonModule,
    FormsModule,
    TitleCasePipe,
  ],
  declarations: [ TitleCasePipe ]
}
ERROR: 14:3   class-name-pascal       declarations: [ TitleCasePipe ]
ERROR: 14:17  class-name-pascal       declarations: [ TitleCasePipe ]
ERROR: 14:19  class-name-pascal       [ TitleCasePipe ]
ERROR: 16:1   class-name-pascal       @NgModule({
  imports: [ CommonModule ],
  exports: [
    CommonModule,
    FormsModule,
    TitleCasePipe,
  ],
  declarations: [ TitleCasePipe ]
})
export class PipeModule { }
ERROR: 16:14  class-name-pascal       @NgModule({
  imports: [ CommonModule ],
  exports: [
    CommonModule,
    FormsModule,
    TitleCasePipe,
  ],
  declarations: [ TitleCasePipe ]
})
export class PipeModule { }
ERROR: 16:28  class-name-pascal       import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';

import { TitleCasePipe } from './title-case.pipe';

@NgModule({
  imports: [ CommonModule ],
  exports: [
    CommonModule,
    FormsModule,
    TitleCasePipe,
  ],
  declarations: [ TitleCasePipe ]
})
export class PipeModule { }
ERROR: 16:28  eofline                 file should end with a newline

/home/vinay/projects/Angular-Testing-Specs/src/app/pipe/title-case.pipe.spec.ts:1:1
ERROR: 1:1    class-name-pascal       import { TitleCasePipe } from './title-case.pipe';

describe('TitleCasePipe', () => {
  
  const pipe = new TitleCasePipe();

  it('transforms "anish" to "Anish"', () => {
    expect(pipe.transform('anish')).toBe('Anish');
  });

  it('transforms "anish def" to "Anish Def"', () => {
    expect(pipe.transform('anish def')).toBe('Anish Def');
  });

  it('leaves "Anish Def" unchanged', () => {
    expect(pipe.transform('Anish Def')).toBe('Anish Def');
  });

  it('transforms "anish-def" to "Anish-def"', () => {
    expect(pipe.transform('anish-def')).toBe('Anish-def');
  });

  it('transforms "   anish   def" to "   Anish   Def" (preserves spaces) ', () => {
    expect(pipe.transform('   anish   def')).toBe('   Anish   Def');
  });
});
ERROR: 1:8    class-name-pascal       import { TitleCasePipe } from './title-case.pipe';
ERROR: 1:8    class-name-pascal       { TitleCasePipe }
ERROR: 1:10   class-name-pascal       { TitleCasePipe }
ERROR: 1:10   class-name-pascal       TitleCasePipe
ERROR: 1:31   class-name-pascal       import { TitleCasePipe } from './title-case.pipe';
ERROR: 3:1    class-name-pascal       import { TitleCasePipe } from './title-case.pipe';

describe('TitleCasePipe', () => {
  
  const pipe = new TitleCasePipe();

  it('transforms "anish" to "Anish"', () => {
    expect(pipe.transform('anish')).toBe('Anish');
  });

  it('transforms "anish def" to "Anish Def"', () => {
    expect(pipe.transform('anish def')).toBe('Anish Def');
  });

  it('leaves "Anish Def" unchanged', () => {
    expect(pipe.transform('Anish Def')).toBe('Anish Def');
  });

  it('transforms "anish-def" to "Anish-def"', () => {
    expect(pipe.transform('anish-def')).toBe('Anish-def');
  });

  it('transforms "   anish   def" to "   Anish   Def" (preserves spaces) ', () => {
    expect(pipe.transform('   anish   def')).toBe('   Anish   Def');
  });
});
ERROR: 3:1    class-name-pascal       describe('TitleCasePipe', () => {
  
  const pipe = new TitleCasePipe();

  it('transforms "anish" to "Anish"', () => {
    expect(pipe.transform('anish')).toBe('Anish');
  });

  it('transforms "anish def" to "Anish Def"', () => {
    expect(pipe.transform('anish def')).toBe('Anish Def');
  });

  it('leaves "Anish Def" unchanged', () => {
    expect(pipe.transform('Anish Def')).toBe('Anish Def');
  });

  it('transforms "anish-def" to "Anish-def"', () => {
    expect(pipe.transform('anish-def')).toBe('Anish-def');
  });

  it('transforms "   anish   def" to "   Anish   Def" (preserves spaces) ', () => {
    expect(pipe.transform('   anish   def')).toBe('   Anish   Def');
  });
});
ERROR: 3:1    class-name-pascal       describe('TitleCasePipe', () => {
  
  const pipe = new TitleCasePipe();

  it('transforms "anish" to "Anish"', () => {
    expect(pipe.transform('anish')).toBe('Anish');
  });

  it('transforms "anish def" to "Anish Def"', () => {
    expect(pipe.transform('anish def')).toBe('Anish Def');
  });

  it('leaves "Anish Def" unchanged', () => {
    expect(pipe.transform('Anish Def')).toBe('Anish Def');
  });

  it('transforms "anish-def" to "Anish-def"', () => {
    expect(pipe.transform('anish-def')).toBe('Anish-def');
  });

  it('transforms "   anish   def" to "   Anish   Def" (preserves spaces) ', () => {
    expect(pipe.transform('   anish   def')).toBe('   Anish   Def');
  });
})
ERROR: 3:10   class-name-pascal       describe('TitleCasePipe', () => {
  
  const pipe = new TitleCasePipe();

  it('transforms "anish" to "Anish"', () => {
    expect(pipe.transform('anish')).toBe('Anish');
  });

  it('transforms "anish def" to "Anish Def"', () => {
    expect(pipe.transform('anish def')).toBe('Anish Def');
  });

  it('leaves "Anish Def" unchanged', () => {
    expect(pipe.transform('Anish Def')).toBe('Anish Def');
  });

  it('transforms "anish-def" to "Anish-def"', () => {
    expect(pipe.transform('anish-def')).toBe('Anish-def');
  });

  it('transforms "   anish   def" to "   Anish   Def" (preserves spaces) ', () => {
    expect(pipe.transform('   anish   def')).toBe('   Anish   Def');
  });
})
ERROR: 3:27   class-name-pascal       describe('TitleCasePipe', () => {
  
  const pipe = new TitleCasePipe();

  it('transforms "anish" to "Anish"', () => {
    expect(pipe.transform('anish')).toBe('Anish');
  });

  it('transforms "anish def" to "Anish Def"', () => {
    expect(pipe.transform('anish def')).toBe('Anish Def');
  });

  it('leaves "Anish Def" unchanged', () => {
    expect(pipe.transform('Anish Def')).toBe('Anish Def');
  });

  it('transforms "anish-def" to "Anish-def"', () => {
    expect(pipe.transform('anish-def')).toBe('Anish-def');
  });

  it('transforms "   anish   def" to "   Anish   Def" (preserves spaces) ', () => {
    expect(pipe.transform('   anish   def')).toBe('   Anish   Def');
  });
})
ERROR: 3:30   class-name-pascal       () => {
  
  const pipe = new TitleCasePipe();

  it('transforms "anish" to "Anish"', () => {
    expect(pipe.transform('anish')).toBe('Anish');
  });

  it('transforms "anish def" to "Anish Def"', () => {
    expect(pipe.transform('anish def')).toBe('Anish Def');
  });

  it('leaves "Anish Def" unchanged', () => {
    expect(pipe.transform('Anish Def')).toBe('Anish Def');
  });

  it('transforms "anish-def" to "Anish-def"', () => {
    expect(pipe.transform('anish-def')).toBe('Anish-def');
  });

  it('transforms "   anish   def" to "   Anish   Def" (preserves spaces) ', () => {
    expect(pipe.transform('   anish   def')).toBe('   Anish   Def');
  });
}
ERROR: 3:33   class-name-pascal       () => {
  
  const pipe = new TitleCasePipe();

  it('transforms "anish" to "Anish"', () => {
    expect(pipe.transform('anish')).toBe('Anish');
  });

  it('transforms "anish def" to "Anish Def"', () => {
    expect(pipe.transform('anish def')).toBe('Anish Def');
  });

  it('leaves "Anish Def" unchanged', () => {
    expect(pipe.transform('Anish Def')).toBe('Anish Def');
  });

  it('transforms "anish-def" to "Anish-def"', () => {
    expect(pipe.transform('anish-def')).toBe('Anish-def');
  });

  it('transforms "   anish   def" to "   Anish   Def" (preserves spaces) ', () => {
    expect(pipe.transform('   anish   def')).toBe('   Anish   Def');
  });
}
ERROR: 4:1    no-trailing-whitespace  trailing whitespace
ERROR: 5:3    class-name-pascal       {
  
  const pipe = new TitleCasePipe();

  it('transforms "anish" to "Anish"', () => {
    expect(pipe.transform('anish')).toBe('Anish');
  });

  it('transforms "anish def" to "Anish Def"', () => {
    expect(pipe.transform('anish def')).toBe('Anish Def');
  });

  it('leaves "Anish Def" unchanged', () => {
    expect(pipe.transform('Anish Def')).toBe('Anish Def');
  });

  it('transforms "anish-def" to "Anish-def"', () => {
    expect(pipe.transform('anish-def')).toBe('Anish-def');
  });

  it('transforms "   anish   def" to "   Anish   Def" (preserves spaces) ', () => {
    expect(pipe.transform('   anish   def')).toBe('   Anish   Def');
  });
}
ERROR: 5:3    class-name-pascal       const pipe = new TitleCasePipe();
ERROR: 5:9    class-name-pascal       const pipe = new TitleCasePipe()
ERROR: 5:9    class-name-pascal       pipe = new TitleCasePipe()
ERROR: 5:16   class-name-pascal       pipe = new TitleCasePipe()
ERROR: 5:20   class-name-pascal       new TitleCasePipe()
ERROR: 7:3    class-name-pascal       {
  
  const pipe = new TitleCasePipe();

  it('transforms "anish" to "Anish"', () => {
    expect(pipe.transform('anish')).toBe('Anish');
  });

  it('transforms "anish def" to "Anish Def"', () => {
    expect(pipe.transform('anish def')).toBe('Anish Def');
  });

  it('leaves "Anish Def" unchanged', () => {
    expect(pipe.transform('Anish Def')).toBe('Anish Def');
  });

  it('transforms "anish-def" to "Anish-def"', () => {
    expect(pipe.transform('anish-def')).toBe('Anish-def');
  });

  it('transforms "   anish   def" to "   Anish   Def" (preserves spaces) ', () => {
    expect(pipe.transform('   anish   def')).toBe('   Anish   Def');
  });
}
ERROR: 7:3    class-name-pascal       it('transforms "anish" to "Anish"', () => {
    expect(pipe.transform('anish')).toBe('Anish');
  });
ERROR: 7:3    class-name-pascal       it('transforms "anish" to "Anish"', () => {
    expect(pipe.transform('anish')).toBe('Anish');
  })
ERROR: 7:6    class-name-pascal       it('transforms "anish" to "Anish"', () => {
    expect(pipe.transform('anish')).toBe('Anish');
  })
ERROR: 7:39   class-name-pascal       it('transforms "anish" to "Anish"', () => {
    expect(pipe.transform('anish')).toBe('Anish');
  })
ERROR: 7:42   class-name-pascal       () => {
    expect(pipe.transform('anish')).toBe('Anish');
  }
ERROR: 7:45   class-name-pascal       () => {
    expect(pipe.transform('anish')).toBe('Anish');
  }
ERROR: 8:5    class-name-pascal       {
    expect(pipe.transform('anish')).toBe('Anish');
  }
ERROR: 8:5    class-name-pascal       expect(pipe.transform('anish')).toBe('Anish');
ERROR: 8:5    class-name-pascal       expect(pipe.transform('anish')).toBe('Anish')
ERROR: 8:5    class-name-pascal       expect(pipe.transform('anish')).toBe
ERROR: 8:5    class-name-pascal       expect(pipe.transform('anish'))
ERROR: 8:12   class-name-pascal       expect(pipe.transform('anish'))
ERROR: 8:12   class-name-pascal       pipe.transform('anish')
ERROR: 8:12   class-name-pascal       pipe.transform
ERROR: 8:17   class-name-pascal       pipe.transform
ERROR: 8:27   class-name-pascal       pipe.transform('anish')
ERROR: 8:37   class-name-pascal       expect(pipe.transform('anish')).toBe
ERROR: 8:42   class-name-pascal       expect(pipe.transform('anish')).toBe('Anish')
ERROR: 11:3   class-name-pascal       {
  
  const pipe = new TitleCasePipe();

  it('transforms "anish" to "Anish"', () => {
    expect(pipe.transform('anish')).toBe('Anish');
  });

  it('transforms "anish def" to "Anish Def"', () => {
    expect(pipe.transform('anish def')).toBe('Anish Def');
  });

  it('leaves "Anish Def" unchanged', () => {
    expect(pipe.transform('Anish Def')).toBe('Anish Def');
  });

  it('transforms "anish-def" to "Anish-def"', () => {
    expect(pipe.transform('anish-def')).toBe('Anish-def');
  });

  it('transforms "   anish   def" to "   Anish   Def" (preserves spaces) ', () => {
    expect(pipe.transform('   anish   def')).toBe('   Anish   Def');
  });
}
ERROR: 11:3   class-name-pascal       it('transforms "anish def" to "Anish Def"', () => {
    expect(pipe.transform('anish def')).toBe('Anish Def');
  });
ERROR: 11:3   class-name-pascal       it('transforms "anish def" to "Anish Def"', () => {
    expect(pipe.transform('anish def')).toBe('Anish Def');
  })
ERROR: 11:6   class-name-pascal       it('transforms "anish def" to "Anish Def"', () => {
    expect(pipe.transform('anish def')).toBe('Anish Def');
  })
ERROR: 11:47  class-name-pascal       it('transforms "anish def" to "Anish Def"', () => {
    expect(pipe.transform('anish def')).toBe('Anish Def');
  })
ERROR: 11:50  class-name-pascal       () => {
    expect(pipe.transform('anish def')).toBe('Anish Def');
  }
ERROR: 11:53  class-name-pascal       () => {
    expect(pipe.transform('anish def')).toBe('Anish Def');
  }
ERROR: 12:5   class-name-pascal       {
    expect(pipe.transform('anish def')).toBe('Anish Def');
  }
ERROR: 12:5   class-name-pascal       expect(pipe.transform('anish def')).toBe('Anish Def');
ERROR: 12:5   class-name-pascal       expect(pipe.transform('anish def')).toBe('Anish Def')
ERROR: 12:5   class-name-pascal       expect(pipe.transform('anish def')).toBe
ERROR: 12:5   class-name-pascal       expect(pipe.transform('anish def'))
ERROR: 12:12  class-name-pascal       expect(pipe.transform('anish def'))
ERROR: 12:12  class-name-pascal       pipe.transform('anish def')
ERROR: 12:12  class-name-pascal       pipe.transform
ERROR: 12:17  class-name-pascal       pipe.transform
ERROR: 12:27  class-name-pascal       pipe.transform('anish def')
ERROR: 12:41  class-name-pascal       expect(pipe.transform('anish def')).toBe
ERROR: 12:46  class-name-pascal       expect(pipe.transform('anish def')).toBe('Anish Def')
ERROR: 15:3   class-name-pascal       {
  
  const pipe = new TitleCasePipe();

  it('transforms "anish" to "Anish"', () => {
    expect(pipe.transform('anish')).toBe('Anish');
  });

  it('transforms "anish def" to "Anish Def"', () => {
    expect(pipe.transform('anish def')).toBe('Anish Def');
  });

  it('leaves "Anish Def" unchanged', () => {
    expect(pipe.transform('Anish Def')).toBe('Anish Def');
  });

  it('transforms "anish-def" to "Anish-def"', () => {
    expect(pipe.transform('anish-def')).toBe('Anish-def');
  });

  it('transforms "   anish   def" to "   Anish   Def" (preserves spaces) ', () => {
    expect(pipe.transform('   anish   def')).toBe('   Anish   Def');
  });
}
ERROR: 15:3   class-name-pascal       it('leaves "Anish Def" unchanged', () => {
    expect(pipe.transform('Anish Def')).toBe('Anish Def');
  });
ERROR: 15:3   class-name-pascal       it('leaves "Anish Def" unchanged', () => {
    expect(pipe.transform('Anish Def')).toBe('Anish Def');
  })
ERROR: 15:6   class-name-pascal       it('leaves "Anish Def" unchanged', () => {
    expect(pipe.transform('Anish Def')).toBe('Anish Def');
  })
ERROR: 15:38  class-name-pascal       it('leaves "Anish Def" unchanged', () => {
    expect(pipe.transform('Anish Def')).toBe('Anish Def');
  })
ERROR: 15:41  class-name-pascal       () => {
    expect(pipe.transform('Anish Def')).toBe('Anish Def');
  }
ERROR: 15:44  class-name-pascal       () => {
    expect(pipe.transform('Anish Def')).toBe('Anish Def');
  }
ERROR: 16:5   class-name-pascal       {
    expect(pipe.transform('Anish Def')).toBe('Anish Def');
  }
ERROR: 16:5   class-name-pascal       expect(pipe.transform('Anish Def')).toBe('Anish Def');
ERROR: 16:5   class-name-pascal       expect(pipe.transform('Anish Def')).toBe('Anish Def')
ERROR: 16:5   class-name-pascal       expect(pipe.transform('Anish Def')).toBe
ERROR: 16:5   class-name-pascal       expect(pipe.transform('Anish Def'))
ERROR: 16:12  class-name-pascal       expect(pipe.transform('Anish Def'))
ERROR: 16:12  class-name-pascal       pipe.transform('Anish Def')
ERROR: 16:12  class-name-pascal       pipe.transform
ERROR: 16:17  class-name-pascal       pipe.transform
ERROR: 16:27  class-name-pascal       pipe.transform('Anish Def')
ERROR: 16:41  class-name-pascal       expect(pipe.transform('Anish Def')).toBe
ERROR: 16:46  class-name-pascal       expect(pipe.transform('Anish Def')).toBe('Anish Def')
ERROR: 19:3   class-name-pascal       {
  
  const pipe = new TitleCasePipe();

  it('transforms "anish" to "Anish"', () => {
    expect(pipe.transform('anish')).toBe('Anish');
  });

  it('transforms "anish def" to "Anish Def"', () => {
    expect(pipe.transform('anish def')).toBe('Anish Def');
  });

  it('leaves "Anish Def" unchanged', () => {
    expect(pipe.transform('Anish Def')).toBe('Anish Def');
  });

  it('transforms "anish-def" to "Anish-def"', () => {
    expect(pipe.transform('anish-def')).toBe('Anish-def');
  });

  it('transforms "   anish   def" to "   Anish   Def" (preserves spaces) ', () => {
    expect(pipe.transform('   anish   def')).toBe('   Anish   Def');
  });
}
ERROR: 19:3   class-name-pascal       it('transforms "anish-def" to "Anish-def"', () => {
    expect(pipe.transform('anish-def')).toBe('Anish-def');
  });
ERROR: 19:3   class-name-pascal       it('transforms "anish-def" to "Anish-def"', () => {
    expect(pipe.transform('anish-def')).toBe('Anish-def');
  })
ERROR: 19:6   class-name-pascal       it('transforms "anish-def" to "Anish-def"', () => {
    expect(pipe.transform('anish-def')).toBe('Anish-def');
  })
ERROR: 19:47  class-name-pascal       it('transforms "anish-def" to "Anish-def"', () => {
    expect(pipe.transform('anish-def')).toBe('Anish-def');
  })
ERROR: 19:50  class-name-pascal       () => {
    expect(pipe.transform('anish-def')).toBe('Anish-def');
  }
ERROR: 19:53  class-name-pascal       () => {
    expect(pipe.transform('anish-def')).toBe('Anish-def');
  }
ERROR: 20:5   class-name-pascal       {
    expect(pipe.transform('anish-def')).toBe('Anish-def');
  }
ERROR: 20:5   class-name-pascal       expect(pipe.transform('anish-def')).toBe('Anish-def');
ERROR: 20:5   class-name-pascal       expect(pipe.transform('anish-def')).toBe('Anish-def')
ERROR: 20:5   class-name-pascal       expect(pipe.transform('anish-def')).toBe
ERROR: 20:5   class-name-pascal       expect(pipe.transform('anish-def'))
ERROR: 20:12  class-name-pascal       expect(pipe.transform('anish-def'))
ERROR: 20:12  class-name-pascal       pipe.transform('anish-def')
ERROR: 20:12  class-name-pascal       pipe.transform
ERROR: 20:17  class-name-pascal       pipe.transform
ERROR: 20:27  class-name-pascal       pipe.transform('anish-def')
ERROR: 20:41  class-name-pascal       expect(pipe.transform('anish-def')).toBe
ERROR: 20:46  class-name-pascal       expect(pipe.transform('anish-def')).toBe('Anish-def')
ERROR: 23:3   class-name-pascal       {
  
  const pipe = new TitleCasePipe();

  it('transforms "anish" to "Anish"', () => {
    expect(pipe.transform('anish')).toBe('Anish');
  });

  it('transforms "anish def" to "Anish Def"', () => {
    expect(pipe.transform('anish def')).toBe('Anish Def');
  });

  it('leaves "Anish Def" unchanged', () => {
    expect(pipe.transform('Anish Def')).toBe('Anish Def');
  });

  it('transforms "anish-def" to "Anish-def"', () => {
    expect(pipe.transform('anish-def')).toBe('Anish-def');
  });

  it('transforms "   anish   def" to "   Anish   Def" (preserves spaces) ', () => {
    expect(pipe.transform('   anish   def')).toBe('   Anish   Def');
  });
}
ERROR: 23:3   class-name-pascal       it('transforms "   anish   def" to "   Anish   Def" (preserves spaces) ', () => {
    expect(pipe.transform('   anish   def')).toBe('   Anish   Def');
  });
ERROR: 23:3   class-name-pascal       it('transforms "   anish   def" to "   Anish   Def" (preserves spaces) ', () => {
    expect(pipe.transform('   anish   def')).toBe('   Anish   Def');
  })
ERROR: 23:6   class-name-pascal       it('transforms "   anish   def" to "   Anish   Def" (preserves spaces) ', () => {
    expect(pipe.transform('   anish   def')).toBe('   Anish   Def');
  })
ERROR: 23:77  class-name-pascal       it('transforms "   anish   def" to "   Anish   Def" (preserves spaces) ', () => {
    expect(pipe.transform('   anish   def')).toBe('   Anish   Def');
  })
ERROR: 23:80  class-name-pascal       () => {
    expect(pipe.transform('   anish   def')).toBe('   Anish   Def');
  }
ERROR: 23:83  class-name-pascal       () => {
    expect(pipe.transform('   anish   def')).toBe('   Anish   Def');
  }
ERROR: 24:5   class-name-pascal       {
    expect(pipe.transform('   anish   def')).toBe('   Anish   Def');
  }
ERROR: 24:5   class-name-pascal       expect(pipe.transform('   anish   def')).toBe('   Anish   Def');
ERROR: 24:5   class-name-pascal       expect(pipe.transform('   anish   def')).toBe('   Anish   Def')
ERROR: 24:5   class-name-pascal       expect(pipe.transform('   anish   def')).toBe
ERROR: 24:5   class-name-pascal       expect(pipe.transform('   anish   def'))
ERROR: 24:12  class-name-pascal       expect(pipe.transform('   anish   def'))
ERROR: 24:12  class-name-pascal       pipe.transform('   anish   def')
ERROR: 24:12  class-name-pascal       pipe.transform
ERROR: 24:17  class-name-pascal       pipe.transform
ERROR: 24:27  class-name-pascal       pipe.transform('   anish   def')
ERROR: 24:46  class-name-pascal       expect(pipe.transform('   anish   def')).toBe
ERROR: 24:51  class-name-pascal       expect(pipe.transform('   anish   def')).toBe('   Anish   Def')
ERROR: 26:4   class-name-pascal       import { TitleCasePipe } from './title-case.pipe';

describe('TitleCasePipe', () => {
  
  const pipe = new TitleCasePipe();

  it('transforms "anish" to "Anish"', () => {
    expect(pipe.transform('anish')).toBe('Anish');
  });

  it('transforms "anish def" to "Anish Def"', () => {
    expect(pipe.transform('anish def')).toBe('Anish Def');
  });

  it('leaves "Anish Def" unchanged', () => {
    expect(pipe.transform('Anish Def')).toBe('Anish Def');
  });

  it('transforms "anish-def" to "Anish-def"', () => {
    expect(pipe.transform('anish-def')).toBe('Anish-def');
  });

  it('transforms "   anish   def" to "   Anish   Def" (preserves spaces) ', () => {
    expect(pipe.transform('   anish   def')).toBe('   Anish   Def');
  });
});
ERROR: 26:4   eofline                 file should end with a newline

/home/vinay/projects/Angular-Testing-Specs/src/app/pipe/title-case.pipe.ts:1:1
ERROR: 1:1    class-name-pascal       import { Pipe, PipeTransform } from '@angular/core';

@Pipe({name: 'titlecase', pure: true})
/** Transform to Title Case: uppercase the first letter of the words in a string. */
export class TitleCasePipe implements PipeTransform {
  transform(input: string): string {
    return input.length === 0 ? '' :
      input.replace(/\w\S*/g, (txt => txt[0].toUpperCase() + txt.substr(1).toLowerCase() ));
  }
}
ERROR: 1:8    class-name-pascal       import { Pipe, PipeTransform } from '@angular/core';
ERROR: 1:8    class-name-pascal       { Pipe, PipeTransform }
ERROR: 1:10   class-name-pascal       { Pipe, PipeTransform }
ERROR: 1:10   class-name-pascal       Pipe
ERROR: 1:16   class-name-pascal       { Pipe, PipeTransform }
ERROR: 1:16   class-name-pascal       PipeTransform
ERROR: 1:37   class-name-pascal       import { Pipe, PipeTransform } from '@angular/core';
ERROR: 3:1    class-name-pascal       import { Pipe, PipeTransform } from '@angular/core';

@Pipe({name: 'titlecase', pure: true})
/** Transform to Title Case: uppercase the first letter of the words in a string. */
export class TitleCasePipe implements PipeTransform {
  transform(input: string): string {
    return input.length === 0 ? '' :
      input.replace(/\w\S*/g, (txt => txt[0].toUpperCase() + txt.substr(1).toLowerCase() ));
  }
}
ERROR: 3:2    class-name-pascal       @Pipe({name: 'titlecase', pure: true})
ERROR: 3:2    class-name-pascal       Pipe({name: 'titlecase', pure: true})
ERROR: 3:7    class-name-pascal       Pipe({name: 'titlecase', pure: true})
ERROR: 3:8    class-name-pascal       {name: 'titlecase', pure: true}
ERROR: 3:8    class-name-pascal       name: 'titlecase'
ERROR: 3:14   class-name-pascal       name: 'titlecase'
ERROR: 3:27   class-name-pascal       {name: 'titlecase', pure: true}
ERROR: 3:27   class-name-pascal       pure: true
ERROR: 3:33   class-name-pascal       pure: true
ERROR: 5:1    class-name-pascal       @Pipe({name: 'titlecase', pure: true})
/** Transform to Title Case: uppercase the first letter of the words in a string. */
export class TitleCasePipe implements PipeTransform {
  transform(input: string): string {
    return input.length === 0 ? '' :
      input.replace(/\w\S*/g, (txt => txt[0].toUpperCase() + txt.substr(1).toLowerCase() ));
  }
}
ERROR: 5:14   class-name-pascal       @Pipe({name: 'titlecase', pure: true})
/** Transform to Title Case: uppercase the first letter of the words in a string. */
export class TitleCasePipe implements PipeTransform {
  transform(input: string): string {
    return input.length === 0 ? '' :
      input.replace(/\w\S*/g, (txt => txt[0].toUpperCase() + txt.substr(1).toLowerCase() ));
  }
}
ERROR: 5:28   class-name-pascal       @Pipe({name: 'titlecase', pure: true})
/** Transform to Title Case: uppercase the first letter of the words in a string. */
export class TitleCasePipe implements PipeTransform {
  transform(input: string): string {
    return input.length === 0 ? '' :
      input.replace(/\w\S*/g, (txt => txt[0].toUpperCase() + txt.substr(1).toLowerCase() ));
  }
}
ERROR: 5:39   class-name-pascal       implements PipeTransform
ERROR: 5:39   class-name-pascal       PipeTransform
ERROR: 6:3    class-name-pascal       @Pipe({name: 'titlecase', pure: true})
/** Transform to Title Case: uppercase the first letter of the words in a string. */
export class TitleCasePipe implements PipeTransform {
  transform(input: string): string {
    return input.length === 0 ? '' :
      input.replace(/\w\S*/g, (txt => txt[0].toUpperCase() + txt.substr(1).toLowerCase() ));
  }
}
ERROR: 6:3    class-name-pascal       transform(input: string): string {
    return input.length === 0 ? '' :
      input.replace(/\w\S*/g, (txt => txt[0].toUpperCase() + txt.substr(1).toLowerCase() ));
  }
ERROR: 6:13   class-name-pascal       transform(input: string): string {
    return input.length === 0 ? '' :
      input.replace(/\w\S*/g, (txt => txt[0].toUpperCase() + txt.substr(1).toLowerCase() ));
  }
ERROR: 6:13   class-name-pascal       input: string
ERROR: 6:20   class-name-pascal       input: string
ERROR: 6:29   class-name-pascal       transform(input: string): string {
    return input.length === 0 ? '' :
      input.replace(/\w\S*/g, (txt => txt[0].toUpperCase() + txt.substr(1).toLowerCase() ));
  }
ERROR: 6:36   class-name-pascal       transform(input: string): string {
    return input.length === 0 ? '' :
      input.replace(/\w\S*/g, (txt => txt[0].toUpperCase() + txt.substr(1).toLowerCase() ));
  }
ERROR: 7:5    class-name-pascal       {
    return input.length === 0 ? '' :
      input.replace(/\w\S*/g, (txt => txt[0].toUpperCase() + txt.substr(1).toLowerCase() ));
  }
ERROR: 7:12   class-name-pascal       return input.length === 0 ? '' :
      input.replace(/\w\S*/g, (txt => txt[0].toUpperCase() + txt.substr(1).toLowerCase() ));
ERROR: 7:12   class-name-pascal       input.length === 0 ? '' :
      input.replace(/\w\S*/g, (txt => txt[0].toUpperCase() + txt.substr(1).toLowerCase() ))
ERROR: 7:12   class-name-pascal       input.length === 0
ERROR: 7:12   class-name-pascal       input.length
ERROR: 7:18   class-name-pascal       input.length
ERROR: 7:25   class-name-pascal       input.length === 0
ERROR: 7:29   class-name-pascal       input.length === 0
ERROR: 7:31   class-name-pascal       input.length === 0 ? '' :
      input.replace(/\w\S*/g, (txt => txt[0].toUpperCase() + txt.substr(1).toLowerCase() ))
ERROR: 7:33   class-name-pascal       input.length === 0 ? '' :
      input.replace(/\w\S*/g, (txt => txt[0].toUpperCase() + txt.substr(1).toLowerCase() ))
ERROR: 7:36   class-name-pascal       input.length === 0 ? '' :
      input.replace(/\w\S*/g, (txt => txt[0].toUpperCase() + txt.substr(1).toLowerCase() ))
ERROR: 8:7    class-name-pascal       input.length === 0 ? '' :
      input.replace(/\w\S*/g, (txt => txt[0].toUpperCase() + txt.substr(1).toLowerCase() ))
ERROR: 8:7    class-name-pascal       input.replace(/\w\S*/g, (txt => txt[0].toUpperCase() + txt.substr(1).toLowerCase() ))
ERROR: 8:7    class-name-pascal       input.replace
ERROR: 8:13   class-name-pascal       input.replace
ERROR: 8:21   class-name-pascal       input.replace(/\w\S*/g, (txt => txt[0].toUpperCase() + txt.substr(1).toLowerCase() ))
ERROR: 8:31   class-name-pascal       input.replace(/\w\S*/g, (txt => txt[0].toUpperCase() + txt.substr(1).toLowerCase() ))
ERROR: 8:32   class-name-pascal       (txt => txt[0].toUpperCase() + txt.substr(1).toLowerCase() )
ERROR: 8:32   class-name-pascal       txt => txt[0].toUpperCase() + txt.substr(1).toLowerCase()
ERROR: 8:32   class-name-pascal       txt
ERROR: 8:36   class-name-pascal       txt => txt[0].toUpperCase() + txt.substr(1).toLowerCase()
ERROR: 8:39   class-name-pascal       txt => txt[0].toUpperCase() + txt.substr(1).toLowerCase()
ERROR: 8:39   class-name-pascal       txt[0].toUpperCase() + txt.substr(1).toLowerCase()
ERROR: 8:39   class-name-pascal       txt[0].toUpperCase()
ERROR: 8:39   class-name-pascal       txt[0].toUpperCase
ERROR: 8:39   class-name-pascal       txt[0]
ERROR: 8:43   class-name-pascal       txt[0]
ERROR: 8:46   class-name-pascal       txt[0].toUpperCase
ERROR: 8:60   class-name-pascal       txt[0].toUpperCase() + txt.substr(1).toLowerCase()
ERROR: 8:62   class-name-pascal       txt[0].toUpperCase() + txt.substr(1).toLowerCase()
ERROR: 8:62   class-name-pascal       txt.substr(1).toLowerCase()
ERROR: 8:62   class-name-pascal       txt.substr(1).toLowerCase
ERROR: 8:62   class-name-pascal       txt.substr(1)
ERROR: 8:62   class-name-pascal       txt.substr
ERROR: 8:66   class-name-pascal       txt.substr
ERROR: 8:73   class-name-pascal       txt.substr(1)
ERROR: 8:76   class-name-pascal       txt.substr(1).toLowerCase
ERROR: 10:2   class-name-pascal       import { Pipe, PipeTransform } from '@angular/core';

@Pipe({name: 'titlecase', pure: true})
/** Transform to Title Case: uppercase the first letter of the words in a string. */
export class TitleCasePipe implements PipeTransform {
  transform(input: string): string {
    return input.length === 0 ? '' :
      input.replace(/\w\S*/g, (txt => txt[0].toUpperCase() + txt.substr(1).toLowerCase() ));
  }
}
ERROR: 10:2   eofline                 file should end with a newline

/home/vinay/projects/Angular-Testing-Specs/src/app/test/test.component.spec.ts:1:1
ERROR: 1:1    class-name-pascal       import { ComponentFixture, TestBed } from '@angular/core/testing';
import { UniTest } from 'src/testing/UnitTest';

import { TestComponent } from './test.component';

describe('TestComponent', () => {
  let component: TestComponent;
  let fixture: ComponentFixture<TestComponent>;
  let testClass;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [ TestComponent ]
    })
    .compileComponents();
  });

  beforeEach(() => {
    fixture = TestBed.createComponent(TestComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
    testClass = new UniTest(component, 'Test');
  });
  it('title check', () => {
    testClass.testTitleRendering('Test component');
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});

ERROR: 1:8    class-name-pascal       import { ComponentFixture, TestBed } from '@angular/core/testing';
ERROR: 1:8    class-name-pascal       { ComponentFixture, TestBed }
ERROR: 1:10   class-name-pascal       { ComponentFixture, TestBed }
ERROR: 1:10   class-name-pascal       ComponentFixture
ERROR: 1:28   class-name-pascal       { ComponentFixture, TestBed }
ERROR: 1:28   class-name-pascal       TestBed
ERROR: 1:43   class-name-pascal       import { ComponentFixture, TestBed } from '@angular/core/testing';
ERROR: 2:1    class-name-pascal       import { ComponentFixture, TestBed } from '@angular/core/testing';
import { UniTest } from 'src/testing/UnitTest';

import { TestComponent } from './test.component';

describe('TestComponent', () => {
  let component: TestComponent;
  let fixture: ComponentFixture<TestComponent>;
  let testClass;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [ TestComponent ]
    })
    .compileComponents();
  });

  beforeEach(() => {
    fixture = TestBed.createComponent(TestComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
    testClass = new UniTest(component, 'Test');
  });
  it('title check', () => {
    testClass.testTitleRendering('Test component');
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});

ERROR: 2:8    class-name-pascal       import { UniTest } from 'src/testing/UnitTest';
ERROR: 2:8    class-name-pascal       { UniTest }
ERROR: 2:10   class-name-pascal       { UniTest }
ERROR: 2:10   class-name-pascal       UniTest
ERROR: 2:25   class-name-pascal       import { UniTest } from 'src/testing/UnitTest';
ERROR: 4:1    class-name-pascal       import { ComponentFixture, TestBed } from '@angular/core/testing';
import { UniTest } from 'src/testing/UnitTest';

import { TestComponent } from './test.component';

describe('TestComponent', () => {
  let component: TestComponent;
  let fixture: ComponentFixture<TestComponent>;
  let testClass;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [ TestComponent ]
    })
    .compileComponents();
  });

  beforeEach(() => {
    fixture = TestBed.createComponent(TestComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
    testClass = new UniTest(component, 'Test');
  });
  it('title check', () => {
    testClass.testTitleRendering('Test component');
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});

ERROR: 4:8    class-name-pascal       import { TestComponent } from './test.component';
ERROR: 4:8    class-name-pascal       { TestComponent }
ERROR: 4:10   class-name-pascal       { TestComponent }
ERROR: 4:10   class-name-pascal       TestComponent
ERROR: 4:31   class-name-pascal       import { TestComponent } from './test.component';
ERROR: 6:1    class-name-pascal       import { ComponentFixture, TestBed } from '@angular/core/testing';
import { UniTest } from 'src/testing/UnitTest';

import { TestComponent } from './test.component';

describe('TestComponent', () => {
  let component: TestComponent;
  let fixture: ComponentFixture<TestComponent>;
  let testClass;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [ TestComponent ]
    })
    .compileComponents();
  });

  beforeEach(() => {
    fixture = TestBed.createComponent(TestComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
    testClass = new UniTest(component, 'Test');
  });
  it('title check', () => {
    testClass.testTitleRendering('Test component');
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});

ERROR: 6:1    class-name-pascal       describe('TestComponent', () => {
  let component: TestComponent;
  let fixture: ComponentFixture<TestComponent>;
  let testClass;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [ TestComponent ]
    })
    .compileComponents();
  });

  beforeEach(() => {
    fixture = TestBed.createComponent(TestComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
    testClass = new UniTest(component, 'Test');
  });
  it('title check', () => {
    testClass.testTitleRendering('Test component');
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
ERROR: 6:1    class-name-pascal       describe('TestComponent', () => {
  let component: TestComponent;
  let fixture: ComponentFixture<TestComponent>;
  let testClass;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [ TestComponent ]
    })
    .compileComponents();
  });

  beforeEach(() => {
    fixture = TestBed.createComponent(TestComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
    testClass = new UniTest(component, 'Test');
  });
  it('title check', () => {
    testClass.testTitleRendering('Test component');
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
})
ERROR: 6:10   class-name-pascal       describe('TestComponent', () => {
  let component: TestComponent;
  let fixture: ComponentFixture<TestComponent>;
  let testClass;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [ TestComponent ]
    })
    .compileComponents();
  });

  beforeEach(() => {
    fixture = TestBed.createComponent(TestComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
    testClass = new UniTest(component, 'Test');
  });
  it('title check', () => {
    testClass.testTitleRendering('Test component');
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
})
ERROR: 6:27   class-name-pascal       describe('TestComponent', () => {
  let component: TestComponent;
  let fixture: ComponentFixture<TestComponent>;
  let testClass;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [ TestComponent ]
    })
    .compileComponents();
  });

  beforeEach(() => {
    fixture = TestBed.createComponent(TestComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
    testClass = new UniTest(component, 'Test');
  });
  it('title check', () => {
    testClass.testTitleRendering('Test component');
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
})
ERROR: 6:30   class-name-pascal       () => {
  let component: TestComponent;
  let fixture: ComponentFixture<TestComponent>;
  let testClass;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [ TestComponent ]
    })
    .compileComponents();
  });

  beforeEach(() => {
    fixture = TestBed.createComponent(TestComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
    testClass = new UniTest(component, 'Test');
  });
  it('title check', () => {
    testClass.testTitleRendering('Test component');
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
}
ERROR: 6:33   class-name-pascal       () => {
  let component: TestComponent;
  let fixture: ComponentFixture<TestComponent>;
  let testClass;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [ TestComponent ]
    })
    .compileComponents();
  });

  beforeEach(() => {
    fixture = TestBed.createComponent(TestComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
    testClass = new UniTest(component, 'Test');
  });
  it('title check', () => {
    testClass.testTitleRendering('Test component');
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
}
ERROR: 7:3    class-name-pascal       {
  let component: TestComponent;
  let fixture: ComponentFixture<TestComponent>;
  let testClass;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [ TestComponent ]
    })
    .compileComponents();
  });

  beforeEach(() => {
    fixture = TestBed.createComponent(TestComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
    testClass = new UniTest(component, 'Test');
  });
  it('title check', () => {
    testClass.testTitleRendering('Test component');
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
}
ERROR: 7:3    class-name-pascal       let component: TestComponent;
ERROR: 7:7    class-name-pascal       let component: TestComponent
ERROR: 7:7    class-name-pascal       component: TestComponent
ERROR: 7:18   class-name-pascal       component: TestComponent
ERROR: 7:18   class-name-pascal       TestComponent
ERROR: 8:3    class-name-pascal       {
  let component: TestComponent;
  let fixture: ComponentFixture<TestComponent>;
  let testClass;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [ TestComponent ]
    })
    .compileComponents();
  });

  beforeEach(() => {
    fixture = TestBed.createComponent(TestComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
    testClass = new UniTest(component, 'Test');
  });
  it('title check', () => {
    testClass.testTitleRendering('Test component');
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
}
ERROR: 8:3    class-name-pascal       let fixture: ComponentFixture<TestComponent>;
ERROR: 8:7    class-name-pascal       let fixture: ComponentFixture<TestComponent>
ERROR: 8:7    class-name-pascal       fixture: ComponentFixture<TestComponent>
ERROR: 8:16   class-name-pascal       fixture: ComponentFixture<TestComponent>
ERROR: 8:16   class-name-pascal       ComponentFixture<TestComponent>
ERROR: 8:33   class-name-pascal       ComponentFixture<TestComponent>
ERROR: 8:33   class-name-pascal       TestComponent
ERROR: 9:3    class-name-pascal       {
  let component: TestComponent;
  let fixture: ComponentFixture<TestComponent>;
  let testClass;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [ TestComponent ]
    })
    .compileComponents();
  });

  beforeEach(() => {
    fixture = TestBed.createComponent(TestComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
    testClass = new UniTest(component, 'Test');
  });
  it('title check', () => {
    testClass.testTitleRendering('Test component');
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
}
ERROR: 9:3    class-name-pascal       let testClass;
ERROR: 9:7    class-name-pascal       let testClass
ERROR: 9:7    class-name-pascal       testClass
ERROR: 11:3   class-name-pascal       {
  let component: TestComponent;
  let fixture: ComponentFixture<TestComponent>;
  let testClass;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [ TestComponent ]
    })
    .compileComponents();
  });

  beforeEach(() => {
    fixture = TestBed.createComponent(TestComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
    testClass = new UniTest(component, 'Test');
  });
  it('title check', () => {
    testClass.testTitleRendering('Test component');
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
}
ERROR: 11:3   class-name-pascal       beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [ TestComponent ]
    })
    .compileComponents();
  });
ERROR: 11:3   class-name-pascal       beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [ TestComponent ]
    })
    .compileComponents();
  })
ERROR: 11:14  class-name-pascal       beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [ TestComponent ]
    })
    .compileComponents();
  })
ERROR: 11:14  class-name-pascal       async () => {
    await TestBed.configureTestingModule({
      declarations: [ TestComponent ]
    })
    .compileComponents();
  }
ERROR: 11:23  class-name-pascal       async () => {
    await TestBed.configureTestingModule({
      declarations: [ TestComponent ]
    })
    .compileComponents();
  }
ERROR: 11:26  class-name-pascal       async () => {
    await TestBed.configureTestingModule({
      declarations: [ TestComponent ]
    })
    .compileComponents();
  }
ERROR: 12:5   class-name-pascal       {
    await TestBed.configureTestingModule({
      declarations: [ TestComponent ]
    })
    .compileComponents();
  }
ERROR: 12:5   class-name-pascal       await TestBed.configureTestingModule({
      declarations: [ TestComponent ]
    })
    .compileComponents();
ERROR: 12:11  class-name-pascal       await TestBed.configureTestingModule({
      declarations: [ TestComponent ]
    })
    .compileComponents()
ERROR: 12:11  class-name-pascal       TestBed.configureTestingModule({
      declarations: [ TestComponent ]
    })
    .compileComponents()
ERROR: 12:11  class-name-pascal       TestBed.configureTestingModule({
      declarations: [ TestComponent ]
    })
    .compileComponents
ERROR: 12:11  class-name-pascal       TestBed.configureTestingModule({
      declarations: [ TestComponent ]
    })
ERROR: 12:11  class-name-pascal       TestBed.configureTestingModule
ERROR: 12:19  class-name-pascal       TestBed.configureTestingModule
ERROR: 12:42  class-name-pascal       TestBed.configureTestingModule({
      declarations: [ TestComponent ]
    })
ERROR: 13:7   class-name-pascal       {
      declarations: [ TestComponent ]
    }
ERROR: 13:7   class-name-pascal       declarations: [ TestComponent ]
ERROR: 13:21  class-name-pascal       declarations: [ TestComponent ]
ERROR: 13:23  class-name-pascal       [ TestComponent ]
ERROR: 15:6   class-name-pascal       TestBed.configureTestingModule({
      declarations: [ TestComponent ]
    })
    .compileComponents
ERROR: 18:3   class-name-pascal       {
  let component: TestComponent;
  let fixture: ComponentFixture<TestComponent>;
  let testClass;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [ TestComponent ]
    })
    .compileComponents();
  });

  beforeEach(() => {
    fixture = TestBed.createComponent(TestComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
    testClass = new UniTest(component, 'Test');
  });
  it('title check', () => {
    testClass.testTitleRendering('Test component');
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
}
ERROR: 18:3   class-name-pascal       beforeEach(() => {
    fixture = TestBed.createComponent(TestComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
    testClass = new UniTest(component, 'Test');
  });
ERROR: 18:3   class-name-pascal       beforeEach(() => {
    fixture = TestBed.createComponent(TestComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
    testClass = new UniTest(component, 'Test');
  })
ERROR: 18:14  class-name-pascal       beforeEach(() => {
    fixture = TestBed.createComponent(TestComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
    testClass = new UniTest(component, 'Test');
  })
ERROR: 18:17  class-name-pascal       () => {
    fixture = TestBed.createComponent(TestComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
    testClass = new UniTest(component, 'Test');
  }
ERROR: 18:20  class-name-pascal       () => {
    fixture = TestBed.createComponent(TestComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
    testClass = new UniTest(component, 'Test');
  }
ERROR: 19:5   class-name-pascal       {
    fixture = TestBed.createComponent(TestComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
    testClass = new UniTest(component, 'Test');
  }
ERROR: 19:5   class-name-pascal       fixture = TestBed.createComponent(TestComponent);
ERROR: 19:5   class-name-pascal       fixture = TestBed.createComponent(TestComponent)
ERROR: 19:13  class-name-pascal       fixture = TestBed.createComponent(TestComponent)
ERROR: 19:15  class-name-pascal       fixture = TestBed.createComponent(TestComponent)
ERROR: 19:15  class-name-pascal       TestBed.createComponent(TestComponent)
ERROR: 19:15  class-name-pascal       TestBed.createComponent
ERROR: 19:23  class-name-pascal       TestBed.createComponent
ERROR: 19:39  class-name-pascal       TestBed.createComponent(TestComponent)
ERROR: 20:5   class-name-pascal       {
    fixture = TestBed.createComponent(TestComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
    testClass = new UniTest(component, 'Test');
  }
ERROR: 20:5   class-name-pascal       component = fixture.componentInstance;
ERROR: 20:5   class-name-pascal       component = fixture.componentInstance
ERROR: 20:15  class-name-pascal       component = fixture.componentInstance
ERROR: 20:17  class-name-pascal       component = fixture.componentInstance
ERROR: 20:17  class-name-pascal       fixture.componentInstance
ERROR: 20:25  class-name-pascal       fixture.componentInstance
ERROR: 21:5   class-name-pascal       {
    fixture = TestBed.createComponent(TestComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
    testClass = new UniTest(component, 'Test');
  }
ERROR: 21:5   class-name-pascal       fixture.detectChanges();
ERROR: 21:5   class-name-pascal       fixture.detectChanges()
ERROR: 21:5   class-name-pascal       fixture.detectChanges
ERROR: 21:13  class-name-pascal       fixture.detectChanges
ERROR: 22:5   class-name-pascal       {
    fixture = TestBed.createComponent(TestComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
    testClass = new UniTest(component, 'Test');
  }
ERROR: 22:5   class-name-pascal       testClass = new UniTest(component, 'Test');
ERROR: 22:5   class-name-pascal       testClass = new UniTest(component, 'Test')
ERROR: 22:15  class-name-pascal       testClass = new UniTest(component, 'Test')
ERROR: 22:17  class-name-pascal       testClass = new UniTest(component, 'Test')
ERROR: 22:21  class-name-pascal       new UniTest(component, 'Test')
ERROR: 22:29  class-name-pascal       new UniTest(component, 'Test')
ERROR: 22:40  class-name-pascal       new UniTest(component, 'Test')
ERROR: 24:3   class-name-pascal       {
  let component: TestComponent;
  let fixture: ComponentFixture<TestComponent>;
  let testClass;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [ TestComponent ]
    })
    .compileComponents();
  });

  beforeEach(() => {
    fixture = TestBed.createComponent(TestComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
    testClass = new UniTest(component, 'Test');
  });
  it('title check', () => {
    testClass.testTitleRendering('Test component');
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
}
ERROR: 24:3   class-name-pascal       it('title check', () => {
    testClass.testTitleRendering('Test component');
  });
ERROR: 24:3   class-name-pascal       it('title check', () => {
    testClass.testTitleRendering('Test component');
  })
ERROR: 24:6   class-name-pascal       it('title check', () => {
    testClass.testTitleRendering('Test component');
  })
ERROR: 24:21  class-name-pascal       it('title check', () => {
    testClass.testTitleRendering('Test component');
  })
ERROR: 24:24  class-name-pascal       () => {
    testClass.testTitleRendering('Test component');
  }
ERROR: 24:27  class-name-pascal       () => {
    testClass.testTitleRendering('Test component');
  }
ERROR: 25:5   class-name-pascal       {
    testClass.testTitleRendering('Test component');
  }
ERROR: 25:5   class-name-pascal       testClass.testTitleRendering('Test component');
ERROR: 25:5   class-name-pascal       testClass.testTitleRendering('Test component')
ERROR: 25:5   class-name-pascal       testClass.testTitleRendering
ERROR: 25:15  class-name-pascal       testClass.testTitleRendering
ERROR: 25:34  class-name-pascal       testClass.testTitleRendering('Test component')
ERROR: 28:3   class-name-pascal       {
  let component: TestComponent;
  let fixture: ComponentFixture<TestComponent>;
  let testClass;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [ TestComponent ]
    })
    .compileComponents();
  });

  beforeEach(() => {
    fixture = TestBed.createComponent(TestComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
    testClass = new UniTest(component, 'Test');
  });
  it('title check', () => {
    testClass.testTitleRendering('Test component');
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
}
ERROR: 28:3   class-name-pascal       it('should create', () => {
    expect(component).toBeTruthy();
  });
ERROR: 28:3   class-name-pascal       it('should create', () => {
    expect(component).toBeTruthy();
  })
ERROR: 28:6   class-name-pascal       it('should create', () => {
    expect(component).toBeTruthy();
  })
ERROR: 28:23  class-name-pascal       it('should create', () => {
    expect(component).toBeTruthy();
  })
ERROR: 28:26  class-name-pascal       () => {
    expect(component).toBeTruthy();
  }
ERROR: 28:29  class-name-pascal       () => {
    expect(component).toBeTruthy();
  }
ERROR: 29:5   class-name-pascal       {
    expect(component).toBeTruthy();
  }
ERROR: 29:5   class-name-pascal       expect(component).toBeTruthy();
ERROR: 29:5   class-name-pascal       expect(component).toBeTruthy()
ERROR: 29:5   class-name-pascal       expect(component).toBeTruthy
ERROR: 29:5   class-name-pascal       expect(component)
ERROR: 29:12  class-name-pascal       expect(component)
ERROR: 29:23  class-name-pascal       expect(component).toBeTruthy
ERROR: 32:1   class-name-pascal       import { ComponentFixture, TestBed } from '@angular/core/testing';
import { UniTest } from 'src/testing/UnitTest';

import { TestComponent } from './test.component';

describe('TestComponent', () => {
  let component: TestComponent;
  let fixture: ComponentFixture<TestComponent>;
  let testClass;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [ TestComponent ]
    })
    .compileComponents();
  });

  beforeEach(() => {
    fixture = TestBed.createComponent(TestComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
    testClass = new UniTest(component, 'Test');
  });
  it('title check', () => {
    testClass.testTitleRendering('Test component');
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


/home/vinay/projects/Angular-Testing-Specs/src/app/test/test.component.ts:1:1
ERROR: 1:1    class-name-pascal       import { Component, OnInit } from '@angular/core';

@Component({
  selector: 'app-test',
  templateUrl: './test.component.html',
  styleUrls: ['./test.component.scss']
})
export class TestComponent implements OnInit {
  title = 'Test component';

  constructor() { }

  ngOnInit(): void {
  }

}

ERROR: 1:8    class-name-pascal       import { Component, OnInit } from '@angular/core';
ERROR: 1:8    class-name-pascal       { Component, OnInit }
ERROR: 1:10   class-name-pascal       { Component, OnInit }
ERROR: 1:10   class-name-pascal       Component
ERROR: 1:21   class-name-pascal       { Component, OnInit }
ERROR: 1:21   class-name-pascal       OnInit
ERROR: 1:35   class-name-pascal       import { Component, OnInit } from '@angular/core';
ERROR: 3:1    class-name-pascal       import { Component, OnInit } from '@angular/core';

@Component({
  selector: 'app-test',
  templateUrl: './test.component.html',
  styleUrls: ['./test.component.scss']
})
export class TestComponent implements OnInit {
  title = 'Test component';

  constructor() { }

  ngOnInit(): void {
  }

}

ERROR: 3:2    class-name-pascal       @Component({
  selector: 'app-test',
  templateUrl: './test.component.html',
  styleUrls: ['./test.component.scss']
})
ERROR: 3:2    class-name-pascal       Component({
  selector: 'app-test',
  templateUrl: './test.component.html',
  styleUrls: ['./test.component.scss']
})
ERROR: 3:12   class-name-pascal       Component({
  selector: 'app-test',
  templateUrl: './test.component.html',
  styleUrls: ['./test.component.scss']
})
ERROR: 4:3    class-name-pascal       {
  selector: 'app-test',
  templateUrl: './test.component.html',
  styleUrls: ['./test.component.scss']
}
ERROR: 4:3    class-name-pascal       selector: 'app-test'
ERROR: 4:13   class-name-pascal       selector: 'app-test'
ERROR: 5:3    class-name-pascal       {
  selector: 'app-test',
  templateUrl: './test.component.html',
  styleUrls: ['./test.component.scss']
}
ERROR: 5:3    class-name-pascal       templateUrl: './test.component.html'
ERROR: 5:16   class-name-pascal       templateUrl: './test.component.html'
ERROR: 6:3    class-name-pascal       {
  selector: 'app-test',
  templateUrl: './test.component.html',
  styleUrls: ['./test.component.scss']
}
ERROR: 6:3    class-name-pascal       styleUrls: ['./test.component.scss']
ERROR: 6:14   class-name-pascal       styleUrls: ['./test.component.scss']
ERROR: 6:15   class-name-pascal       ['./test.component.scss']
ERROR: 8:1    class-name-pascal       @Component({
  selector: 'app-test',
  templateUrl: './test.component.html',
  styleUrls: ['./test.component.scss']
})
export class TestComponent implements OnInit {
  title = 'Test component';

  constructor() { }

  ngOnInit(): void {
  }

}
ERROR: 8:14   class-name-pascal       @Component({
  selector: 'app-test',
  templateUrl: './test.component.html',
  styleUrls: ['./test.component.scss']
})
export class TestComponent implements OnInit {
  title = 'Test component';

  constructor() { }

  ngOnInit(): void {
  }

}
ERROR: 8:28   class-name-pascal       @Component({
  selector: 'app-test',
  templateUrl: './test.component.html',
  styleUrls: ['./test.component.scss']
})
export class TestComponent implements OnInit {
  title = 'Test component';

  constructor() { }

  ngOnInit(): void {
  }

}
ERROR: 8:39   class-name-pascal       implements OnInit
ERROR: 8:39   class-name-pascal       OnInit
ERROR: 9:3    class-name-pascal       @Component({
  selector: 'app-test',
  templateUrl: './test.component.html',
  styleUrls: ['./test.component.scss']
})
export class TestComponent implements OnInit {
  title = 'Test component';

  constructor() { }

  ngOnInit(): void {
  }

}
ERROR: 9:3    class-name-pascal       title = 'Test component';
ERROR: 9:11   class-name-pascal       title = 'Test component';
ERROR: 11:3   class-name-pascal       @Component({
  selector: 'app-test',
  templateUrl: './test.component.html',
  styleUrls: ['./test.component.scss']
})
export class TestComponent implements OnInit {
  title = 'Test component';

  constructor() { }

  ngOnInit(): void {
  }

}
ERROR: 11:17  class-name-pascal       constructor() { }
ERROR: 13:3   class-name-pascal       @Component({
  selector: 'app-test',
  templateUrl: './test.component.html',
  styleUrls: ['./test.component.scss']
})
export class TestComponent implements OnInit {
  title = 'Test component';

  constructor() { }

  ngOnInit(): void {
  }

}
ERROR: 13:3   class-name-pascal       ngOnInit(): void {
  }
ERROR: 13:15  class-name-pascal       ngOnInit(): void {
  }
ERROR: 13:20  class-name-pascal       ngOnInit(): void {
  }
ERROR: 17:1   class-name-pascal       import { Component, OnInit } from '@angular/core';

@Component({
  selector: 'app-test',
  templateUrl: './test.component.html',
  styleUrls: ['./test.component.scss']
})
export class TestComponent implements OnInit {
  title = 'Test component';

  constructor() { }

  ngOnInit(): void {
  }

}


/home/vinay/projects/Angular-Testing-Specs/src/app/user.model.ts:1:1
ERROR: 1:1    class-name-pascal       export interface User {
    name: string;
    email: string;
    mob: number;
}

ERROR: 1:1    class-name-pascal       export interface User {
    name: string;
    email: string;
    mob: number;
}
ERROR: 1:18   class-name-pascal       export interface User {
    name: string;
    email: string;
    mob: number;
}
ERROR: 2:5    class-name-pascal       export interface User {
    name: string;
    email: string;
    mob: number;
}
ERROR: 2:5    class-name-pascal       name: string;
ERROR: 2:11   class-name-pascal       name: string;
ERROR: 3:5    class-name-pascal       export interface User {
    name: string;
    email: string;
    mob: number;
}
ERROR: 3:5    class-name-pascal       email: string;
ERROR: 3:12   class-name-pascal       email: string;
ERROR: 4:5    class-name-pascal       export interface User {
    name: string;
    email: string;
    mob: number;
}
ERROR: 4:5    class-name-pascal       mob: number;
ERROR: 4:10   class-name-pascal       mob: number;
ERROR: 6:1    class-name-pascal       export interface User {
    name: string;
    email: string;
    mob: number;
}


/home/vinay/projects/Angular-Testing-Specs/src/app/user/user.component.spec.ts:1:1
ERROR: 1:1    class-name-pascal       import { ComponentFixture, TestBed } from '@angular/core/testing';
import { UniTest } from 'src/testing/UnitTest';

import { UserComponent } from './user.component';

describe('UserComponent', () => {
  let component: UserComponent;
  let fixture: ComponentFixture<UserComponent>;
  let testClass;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [UserComponent]
    })
      .compileComponents();
  });

  beforeEach(() => {
    fixture = TestBed.createComponent(UserComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
    testClass = new UniTest(component, 'User');
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
  it('title check', () => {
    testClass.testTitleRendering('User');
  });
});

ERROR: 1:8    class-name-pascal       import { ComponentFixture, TestBed } from '@angular/core/testing';
ERROR: 1:8    class-name-pascal       { ComponentFixture, TestBed }
ERROR: 1:10   class-name-pascal       { ComponentFixture, TestBed }
ERROR: 1:10   class-name-pascal       ComponentFixture
ERROR: 1:28   class-name-pascal       { ComponentFixture, TestBed }
ERROR: 1:28   class-name-pascal       TestBed
ERROR: 1:43   class-name-pascal       import { ComponentFixture, TestBed } from '@angular/core/testing';
ERROR: 2:1    class-name-pascal       import { ComponentFixture, TestBed } from '@angular/core/testing';
import { UniTest } from 'src/testing/UnitTest';

import { UserComponent } from './user.component';

describe('UserComponent', () => {
  let component: UserComponent;
  let fixture: ComponentFixture<UserComponent>;
  let testClass;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [UserComponent]
    })
      .compileComponents();
  });

  beforeEach(() => {
    fixture = TestBed.createComponent(UserComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
    testClass = new UniTest(component, 'User');
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
  it('title check', () => {
    testClass.testTitleRendering('User');
  });
});

ERROR: 2:8    class-name-pascal       import { UniTest } from 'src/testing/UnitTest';
ERROR: 2:8    class-name-pascal       { UniTest }
ERROR: 2:10   class-name-pascal       { UniTest }
ERROR: 2:10   class-name-pascal       UniTest
ERROR: 2:25   class-name-pascal       import { UniTest } from 'src/testing/UnitTest';
ERROR: 4:1    class-name-pascal       import { ComponentFixture, TestBed } from '@angular/core/testing';
import { UniTest } from 'src/testing/UnitTest';

import { UserComponent } from './user.component';

describe('UserComponent', () => {
  let component: UserComponent;
  let fixture: ComponentFixture<UserComponent>;
  let testClass;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [UserComponent]
    })
      .compileComponents();
  });

  beforeEach(() => {
    fixture = TestBed.createComponent(UserComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
    testClass = new UniTest(component, 'User');
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
  it('title check', () => {
    testClass.testTitleRendering('User');
  });
});

ERROR: 4:8    class-name-pascal       import { UserComponent } from './user.component';
ERROR: 4:8    class-name-pascal       { UserComponent }
ERROR: 4:10   class-name-pascal       { UserComponent }
ERROR: 4:10   class-name-pascal       UserComponent
ERROR: 4:31   class-name-pascal       import { UserComponent } from './user.component';
ERROR: 6:1    class-name-pascal       import { ComponentFixture, TestBed } from '@angular/core/testing';
import { UniTest } from 'src/testing/UnitTest';

import { UserComponent } from './user.component';

describe('UserComponent', () => {
  let component: UserComponent;
  let fixture: ComponentFixture<UserComponent>;
  let testClass;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [UserComponent]
    })
      .compileComponents();
  });

  beforeEach(() => {
    fixture = TestBed.createComponent(UserComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
    testClass = new UniTest(component, 'User');
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
  it('title check', () => {
    testClass.testTitleRendering('User');
  });
});

ERROR: 6:1    class-name-pascal       describe('UserComponent', () => {
  let component: UserComponent;
  let fixture: ComponentFixture<UserComponent>;
  let testClass;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [UserComponent]
    })
      .compileComponents();
  });

  beforeEach(() => {
    fixture = TestBed.createComponent(UserComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
    testClass = new UniTest(component, 'User');
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
  it('title check', () => {
    testClass.testTitleRendering('User');
  });
});
ERROR: 6:1    class-name-pascal       describe('UserComponent', () => {
  let component: UserComponent;
  let fixture: ComponentFixture<UserComponent>;
  let testClass;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [UserComponent]
    })
      .compileComponents();
  });

  beforeEach(() => {
    fixture = TestBed.createComponent(UserComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
    testClass = new UniTest(component, 'User');
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
  it('title check', () => {
    testClass.testTitleRendering('User');
  });
})
ERROR: 6:10   class-name-pascal       describe('UserComponent', () => {
  let component: UserComponent;
  let fixture: ComponentFixture<UserComponent>;
  let testClass;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [UserComponent]
    })
      .compileComponents();
  });

  beforeEach(() => {
    fixture = TestBed.createComponent(UserComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
    testClass = new UniTest(component, 'User');
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
  it('title check', () => {
    testClass.testTitleRendering('User');
  });
})
ERROR: 6:27   class-name-pascal       describe('UserComponent', () => {
  let component: UserComponent;
  let fixture: ComponentFixture<UserComponent>;
  let testClass;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [UserComponent]
    })
      .compileComponents();
  });

  beforeEach(() => {
    fixture = TestBed.createComponent(UserComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
    testClass = new UniTest(component, 'User');
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
  it('title check', () => {
    testClass.testTitleRendering('User');
  });
})
ERROR: 6:30   class-name-pascal       () => {
  let component: UserComponent;
  let fixture: ComponentFixture<UserComponent>;
  let testClass;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [UserComponent]
    })
      .compileComponents();
  });

  beforeEach(() => {
    fixture = TestBed.createComponent(UserComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
    testClass = new UniTest(component, 'User');
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
  it('title check', () => {
    testClass.testTitleRendering('User');
  });
}
ERROR: 6:33   class-name-pascal       () => {
  let component: UserComponent;
  let fixture: ComponentFixture<UserComponent>;
  let testClass;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [UserComponent]
    })
      .compileComponents();
  });

  beforeEach(() => {
    fixture = TestBed.createComponent(UserComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
    testClass = new UniTest(component, 'User');
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
  it('title check', () => {
    testClass.testTitleRendering('User');
  });
}
ERROR: 7:3    class-name-pascal       {
  let component: UserComponent;
  let fixture: ComponentFixture<UserComponent>;
  let testClass;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [UserComponent]
    })
      .compileComponents();
  });

  beforeEach(() => {
    fixture = TestBed.createComponent(UserComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
    testClass = new UniTest(component, 'User');
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
  it('title check', () => {
    testClass.testTitleRendering('User');
  });
}
ERROR: 7:3    class-name-pascal       let component: UserComponent;
ERROR: 7:7    class-name-pascal       let component: UserComponent
ERROR: 7:7    class-name-pascal       component: UserComponent
ERROR: 7:18   class-name-pascal       component: UserComponent
ERROR: 7:18   class-name-pascal       UserComponent
ERROR: 8:3    class-name-pascal       {
  let component: UserComponent;
  let fixture: ComponentFixture<UserComponent>;
  let testClass;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [UserComponent]
    })
      .compileComponents();
  });

  beforeEach(() => {
    fixture = TestBed.createComponent(UserComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
    testClass = new UniTest(component, 'User');
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
  it('title check', () => {
    testClass.testTitleRendering('User');
  });
}
ERROR: 8:3    class-name-pascal       let fixture: ComponentFixture<UserComponent>;
ERROR: 8:7    class-name-pascal       let fixture: ComponentFixture<UserComponent>
ERROR: 8:7    class-name-pascal       fixture: ComponentFixture<UserComponent>
ERROR: 8:16   class-name-pascal       fixture: ComponentFixture<UserComponent>
ERROR: 8:16   class-name-pascal       ComponentFixture<UserComponent>
ERROR: 8:33   class-name-pascal       ComponentFixture<UserComponent>
ERROR: 8:33   class-name-pascal       UserComponent
ERROR: 9:3    class-name-pascal       {
  let component: UserComponent;
  let fixture: ComponentFixture<UserComponent>;
  let testClass;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [UserComponent]
    })
      .compileComponents();
  });

  beforeEach(() => {
    fixture = TestBed.createComponent(UserComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
    testClass = new UniTest(component, 'User');
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
  it('title check', () => {
    testClass.testTitleRendering('User');
  });
}
ERROR: 9:3    class-name-pascal       let testClass;
ERROR: 9:7    class-name-pascal       let testClass
ERROR: 9:7    class-name-pascal       testClass
ERROR: 11:3   class-name-pascal       {
  let component: UserComponent;
  let fixture: ComponentFixture<UserComponent>;
  let testClass;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [UserComponent]
    })
      .compileComponents();
  });

  beforeEach(() => {
    fixture = TestBed.createComponent(UserComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
    testClass = new UniTest(component, 'User');
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
  it('title check', () => {
    testClass.testTitleRendering('User');
  });
}
ERROR: 11:3   class-name-pascal       beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [UserComponent]
    })
      .compileComponents();
  });
ERROR: 11:3   class-name-pascal       beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [UserComponent]
    })
      .compileComponents();
  })
ERROR: 11:14  class-name-pascal       beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [UserComponent]
    })
      .compileComponents();
  })
ERROR: 11:14  class-name-pascal       async () => {
    await TestBed.configureTestingModule({
      declarations: [UserComponent]
    })
      .compileComponents();
  }
ERROR: 11:23  class-name-pascal       async () => {
    await TestBed.configureTestingModule({
      declarations: [UserComponent]
    })
      .compileComponents();
  }
ERROR: 11:26  class-name-pascal       async () => {
    await TestBed.configureTestingModule({
      declarations: [UserComponent]
    })
      .compileComponents();
  }
ERROR: 12:5   class-name-pascal       {
    await TestBed.configureTestingModule({
      declarations: [UserComponent]
    })
      .compileComponents();
  }
ERROR: 12:5   class-name-pascal       await TestBed.configureTestingModule({
      declarations: [UserComponent]
    })
      .compileComponents();
ERROR: 12:11  class-name-pascal       await TestBed.configureTestingModule({
      declarations: [UserComponent]
    })
      .compileComponents()
ERROR: 12:11  class-name-pascal       TestBed.configureTestingModule({
      declarations: [UserComponent]
    })
      .compileComponents()
ERROR: 12:11  class-name-pascal       TestBed.configureTestingModule({
      declarations: [UserComponent]
    })
      .compileComponents
ERROR: 12:11  class-name-pascal       TestBed.configureTestingModule({
      declarations: [UserComponent]
    })
ERROR: 12:11  class-name-pascal       TestBed.configureTestingModule
ERROR: 12:19  class-name-pascal       TestBed.configureTestingModule
ERROR: 12:42  class-name-pascal       TestBed.configureTestingModule({
      declarations: [UserComponent]
    })
ERROR: 13:7   class-name-pascal       {
      declarations: [UserComponent]
    }
ERROR: 13:7   class-name-pascal       declarations: [UserComponent]
ERROR: 13:21  class-name-pascal       declarations: [UserComponent]
ERROR: 13:22  class-name-pascal       [UserComponent]
ERROR: 15:8   class-name-pascal       TestBed.configureTestingModule({
      declarations: [UserComponent]
    })
      .compileComponents
ERROR: 18:3   class-name-pascal       {
  let component: UserComponent;
  let fixture: ComponentFixture<UserComponent>;
  let testClass;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [UserComponent]
    })
      .compileComponents();
  });

  beforeEach(() => {
    fixture = TestBed.createComponent(UserComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
    testClass = new UniTest(component, 'User');
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
  it('title check', () => {
    testClass.testTitleRendering('User');
  });
}
ERROR: 18:3   class-name-pascal       beforeEach(() => {
    fixture = TestBed.createComponent(UserComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
    testClass = new UniTest(component, 'User');
  });
ERROR: 18:3   class-name-pascal       beforeEach(() => {
    fixture = TestBed.createComponent(UserComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
    testClass = new UniTest(component, 'User');
  })
ERROR: 18:14  class-name-pascal       beforeEach(() => {
    fixture = TestBed.createComponent(UserComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
    testClass = new UniTest(component, 'User');
  })
ERROR: 18:17  class-name-pascal       () => {
    fixture = TestBed.createComponent(UserComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
    testClass = new UniTest(component, 'User');
  }
ERROR: 18:20  class-name-pascal       () => {
    fixture = TestBed.createComponent(UserComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
    testClass = new UniTest(component, 'User');
  }
ERROR: 19:5   class-name-pascal       {
    fixture = TestBed.createComponent(UserComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
    testClass = new UniTest(component, 'User');
  }
ERROR: 19:5   class-name-pascal       fixture = TestBed.createComponent(UserComponent);
ERROR: 19:5   class-name-pascal       fixture = TestBed.createComponent(UserComponent)
ERROR: 19:13  class-name-pascal       fixture = TestBed.createComponent(UserComponent)
ERROR: 19:15  class-name-pascal       fixture = TestBed.createComponent(UserComponent)
ERROR: 19:15  class-name-pascal       TestBed.createComponent(UserComponent)
ERROR: 19:15  class-name-pascal       TestBed.createComponent
ERROR: 19:23  class-name-pascal       TestBed.createComponent
ERROR: 19:39  class-name-pascal       TestBed.createComponent(UserComponent)
ERROR: 20:5   class-name-pascal       {
    fixture = TestBed.createComponent(UserComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
    testClass = new UniTest(component, 'User');
  }
ERROR: 20:5   class-name-pascal       component = fixture.componentInstance;
ERROR: 20:5   class-name-pascal       component = fixture.componentInstance
ERROR: 20:15  class-name-pascal       component = fixture.componentInstance
ERROR: 20:17  class-name-pascal       component = fixture.componentInstance
ERROR: 20:17  class-name-pascal       fixture.componentInstance
ERROR: 20:25  class-name-pascal       fixture.componentInstance
ERROR: 21:5   class-name-pascal       {
    fixture = TestBed.createComponent(UserComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
    testClass = new UniTest(component, 'User');
  }
ERROR: 21:5   class-name-pascal       fixture.detectChanges();
ERROR: 21:5   class-name-pascal       fixture.detectChanges()
ERROR: 21:5   class-name-pascal       fixture.detectChanges
ERROR: 21:13  class-name-pascal       fixture.detectChanges
ERROR: 22:5   class-name-pascal       {
    fixture = TestBed.createComponent(UserComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
    testClass = new UniTest(component, 'User');
  }
ERROR: 22:5   class-name-pascal       testClass = new UniTest(component, 'User');
ERROR: 22:5   class-name-pascal       testClass = new UniTest(component, 'User')
ERROR: 22:15  class-name-pascal       testClass = new UniTest(component, 'User')
ERROR: 22:17  class-name-pascal       testClass = new UniTest(component, 'User')
ERROR: 22:21  class-name-pascal       new UniTest(component, 'User')
ERROR: 22:29  class-name-pascal       new UniTest(component, 'User')
ERROR: 22:40  class-name-pascal       new UniTest(component, 'User')
ERROR: 25:3   class-name-pascal       {
  let component: UserComponent;
  let fixture: ComponentFixture<UserComponent>;
  let testClass;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [UserComponent]
    })
      .compileComponents();
  });

  beforeEach(() => {
    fixture = TestBed.createComponent(UserComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
    testClass = new UniTest(component, 'User');
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
  it('title check', () => {
    testClass.testTitleRendering('User');
  });
}
ERROR: 25:3   class-name-pascal       it('should create', () => {
    expect(component).toBeTruthy();
  });
ERROR: 25:3   class-name-pascal       it('should create', () => {
    expect(component).toBeTruthy();
  })
ERROR: 25:6   class-name-pascal       it('should create', () => {
    expect(component).toBeTruthy();
  })
ERROR: 25:23  class-name-pascal       it('should create', () => {
    expect(component).toBeTruthy();
  })
ERROR: 25:26  class-name-pascal       () => {
    expect(component).toBeTruthy();
  }
ERROR: 25:29  class-name-pascal       () => {
    expect(component).toBeTruthy();
  }
ERROR: 26:5   class-name-pascal       {
    expect(component).toBeTruthy();
  }
ERROR: 26:5   class-name-pascal       expect(component).toBeTruthy();
ERROR: 26:5   class-name-pascal       expect(component).toBeTruthy()
ERROR: 26:5   class-name-pascal       expect(component).toBeTruthy
ERROR: 26:5   class-name-pascal       expect(component)
ERROR: 26:12  class-name-pascal       expect(component)
ERROR: 26:23  class-name-pascal       expect(component).toBeTruthy
ERROR: 28:3   class-name-pascal       {
  let component: UserComponent;
  let fixture: ComponentFixture<UserComponent>;
  let testClass;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [UserComponent]
    })
      .compileComponents();
  });

  beforeEach(() => {
    fixture = TestBed.createComponent(UserComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
    testClass = new UniTest(component, 'User');
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
  it('title check', () => {
    testClass.testTitleRendering('User');
  });
}
ERROR: 28:3   class-name-pascal       it('title check', () => {
    testClass.testTitleRendering('User');
  });
ERROR: 28:3   class-name-pascal       it('title check', () => {
    testClass.testTitleRendering('User');
  })
ERROR: 28:6   class-name-pascal       it('title check', () => {
    testClass.testTitleRendering('User');
  })
ERROR: 28:21  class-name-pascal       it('title check', () => {
    testClass.testTitleRendering('User');
  })
ERROR: 28:24  class-name-pascal       () => {
    testClass.testTitleRendering('User');
  }
ERROR: 28:27  class-name-pascal       () => {
    testClass.testTitleRendering('User');
  }
ERROR: 29:5   class-name-pascal       {
    testClass.testTitleRendering('User');
  }
ERROR: 29:5   class-name-pascal       testClass.testTitleRendering('User');
ERROR: 29:5   class-name-pascal       testClass.testTitleRendering('User')
ERROR: 29:5   class-name-pascal       testClass.testTitleRendering
ERROR: 29:15  class-name-pascal       testClass.testTitleRendering
ERROR: 29:34  class-name-pascal       testClass.testTitleRendering('User')
ERROR: 32:1   class-name-pascal       import { ComponentFixture, TestBed } from '@angular/core/testing';
import { UniTest } from 'src/testing/UnitTest';

import { UserComponent } from './user.component';

describe('UserComponent', () => {
  let component: UserComponent;
  let fixture: ComponentFixture<UserComponent>;
  let testClass;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [UserComponent]
    })
      .compileComponents();
  });

  beforeEach(() => {
    fixture = TestBed.createComponent(UserComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
    testClass = new UniTest(component, 'User');
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
  it('title check', () => {
    testClass.testTitleRendering('User');
  });
});


/home/vinay/projects/Angular-Testing-Specs/src/app/user/user.component.ts:1:1
ERROR: 1:1    class-name-pascal       import { Component, OnInit } from '@angular/core';

@Component({
  selector: 'app-user',
  templateUrl: './user.component.html',
  styleUrls: ['./user.component.scss']
})
export class UserComponent implements OnInit {
  title = 'User';

  constructor() { }

  ngOnInit(): void {
  }

}

ERROR: 1:8    class-name-pascal       import { Component, OnInit } from '@angular/core';
ERROR: 1:8    class-name-pascal       { Component, OnInit }
ERROR: 1:10   class-name-pascal       { Component, OnInit }
ERROR: 1:10   class-name-pascal       Component
ERROR: 1:21   class-name-pascal       { Component, OnInit }
ERROR: 1:21   class-name-pascal       OnInit
ERROR: 1:35   class-name-pascal       import { Component, OnInit } from '@angular/core';
ERROR: 3:1    class-name-pascal       import { Component, OnInit } from '@angular/core';

@Component({
  selector: 'app-user',
  templateUrl: './user.component.html',
  styleUrls: ['./user.component.scss']
})
export class UserComponent implements OnInit {
  title = 'User';

  constructor() { }

  ngOnInit(): void {
  }

}

ERROR: 3:2    class-name-pascal       @Component({
  selector: 'app-user',
  templateUrl: './user.component.html',
  styleUrls: ['./user.component.scss']
})
ERROR: 3:2    class-name-pascal       Component({
  selector: 'app-user',
  templateUrl: './user.component.html',
  styleUrls: ['./user.component.scss']
})
ERROR: 3:12   class-name-pascal       Component({
  selector: 'app-user',
  templateUrl: './user.component.html',
  styleUrls: ['./user.component.scss']
})
ERROR: 4:3    class-name-pascal       {
  selector: 'app-user',
  templateUrl: './user.component.html',
  styleUrls: ['./user.component.scss']
}
ERROR: 4:3    class-name-pascal       selector: 'app-user'
ERROR: 4:13   class-name-pascal       selector: 'app-user'
ERROR: 5:3    class-name-pascal       {
  selector: 'app-user',
  templateUrl: './user.component.html',
  styleUrls: ['./user.component.scss']
}
ERROR: 5:3    class-name-pascal       templateUrl: './user.component.html'
ERROR: 5:16   class-name-pascal       templateUrl: './user.component.html'
ERROR: 6:3    class-name-pascal       {
  selector: 'app-user',
  templateUrl: './user.component.html',
  styleUrls: ['./user.component.scss']
}
ERROR: 6:3    class-name-pascal       styleUrls: ['./user.component.scss']
ERROR: 6:14   class-name-pascal       styleUrls: ['./user.component.scss']
ERROR: 6:15   class-name-pascal       ['./user.component.scss']
ERROR: 8:1    class-name-pascal       @Component({
  selector: 'app-user',
  templateUrl: './user.component.html',
  styleUrls: ['./user.component.scss']
})
export class UserComponent implements OnInit {
  title = 'User';

  constructor() { }

  ngOnInit(): void {
  }

}
ERROR: 8:14   class-name-pascal       @Component({
  selector: 'app-user',
  templateUrl: './user.component.html',
  styleUrls: ['./user.component.scss']
})
export class UserComponent implements OnInit {
  title = 'User';

  constructor() { }

  ngOnInit(): void {
  }

}
ERROR: 8:28   class-name-pascal       @Component({
  selector: 'app-user',
  templateUrl: './user.component.html',
  styleUrls: ['./user.component.scss']
})
export class UserComponent implements OnInit {
  title = 'User';

  constructor() { }

  ngOnInit(): void {
  }

}
ERROR: 8:39   class-name-pascal       implements OnInit
ERROR: 8:39   class-name-pascal       OnInit
ERROR: 9:3    class-name-pascal       @Component({
  selector: 'app-user',
  templateUrl: './user.component.html',
  styleUrls: ['./user.component.scss']
})
export class UserComponent implements OnInit {
  title = 'User';

  constructor() { }

  ngOnInit(): void {
  }

}
ERROR: 9:3    class-name-pascal       title = 'User';
ERROR: 9:11   class-name-pascal       title = 'User';
ERROR: 11:3   class-name-pascal       @Component({
  selector: 'app-user',
  templateUrl: './user.component.html',
  styleUrls: ['./user.component.scss']
})
export class UserComponent implements OnInit {
  title = 'User';

  constructor() { }

  ngOnInit(): void {
  }

}
ERROR: 11:17  class-name-pascal       constructor() { }
ERROR: 13:3   class-name-pascal       @Component({
  selector: 'app-user',
  templateUrl: './user.component.html',
  styleUrls: ['./user.component.scss']
})
export class UserComponent implements OnInit {
  title = 'User';

  constructor() { }

  ngOnInit(): void {
  }

}
ERROR: 13:3   class-name-pascal       ngOnInit(): void {
  }
ERROR: 13:15  class-name-pascal       ngOnInit(): void {
  }
ERROR: 13:20  class-name-pascal       ngOnInit(): void {
  }
ERROR: 17:1   class-name-pascal       import { Component, OnInit } from '@angular/core';

@Component({
  selector: 'app-user',
  templateUrl: './user.component.html',
  styleUrls: ['./user.component.scss']
})
export class UserComponent implements OnInit {
  title = 'User';

  constructor() { }

  ngOnInit(): void {
  }

}


/home/vinay/projects/Angular-Testing-Specs/src/environments/environment.ts:5:1
ERROR: 5:1    class-name-pascal       export const environment = {
  production: false
};

/*
 * For easier debugging in development mode, you can import the following file
 * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.
 *
 * This import should be commented out in production mode because it will have a negative impact
 * on performance if an error is thrown.
 */
// import 'zone.js/dist/zone-error';  // Included with Angular CLI.

ERROR: 5:1    class-name-pascal       export const environment = {
  production: false
};
ERROR: 5:8    class-name-pascal       export const environment = {
  production: false
};
ERROR: 5:14   class-name-pascal       const environment = {
  production: false
}
ERROR: 5:14   class-name-pascal       environment = {
  production: false
}
ERROR: 5:28   class-name-pascal       environment = {
  production: false
}
ERROR: 6:3    class-name-pascal       {
  production: false
}
ERROR: 6:3    class-name-pascal       production: false
ERROR: 6:15   class-name-pascal       production: false
ERROR: 17:1   class-name-pascal       export const environment = {
  production: false
};

/*
 * For easier debugging in development mode, you can import the following file
 * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.
 *
 * This import should be commented out in production mode because it will have a negative impact
 * on performance if an error is thrown.
 */
// import 'zone.js/dist/zone-error';  // Included with Angular CLI.


/home/vinay/projects/Angular-Testing-Specs/src/main.ts:1:1
ERROR: 1:1    class-name-pascal       import { enableProdMode } from '@angular/core';
import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';

import { AppModule } from './app/app.module';
import { environment } from './environments/environment';

if (environment.production) {
  enableProdMode();
}

platformBrowserDynamic().bootstrapModule(AppModule)
  .catch(err => console.error(err));

ERROR: 1:8    class-name-pascal       import { enableProdMode } from '@angular/core';
ERROR: 1:8    class-name-pascal       { enableProdMode }
ERROR: 1:10   class-name-pascal       { enableProdMode }
ERROR: 1:10   class-name-pascal       enableProdMode
ERROR: 1:32   class-name-pascal       import { enableProdMode } from '@angular/core';
ERROR: 2:1    class-name-pascal       import { enableProdMode } from '@angular/core';
import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';

import { AppModule } from './app/app.module';
import { environment } from './environments/environment';

if (environment.production) {
  enableProdMode();
}

platformBrowserDynamic().bootstrapModule(AppModule)
  .catch(err => console.error(err));

ERROR: 2:8    class-name-pascal       import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';
ERROR: 2:8    class-name-pascal       { platformBrowserDynamic }
ERROR: 2:10   class-name-pascal       { platformBrowserDynamic }
ERROR: 2:10   class-name-pascal       platformBrowserDynamic
ERROR: 2:40   class-name-pascal       import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';
ERROR: 4:1    class-name-pascal       import { enableProdMode } from '@angular/core';
import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';

import { AppModule } from './app/app.module';
import { environment } from './environments/environment';

if (environment.production) {
  enableProdMode();
}

platformBrowserDynamic().bootstrapModule(AppModule)
  .catch(err => console.error(err));

ERROR: 4:8    class-name-pascal       import { AppModule } from './app/app.module';
ERROR: 4:8    class-name-pascal       { AppModule }
ERROR: 4:10   class-name-pascal       { AppModule }
ERROR: 4:10   class-name-pascal       AppModule
ERROR: 4:27   class-name-pascal       import { AppModule } from './app/app.module';
ERROR: 5:1    class-name-pascal       import { enableProdMode } from '@angular/core';
import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';

import { AppModule } from './app/app.module';
import { environment } from './environments/environment';

if (environment.production) {
  enableProdMode();
}

platformBrowserDynamic().bootstrapModule(AppModule)
  .catch(err => console.error(err));

ERROR: 5:8    class-name-pascal       import { environment } from './environments/environment';
ERROR: 5:8    class-name-pascal       { environment }
ERROR: 5:10   class-name-pascal       { environment }
ERROR: 5:10   class-name-pascal       environment
ERROR: 5:29   class-name-pascal       import { environment } from './environments/environment';
ERROR: 7:1    class-name-pascal       import { enableProdMode } from '@angular/core';
import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';

import { AppModule } from './app/app.module';
import { environment } from './environments/environment';

if (environment.production) {
  enableProdMode();
}

platformBrowserDynamic().bootstrapModule(AppModule)
  .catch(err => console.error(err));

ERROR: 7:5    class-name-pascal       if (environment.production) {
  enableProdMode();
}
ERROR: 7:5    class-name-pascal       environment.production
ERROR: 7:17   class-name-pascal       environment.production
ERROR: 7:29   class-name-pascal       if (environment.production) {
  enableProdMode();
}
ERROR: 8:3    class-name-pascal       {
  enableProdMode();
}
ERROR: 8:3    class-name-pascal       enableProdMode();
ERROR: 8:3    class-name-pascal       enableProdMode()
ERROR: 11:1   class-name-pascal       import { enableProdMode } from '@angular/core';
import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';

import { AppModule } from './app/app.module';
import { environment } from './environments/environment';

if (environment.production) {
  enableProdMode();
}

platformBrowserDynamic().bootstrapModule(AppModule)
  .catch(err => console.error(err));

ERROR: 11:1   class-name-pascal       platformBrowserDynamic().bootstrapModule(AppModule)
  .catch(err => console.error(err));
ERROR: 11:1   class-name-pascal       platformBrowserDynamic().bootstrapModule(AppModule)
  .catch(err => console.error(err))
ERROR: 11:1   class-name-pascal       platformBrowserDynamic().bootstrapModule(AppModule)
  .catch
ERROR: 11:1   class-name-pascal       platformBrowserDynamic().bootstrapModule(AppModule)
ERROR: 11:1   class-name-pascal       platformBrowserDynamic().bootstrapModule
ERROR: 11:1   class-name-pascal       platformBrowserDynamic()
ERROR: 11:26  class-name-pascal       platformBrowserDynamic().bootstrapModule
ERROR: 11:42  class-name-pascal       platformBrowserDynamic().bootstrapModule(AppModule)
ERROR: 12:4   class-name-pascal       platformBrowserDynamic().bootstrapModule(AppModule)
  .catch
ERROR: 12:10  class-name-pascal       platformBrowserDynamic().bootstrapModule(AppModule)
  .catch(err => console.error(err))
ERROR: 12:10  class-name-pascal       err => console.error(err)
ERROR: 12:10  class-name-pascal       err
ERROR: 12:14  class-name-pascal       err => console.error(err)
ERROR: 12:17  class-name-pascal       err => console.error(err)
ERROR: 12:17  class-name-pascal       console.error(err)
ERROR: 12:17  class-name-pascal       console.error
ERROR: 12:25  class-name-pascal       console.error
ERROR: 12:31  class-name-pascal       console.error(err)
ERROR: 13:1   class-name-pascal       import { enableProdMode } from '@angular/core';
import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';

import { AppModule } from './app/app.module';
import { environment } from './environments/environment';

if (environment.production) {
  enableProdMode();
}

platformBrowserDynamic().bootstrapModule(AppModule)
  .catch(err => console.error(err));


/home/vinay/projects/Angular-Testing-Specs/src/polyfills.ts:58:1
ERROR: 58:1   class-name-pascal       import 'zone.js/dist/zone';  // Included with Angular CLI.


/***************************************************************************************************
 * APPLICATION IMPORTS
 */

ERROR: 58:8   class-name-pascal       import 'zone.js/dist/zone';
ERROR: 64:1   class-name-pascal       import 'zone.js/dist/zone';  // Included with Angular CLI.


/***************************************************************************************************
 * APPLICATION IMPORTS
 */


/home/vinay/projects/Angular-Testing-Specs/src/services/unit-test.service.spec.ts:1:1
ERROR: 1:1    class-name-pascal       import { TestBed } from '@angular/core/testing';

import { UnitTestService } from './unit-test.service';

describe('UnitTestService', () => {
  let service: UnitTestService;

  beforeEach(() => {
    TestBed.configureTestingModule({});
    service = TestBed.inject(UnitTestService);
  });

  it('should be created', () => {
    expect(service).toBeTruthy();
  });
});

ERROR: 1:8    class-name-pascal       import { TestBed } from '@angular/core/testing';
ERROR: 1:8    class-name-pascal       { TestBed }
ERROR: 1:10   class-name-pascal       { TestBed }
ERROR: 1:10   class-name-pascal       TestBed
ERROR: 1:25   class-name-pascal       import { TestBed } from '@angular/core/testing';
ERROR: 3:1    class-name-pascal       import { TestBed } from '@angular/core/testing';

import { UnitTestService } from './unit-test.service';

describe('UnitTestService', () => {
  let service: UnitTestService;

  beforeEach(() => {
    TestBed.configureTestingModule({});
    service = TestBed.inject(UnitTestService);
  });

  it('should be created', () => {
    expect(service).toBeTruthy();
  });
});

ERROR: 3:8    class-name-pascal       import { UnitTestService } from './unit-test.service';
ERROR: 3:8    class-name-pascal       { UnitTestService }
ERROR: 3:10   class-name-pascal       { UnitTestService }
ERROR: 3:10   class-name-pascal       UnitTestService
ERROR: 3:33   class-name-pascal       import { UnitTestService } from './unit-test.service';
ERROR: 5:1    class-name-pascal       import { TestBed } from '@angular/core/testing';

import { UnitTestService } from './unit-test.service';

describe('UnitTestService', () => {
  let service: UnitTestService;

  beforeEach(() => {
    TestBed.configureTestingModule({});
    service = TestBed.inject(UnitTestService);
  });

  it('should be created', () => {
    expect(service).toBeTruthy();
  });
});

ERROR: 5:1    class-name-pascal       describe('UnitTestService', () => {
  let service: UnitTestService;

  beforeEach(() => {
    TestBed.configureTestingModule({});
    service = TestBed.inject(UnitTestService);
  });

  it('should be created', () => {
    expect(service).toBeTruthy();
  });
});
ERROR: 5:1    class-name-pascal       describe('UnitTestService', () => {
  let service: UnitTestService;

  beforeEach(() => {
    TestBed.configureTestingModule({});
    service = TestBed.inject(UnitTestService);
  });

  it('should be created', () => {
    expect(service).toBeTruthy();
  });
})
ERROR: 5:10   class-name-pascal       describe('UnitTestService', () => {
  let service: UnitTestService;

  beforeEach(() => {
    TestBed.configureTestingModule({});
    service = TestBed.inject(UnitTestService);
  });

  it('should be created', () => {
    expect(service).toBeTruthy();
  });
})
ERROR: 5:29   class-name-pascal       describe('UnitTestService', () => {
  let service: UnitTestService;

  beforeEach(() => {
    TestBed.configureTestingModule({});
    service = TestBed.inject(UnitTestService);
  });

  it('should be created', () => {
    expect(service).toBeTruthy();
  });
})
ERROR: 5:32   class-name-pascal       () => {
  let service: UnitTestService;

  beforeEach(() => {
    TestBed.configureTestingModule({});
    service = TestBed.inject(UnitTestService);
  });

  it('should be created', () => {
    expect(service).toBeTruthy();
  });
}
ERROR: 5:35   class-name-pascal       () => {
  let service: UnitTestService;

  beforeEach(() => {
    TestBed.configureTestingModule({});
    service = TestBed.inject(UnitTestService);
  });

  it('should be created', () => {
    expect(service).toBeTruthy();
  });
}
ERROR: 6:3    class-name-pascal       {
  let service: UnitTestService;

  beforeEach(() => {
    TestBed.configureTestingModule({});
    service = TestBed.inject(UnitTestService);
  });

  it('should be created', () => {
    expect(service).toBeTruthy();
  });
}
ERROR: 6:3    class-name-pascal       let service: UnitTestService;
ERROR: 6:7    class-name-pascal       let service: UnitTestService
ERROR: 6:7    class-name-pascal       service: UnitTestService
ERROR: 6:16   class-name-pascal       service: UnitTestService
ERROR: 6:16   class-name-pascal       UnitTestService
ERROR: 8:3    class-name-pascal       {
  let service: UnitTestService;

  beforeEach(() => {
    TestBed.configureTestingModule({});
    service = TestBed.inject(UnitTestService);
  });

  it('should be created', () => {
    expect(service).toBeTruthy();
  });
}
ERROR: 8:3    class-name-pascal       beforeEach(() => {
    TestBed.configureTestingModule({});
    service = TestBed.inject(UnitTestService);
  });
ERROR: 8:3    class-name-pascal       beforeEach(() => {
    TestBed.configureTestingModule({});
    service = TestBed.inject(UnitTestService);
  })
ERROR: 8:14   class-name-pascal       beforeEach(() => {
    TestBed.configureTestingModule({});
    service = TestBed.inject(UnitTestService);
  })
ERROR: 8:17   class-name-pascal       () => {
    TestBed.configureTestingModule({});
    service = TestBed.inject(UnitTestService);
  }
ERROR: 8:20   class-name-pascal       () => {
    TestBed.configureTestingModule({});
    service = TestBed.inject(UnitTestService);
  }
ERROR: 9:5    class-name-pascal       {
    TestBed.configureTestingModule({});
    service = TestBed.inject(UnitTestService);
  }
ERROR: 9:5    class-name-pascal       TestBed.configureTestingModule({});
ERROR: 9:5    class-name-pascal       TestBed.configureTestingModule({})
ERROR: 9:5    class-name-pascal       TestBed.configureTestingModule
ERROR: 9:13   class-name-pascal       TestBed.configureTestingModule
ERROR: 9:36   class-name-pascal       TestBed.configureTestingModule({})
ERROR: 10:5   class-name-pascal       {
    TestBed.configureTestingModule({});
    service = TestBed.inject(UnitTestService);
  }
ERROR: 10:5   class-name-pascal       service = TestBed.inject(UnitTestService);
ERROR: 10:5   class-name-pascal       service = TestBed.inject(UnitTestService)
ERROR: 10:13  class-name-pascal       service = TestBed.inject(UnitTestService)
ERROR: 10:15  class-name-pascal       service = TestBed.inject(UnitTestService)
ERROR: 10:15  class-name-pascal       TestBed.inject(UnitTestService)
ERROR: 10:15  class-name-pascal       TestBed.inject
ERROR: 10:23  class-name-pascal       TestBed.inject
ERROR: 10:30  class-name-pascal       TestBed.inject(UnitTestService)
ERROR: 13:3   class-name-pascal       {
  let service: UnitTestService;

  beforeEach(() => {
    TestBed.configureTestingModule({});
    service = TestBed.inject(UnitTestService);
  });

  it('should be created', () => {
    expect(service).toBeTruthy();
  });
}
ERROR: 13:3   class-name-pascal       it('should be created', () => {
    expect(service).toBeTruthy();
  });
ERROR: 13:3   class-name-pascal       it('should be created', () => {
    expect(service).toBeTruthy();
  })
ERROR: 13:6   class-name-pascal       it('should be created', () => {
    expect(service).toBeTruthy();
  })
ERROR: 13:27  class-name-pascal       it('should be created', () => {
    expect(service).toBeTruthy();
  })
ERROR: 13:30  class-name-pascal       () => {
    expect(service).toBeTruthy();
  }
ERROR: 13:33  class-name-pascal       () => {
    expect(service).toBeTruthy();
  }
ERROR: 14:5   class-name-pascal       {
    expect(service).toBeTruthy();
  }
ERROR: 14:5   class-name-pascal       expect(service).toBeTruthy();
ERROR: 14:5   class-name-pascal       expect(service).toBeTruthy()
ERROR: 14:5   class-name-pascal       expect(service).toBeTruthy
ERROR: 14:5   class-name-pascal       expect(service)
ERROR: 14:12  class-name-pascal       expect(service)
ERROR: 14:21  class-name-pascal       expect(service).toBeTruthy
ERROR: 17:1   class-name-pascal       import { TestBed } from '@angular/core/testing';

import { UnitTestService } from './unit-test.service';

describe('UnitTestService', () => {
  let service: UnitTestService;

  beforeEach(() => {
    TestBed.configureTestingModule({});
    service = TestBed.inject(UnitTestService);
  });

  it('should be created', () => {
    expect(service).toBeTruthy();
  });
});


/home/vinay/projects/Angular-Testing-Specs/src/services/unit-test.service.ts:1:1
ERROR: 1:1    class-name-pascal       import { Injectable } from '@angular/core';

@Injectable({
  providedIn: 'root'
})
export class UnitTestService {

  constructor() { }
}

ERROR: 1:8    class-name-pascal       import { Injectable } from '@angular/core';
ERROR: 1:8    class-name-pascal       { Injectable }
ERROR: 1:10   class-name-pascal       { Injectable }
ERROR: 1:10   class-name-pascal       Injectable
ERROR: 1:28   class-name-pascal       import { Injectable } from '@angular/core';
ERROR: 3:1    class-name-pascal       import { Injectable } from '@angular/core';

@Injectable({
  providedIn: 'root'
})
export class UnitTestService {

  constructor() { }
}

ERROR: 3:2    class-name-pascal       @Injectable({
  providedIn: 'root'
})
ERROR: 3:2    class-name-pascal       Injectable({
  providedIn: 'root'
})
ERROR: 3:13   class-name-pascal       Injectable({
  providedIn: 'root'
})
ERROR: 4:3    class-name-pascal       {
  providedIn: 'root'
}
ERROR: 4:3    class-name-pascal       providedIn: 'root'
ERROR: 4:15   class-name-pascal       providedIn: 'root'
ERROR: 6:1    class-name-pascal       @Injectable({
  providedIn: 'root'
})
export class UnitTestService {

  constructor() { }
}
ERROR: 6:14   class-name-pascal       @Injectable({
  providedIn: 'root'
})
export class UnitTestService {

  constructor() { }
}
ERROR: 8:3    class-name-pascal       @Injectable({
  providedIn: 'root'
})
export class UnitTestService {

  constructor() { }
}
ERROR: 8:17   class-name-pascal       constructor() { }
ERROR: 10:1   class-name-pascal       import { Injectable } from '@angular/core';

@Injectable({
  providedIn: 'root'
})
export class UnitTestService {

  constructor() { }
}


/home/vinay/projects/Angular-Testing-Specs/src/test.ts:3:1
ERROR: 3:1    class-name-pascal       import 'zone.js/dist/zone-testing';
import { getTestBed } from '@angular/core/testing';
import {
  BrowserDynamicTestingModule,
  platformBrowserDynamicTesting
} from '@angular/platform-browser-dynamic/testing';

declare const require: {
  context(path: string, deep?: boolean, filter?: RegExp): {
    keys(): string[];
    <T>(id: string): T;
  };
};

// First, initialize the Angular testing environment.
getTestBed().initTestEnvironment(
  BrowserDynamicTestingModule,
  platformBrowserDynamicTesting()
);
// Then we find all the tests.
const context = require.context('./', true, /\.spec\.ts$/);
// And load the modules.
context.keys().map(context);

ERROR: 3:8    class-name-pascal       import 'zone.js/dist/zone-testing';
ERROR: 4:1    class-name-pascal       import 'zone.js/dist/zone-testing';
import { getTestBed } from '@angular/core/testing';
import {
  BrowserDynamicTestingModule,
  platformBrowserDynamicTesting
} from '@angular/platform-browser-dynamic/testing';

declare const require: {
  context(path: string, deep?: boolean, filter?: RegExp): {
    keys(): string[];
    <T>(id: string): T;
  };
};

// First, initialize the Angular testing environment.
getTestBed().initTestEnvironment(
  BrowserDynamicTestingModule,
  platformBrowserDynamicTesting()
);
// Then we find all the tests.
const context = require.context('./', true, /\.spec\.ts$/);
// And load the modules.
context.keys().map(context);

ERROR: 4:8    class-name-pascal       import { getTestBed } from '@angular/core/testing';
ERROR: 4:8    class-name-pascal       { getTestBed }
ERROR: 4:10   class-name-pascal       { getTestBed }
ERROR: 4:10   class-name-pascal       getTestBed
ERROR: 4:28   class-name-pascal       import { getTestBed } from '@angular/core/testing';
ERROR: 5:1    class-name-pascal       import 'zone.js/dist/zone-testing';
import { getTestBed } from '@angular/core/testing';
import {
  BrowserDynamicTestingModule,
  platformBrowserDynamicTesting
} from '@angular/platform-browser-dynamic/testing';

declare const require: {
  context(path: string, deep?: boolean, filter?: RegExp): {
    keys(): string[];
    <T>(id: string): T;
  };
};

// First, initialize the Angular testing environment.
getTestBed().initTestEnvironment(
  BrowserDynamicTestingModule,
  platformBrowserDynamicTesting()
);
// Then we find all the tests.
const context = require.context('./', true, /\.spec\.ts$/);
// And load the modules.
context.keys().map(context);

ERROR: 5:8    class-name-pascal       import {
  BrowserDynamicTestingModule,
  platformBrowserDynamicTesting
} from '@angular/platform-browser-dynamic/testing';
ERROR: 5:8    class-name-pascal       {
  BrowserDynamicTestingModule,
  platformBrowserDynamicTesting
}
ERROR: 6:3    class-name-pascal       {
  BrowserDynamicTestingModule,
  platformBrowserDynamicTesting
}
ERROR: 6:3    class-name-pascal       BrowserDynamicTestingModule
ERROR: 7:3    class-name-pascal       {
  BrowserDynamicTestingModule,
  platformBrowserDynamicTesting
}
ERROR: 7:3    class-name-pascal       platformBrowserDynamicTesting
ERROR: 8:8    class-name-pascal       import {
  BrowserDynamicTestingModule,
  platformBrowserDynamicTesting
} from '@angular/platform-browser-dynamic/testing';
ERROR: 10:1   class-name-pascal       import 'zone.js/dist/zone-testing';
import { getTestBed } from '@angular/core/testing';
import {
  BrowserDynamicTestingModule,
  platformBrowserDynamicTesting
} from '@angular/platform-browser-dynamic/testing';

declare const require: {
  context(path: string, deep?: boolean, filter?: RegExp): {
    keys(): string[];
    <T>(id: string): T;
  };
};

// First, initialize the Angular testing environment.
getTestBed().initTestEnvironment(
  BrowserDynamicTestingModule,
  platformBrowserDynamicTesting()
);
// Then we find all the tests.
const context = require.context('./', true, /\.spec\.ts$/);
// And load the modules.
context.keys().map(context);

ERROR: 10:1   class-name-pascal       declare const require: {
  context(path: string, deep?: boolean, filter?: RegExp): {
    keys(): string[];
    <T>(id: string): T;
  };
};
ERROR: 10:9   class-name-pascal       declare const require: {
  context(path: string, deep?: boolean, filter?: RegExp): {
    keys(): string[];
    <T>(id: string): T;
  };
};
ERROR: 10:15  class-name-pascal       const require: {
  context(path: string, deep?: boolean, filter?: RegExp): {
    keys(): string[];
    <T>(id: string): T;
  };
}
ERROR: 10:15  class-name-pascal       require: {
  context(path: string, deep?: boolean, filter?: RegExp): {
    keys(): string[];
    <T>(id: string): T;
  };
}
ERROR: 10:24  class-name-pascal       require: {
  context(path: string, deep?: boolean, filter?: RegExp): {
    keys(): string[];
    <T>(id: string): T;
  };
}
ERROR: 11:3   class-name-pascal       {
  context(path: string, deep?: boolean, filter?: RegExp): {
    keys(): string[];
    <T>(id: string): T;
  };
}
ERROR: 11:3   class-name-pascal       context(path: string, deep?: boolean, filter?: RegExp): {
    keys(): string[];
    <T>(id: string): T;
  };
ERROR: 11:11  class-name-pascal       context(path: string, deep?: boolean, filter?: RegExp): {
    keys(): string[];
    <T>(id: string): T;
  };
ERROR: 11:11  class-name-pascal       path: string
ERROR: 11:17  class-name-pascal       path: string
ERROR: 11:25  class-name-pascal       context(path: string, deep?: boolean, filter?: RegExp): {
    keys(): string[];
    <T>(id: string): T;
  };
ERROR: 11:25  class-name-pascal       deep?: boolean
ERROR: 11:29  class-name-pascal       deep?: boolean
ERROR: 11:32  class-name-pascal       deep?: boolean
ERROR: 11:41  class-name-pascal       context(path: string, deep?: boolean, filter?: RegExp): {
    keys(): string[];
    <T>(id: string): T;
  };
ERROR: 11:41  class-name-pascal       filter?: RegExp
ERROR: 11:47  class-name-pascal       filter?: RegExp
ERROR: 11:50  class-name-pascal       filter?: RegExp
ERROR: 11:50  class-name-pascal       RegExp
ERROR: 11:59  class-name-pascal       context(path: string, deep?: boolean, filter?: RegExp): {
    keys(): string[];
    <T>(id: string): T;
  };
ERROR: 12:5   class-name-pascal       {
    keys(): string[];
    <T>(id: string): T;
  }
ERROR: 12:5   class-name-pascal       keys(): string[];
ERROR: 12:13  class-name-pascal       keys(): string[];
ERROR: 12:13  class-name-pascal       string[]
ERROR: 13:5   class-name-pascal       {
    keys(): string[];
    <T>(id: string): T;
  }
ERROR: 13:6   class-name-pascal       <T>(id: string): T;
ERROR: 13:6   class-name-pascal       T
ERROR: 13:9   class-name-pascal       <T>(id: string): T;
ERROR: 13:9   class-name-pascal       id: string
ERROR: 13:13  class-name-pascal       id: string
ERROR: 13:22  class-name-pascal       <T>(id: string): T;
ERROR: 13:22  class-name-pascal       T
ERROR: 18:1   class-name-pascal       import 'zone.js/dist/zone-testing';
import { getTestBed } from '@angular/core/testing';
import {
  BrowserDynamicTestingModule,
  platformBrowserDynamicTesting
} from '@angular/platform-browser-dynamic/testing';

declare const require: {
  context(path: string, deep?: boolean, filter?: RegExp): {
    keys(): string[];
    <T>(id: string): T;
  };
};

// First, initialize the Angular testing environment.
getTestBed().initTestEnvironment(
  BrowserDynamicTestingModule,
  platformBrowserDynamicTesting()
);
// Then we find all the tests.
const context = require.context('./', true, /\.spec\.ts$/);
// And load the modules.
context.keys().map(context);

ERROR: 18:1   class-name-pascal       getTestBed().initTestEnvironment(
  BrowserDynamicTestingModule,
  platformBrowserDynamicTesting()
);
ERROR: 18:1   class-name-pascal       getTestBed().initTestEnvironment(
  BrowserDynamicTestingModule,
  platformBrowserDynamicTesting()
)
ERROR: 18:1   class-name-pascal       getTestBed().initTestEnvironment
ERROR: 18:1   class-name-pascal       getTestBed()
ERROR: 18:14  class-name-pascal       getTestBed().initTestEnvironment
ERROR: 19:3   class-name-pascal       getTestBed().initTestEnvironment(
  BrowserDynamicTestingModule,
  platformBrowserDynamicTesting()
)
ERROR: 20:3   class-name-pascal       getTestBed().initTestEnvironment(
  BrowserDynamicTestingModule,
  platformBrowserDynamicTesting()
)
ERROR: 20:3   class-name-pascal       platformBrowserDynamicTesting()
ERROR: 23:1   class-name-pascal       import 'zone.js/dist/zone-testing';
import { getTestBed } from '@angular/core/testing';
import {
  BrowserDynamicTestingModule,
  platformBrowserDynamicTesting
} from '@angular/platform-browser-dynamic/testing';

declare const require: {
  context(path: string, deep?: boolean, filter?: RegExp): {
    keys(): string[];
    <T>(id: string): T;
  };
};

// First, initialize the Angular testing environment.
getTestBed().initTestEnvironment(
  BrowserDynamicTestingModule,
  platformBrowserDynamicTesting()
);
// Then we find all the tests.
const context = require.context('./', true, /\.spec\.ts$/);
// And load the modules.
context.keys().map(context);

ERROR: 23:1   class-name-pascal       const context = require.context('./', true, /\.spec\.ts$/);
ERROR: 23:7   class-name-pascal       const context = require.context('./', true, /\.spec\.ts$/)
ERROR: 23:7   class-name-pascal       context = require.context('./', true, /\.spec\.ts$/)
ERROR: 23:17  class-name-pascal       context = require.context('./', true, /\.spec\.ts$/)
ERROR: 23:17  class-name-pascal       require.context('./', true, /\.spec\.ts$/)
ERROR: 23:17  class-name-pascal       require.context
ERROR: 23:25  class-name-pascal       require.context
ERROR: 23:33  class-name-pascal       require.context('./', true, /\.spec\.ts$/)
ERROR: 23:39  class-name-pascal       require.context('./', true, /\.spec\.ts$/)
ERROR: 23:45  class-name-pascal       require.context('./', true, /\.spec\.ts$/)
ERROR: 25:1   class-name-pascal       import 'zone.js/dist/zone-testing';
import { getTestBed } from '@angular/core/testing';
import {
  BrowserDynamicTestingModule,
  platformBrowserDynamicTesting
} from '@angular/platform-browser-dynamic/testing';

declare const require: {
  context(path: string, deep?: boolean, filter?: RegExp): {
    keys(): string[];
    <T>(id: string): T;
  };
};

// First, initialize the Angular testing environment.
getTestBed().initTestEnvironment(
  BrowserDynamicTestingModule,
  platformBrowserDynamicTesting()
);
// Then we find all the tests.
const context = require.context('./', true, /\.spec\.ts$/);
// And load the modules.
context.keys().map(context);

ERROR: 25:1   class-name-pascal       context.keys().map(context);
ERROR: 25:1   class-name-pascal       context.keys().map(context)
ERROR: 25:1   class-name-pascal       context.keys().map
ERROR: 25:1   class-name-pascal       context.keys()
ERROR: 25:1   class-name-pascal       context.keys
ERROR: 25:9   class-name-pascal       context.keys
ERROR: 25:16  class-name-pascal       context.keys().map
ERROR: 25:20  class-name-pascal       context.keys().map(context)
ERROR: 26:1   class-name-pascal       import 'zone.js/dist/zone-testing';
import { getTestBed } from '@angular/core/testing';
import {
  BrowserDynamicTestingModule,
  platformBrowserDynamicTesting
} from '@angular/platform-browser-dynamic/testing';

declare const require: {
  context(path: string, deep?: boolean, filter?: RegExp): {
    keys(): string[];
    <T>(id: string): T;
  };
};

// First, initialize the Angular testing environment.
getTestBed().initTestEnvironment(
  BrowserDynamicTestingModule,
  platformBrowserDynamicTesting()
);
// Then we find all the tests.
const context = require.context('./', true, /\.spec\.ts$/);
// And load the modules.
context.keys().map(context);


/home/vinay/projects/Angular-Testing-Specs/src/testing/UnitTest.ts:1:1
ERROR: 1:1    class-name-pascal       import { Type } from '@angular/compiler';
import { Component } from '@angular/core';
import { ComponentFixture, TestBed } from '@angular/core/testing';
import { FormGroup } from '@angular/forms';
import { AppComponent } from 'src/app/app.component';
// declare var fixture;
// declare var app;

export class UniTest {
    name;
    app;
    constructor(public t: any, public title: string) {

    }

    executeMethod(fn): void {
        // app[fn]();
    }

    testTitleRendering(title): any {
        expect(this.t.title).toEqual(title);
    }
    testFormStatus(form): any {
        expect(this.t[form].valid).toBeFalsy();
    }
    testFormAfterValue(form): any {
        const controls = this.t[form].controls;
        // tslint:disable-next-line: forin
        for (const key in controls) {
            this.t[form].get(key).setValue('sample value');
        }
        expect(this.t[form].valid).toBeTruthy();
    }

    testFormControlForRequiredError(form, formControlName): any {
        expect(this.t[form].get(formControlName).valid).toBeFalsy();
    }
    testFormControlForRequiredErrorAfterValue(form, formControlName): any {
        this.t[form].get(formControlName).setValue('test');
        expect(this.t[form].get(formControlName).valid).toBeTruthy();
    }

    checkMethodReturnType(name, returnType): any {
        const data = this.t[name]();
        expect(typeof data).toEqual(returnType);
    }

}

ERROR: 1:8    class-name-pascal       import { Type } from '@angular/compiler';
ERROR: 1:8    class-name-pascal       { Type }
ERROR: 1:10   class-name-pascal       { Type }
ERROR: 1:10   class-name-pascal       Type
ERROR: 1:22   class-name-pascal       import { Type } from '@angular/compiler';
ERROR: 2:1    class-name-pascal       import { Type } from '@angular/compiler';
import { Component } from '@angular/core';
import { ComponentFixture, TestBed } from '@angular/core/testing';
import { FormGroup } from '@angular/forms';
import { AppComponent } from 'src/app/app.component';
// declare var fixture;
// declare var app;

export class UniTest {
    name;
    app;
    constructor(public t: any, public title: string) {

    }

    executeMethod(fn): void {
        // app[fn]();
    }

    testTitleRendering(title): any {
        expect(this.t.title).toEqual(title);
    }
    testFormStatus(form): any {
        expect(this.t[form].valid).toBeFalsy();
    }
    testFormAfterValue(form): any {
        const controls = this.t[form].controls;
        // tslint:disable-next-line: forin
        for (const key in controls) {
            this.t[form].get(key).setValue('sample value');
        }
        expect(this.t[form].valid).toBeTruthy();
    }

    testFormControlForRequiredError(form, formControlName): any {
        expect(this.t[form].get(formControlName).valid).toBeFalsy();
    }
    testFormControlForRequiredErrorAfterValue(form, formControlName): any {
        this.t[form].get(formControlName).setValue('test');
        expect(this.t[form].get(formControlName).valid).toBeTruthy();
    }

    checkMethodReturnType(name, returnType): any {
        const data = this.t[name]();
        expect(typeof data).toEqual(returnType);
    }

}

ERROR: 2:8    class-name-pascal       import { Component } from '@angular/core';
ERROR: 2:8    class-name-pascal       { Component }
ERROR: 2:10   class-name-pascal       { Component }
ERROR: 2:10   class-name-pascal       Component
ERROR: 2:27   class-name-pascal       import { Component } from '@angular/core';
ERROR: 3:1    class-name-pascal       import { Type } from '@angular/compiler';
import { Component } from '@angular/core';
import { ComponentFixture, TestBed } from '@angular/core/testing';
import { FormGroup } from '@angular/forms';
import { AppComponent } from 'src/app/app.component';
// declare var fixture;
// declare var app;

export class UniTest {
    name;
    app;
    constructor(public t: any, public title: string) {

    }

    executeMethod(fn): void {
        // app[fn]();
    }

    testTitleRendering(title): any {
        expect(this.t.title).toEqual(title);
    }
    testFormStatus(form): any {
        expect(this.t[form].valid).toBeFalsy();
    }
    testFormAfterValue(form): any {
        const controls = this.t[form].controls;
        // tslint:disable-next-line: forin
        for (const key in controls) {
            this.t[form].get(key).setValue('sample value');
        }
        expect(this.t[form].valid).toBeTruthy();
    }

    testFormControlForRequiredError(form, formControlName): any {
        expect(this.t[form].get(formControlName).valid).toBeFalsy();
    }
    testFormControlForRequiredErrorAfterValue(form, formControlName): any {
        this.t[form].get(formControlName).setValue('test');
        expect(this.t[form].get(formControlName).valid).toBeTruthy();
    }

    checkMethodReturnType(name, returnType): any {
        const data = this.t[name]();
        expect(typeof data).toEqual(returnType);
    }

}

ERROR: 3:8    class-name-pascal       import { ComponentFixture, TestBed } from '@angular/core/testing';
ERROR: 3:8    class-name-pascal       { ComponentFixture, TestBed }
ERROR: 3:10   class-name-pascal       { ComponentFixture, TestBed }
ERROR: 3:10   class-name-pascal       ComponentFixture
ERROR: 3:28   class-name-pascal       { ComponentFixture, TestBed }
ERROR: 3:28   class-name-pascal       TestBed
ERROR: 3:43   class-name-pascal       import { ComponentFixture, TestBed } from '@angular/core/testing';
ERROR: 4:1    class-name-pascal       import { Type } from '@angular/compiler';
import { Component } from '@angular/core';
import { ComponentFixture, TestBed } from '@angular/core/testing';
import { FormGroup } from '@angular/forms';
import { AppComponent } from 'src/app/app.component';
// declare var fixture;
// declare var app;

export class UniTest {
    name;
    app;
    constructor(public t: any, public title: string) {

    }

    executeMethod(fn): void {
        // app[fn]();
    }

    testTitleRendering(title): any {
        expect(this.t.title).toEqual(title);
    }
    testFormStatus(form): any {
        expect(this.t[form].valid).toBeFalsy();
    }
    testFormAfterValue(form): any {
        const controls = this.t[form].controls;
        // tslint:disable-next-line: forin
        for (const key in controls) {
            this.t[form].get(key).setValue('sample value');
        }
        expect(this.t[form].valid).toBeTruthy();
    }

    testFormControlForRequiredError(form, formControlName): any {
        expect(this.t[form].get(formControlName).valid).toBeFalsy();
    }
    testFormControlForRequiredErrorAfterValue(form, formControlName): any {
        this.t[form].get(formControlName).setValue('test');
        expect(this.t[form].get(formControlName).valid).toBeTruthy();
    }

    checkMethodReturnType(name, returnType): any {
        const data = this.t[name]();
        expect(typeof data).toEqual(returnType);
    }

}

ERROR: 4:8    class-name-pascal       import { FormGroup } from '@angular/forms';
ERROR: 4:8    class-name-pascal       { FormGroup }
ERROR: 4:10   class-name-pascal       { FormGroup }
ERROR: 4:10   class-name-pascal       FormGroup
ERROR: 4:27   class-name-pascal       import { FormGroup } from '@angular/forms';
ERROR: 5:1    class-name-pascal       import { Type } from '@angular/compiler';
import { Component } from '@angular/core';
import { ComponentFixture, TestBed } from '@angular/core/testing';
import { FormGroup } from '@angular/forms';
import { AppComponent } from 'src/app/app.component';
// declare var fixture;
// declare var app;

export class UniTest {
    name;
    app;
    constructor(public t: any, public title: string) {

    }

    executeMethod(fn): void {
        // app[fn]();
    }

    testTitleRendering(title): any {
        expect(this.t.title).toEqual(title);
    }
    testFormStatus(form): any {
        expect(this.t[form].valid).toBeFalsy();
    }
    testFormAfterValue(form): any {
        const controls = this.t[form].controls;
        // tslint:disable-next-line: forin
        for (const key in controls) {
            this.t[form].get(key).setValue('sample value');
        }
        expect(this.t[form].valid).toBeTruthy();
    }

    testFormControlForRequiredError(form, formControlName): any {
        expect(this.t[form].get(formControlName).valid).toBeFalsy();
    }
    testFormControlForRequiredErrorAfterValue(form, formControlName): any {
        this.t[form].get(formControlName).setValue('test');
        expect(this.t[form].get(formControlName).valid).toBeTruthy();
    }

    checkMethodReturnType(name, returnType): any {
        const data = this.t[name]();
        expect(typeof data).toEqual(returnType);
    }

}

ERROR: 5:8    class-name-pascal       import { AppComponent } from 'src/app/app.component';
ERROR: 5:8    class-name-pascal       { AppComponent }
ERROR: 5:10   class-name-pascal       { AppComponent }
ERROR: 5:10   class-name-pascal       AppComponent
ERROR: 5:30   class-name-pascal       import { AppComponent } from 'src/app/app.component';
ERROR: 9:1    class-name-pascal       import { Type } from '@angular/compiler';
import { Component } from '@angular/core';
import { ComponentFixture, TestBed } from '@angular/core/testing';
import { FormGroup } from '@angular/forms';
import { AppComponent } from 'src/app/app.component';
// declare var fixture;
// declare var app;

export class UniTest {
    name;
    app;
    constructor(public t: any, public title: string) {

    }

    executeMethod(fn): void {
        // app[fn]();
    }

    testTitleRendering(title): any {
        expect(this.t.title).toEqual(title);
    }
    testFormStatus(form): any {
        expect(this.t[form].valid).toBeFalsy();
    }
    testFormAfterValue(form): any {
        const controls = this.t[form].controls;
        // tslint:disable-next-line: forin
        for (const key in controls) {
            this.t[form].get(key).setValue('sample value');
        }
        expect(this.t[form].valid).toBeTruthy();
    }

    testFormControlForRequiredError(form, formControlName): any {
        expect(this.t[form].get(formControlName).valid).toBeFalsy();
    }
    testFormControlForRequiredErrorAfterValue(form, formControlName): any {
        this.t[form].get(formControlName).setValue('test');
        expect(this.t[form].get(formControlName).valid).toBeTruthy();
    }

    checkMethodReturnType(name, returnType): any {
        const data = this.t[name]();
        expect(typeof data).toEqual(returnType);
    }

}

ERROR: 9:1    class-name-pascal       export class UniTest {
    name;
    app;
    constructor(public t: any, public title: string) {

    }

    executeMethod(fn): void {
        // app[fn]();
    }

    testTitleRendering(title): any {
        expect(this.t.title).toEqual(title);
    }
    testFormStatus(form): any {
        expect(this.t[form].valid).toBeFalsy();
    }
    testFormAfterValue(form): any {
        const controls = this.t[form].controls;
        // tslint:disable-next-line: forin
        for (const key in controls) {
            this.t[form].get(key).setValue('sample value');
        }
        expect(this.t[form].valid).toBeTruthy();
    }

    testFormControlForRequiredError(form, formControlName): any {
        expect(this.t[form].get(formControlName).valid).toBeFalsy();
    }
    testFormControlForRequiredErrorAfterValue(form, formControlName): any {
        this.t[form].get(formControlName).setValue('test');
        expect(this.t[form].get(formControlName).valid).toBeTruthy();
    }

    checkMethodReturnType(name, returnType): any {
        const data = this.t[name]();
        expect(typeof data).toEqual(returnType);
    }

}
ERROR: 9:14   class-name-pascal       export class UniTest {
    name;
    app;
    constructor(public t: any, public title: string) {

    }

    executeMethod(fn): void {
        // app[fn]();
    }

    testTitleRendering(title): any {
        expect(this.t.title).toEqual(title);
    }
    testFormStatus(form): any {
        expect(this.t[form].valid).toBeFalsy();
    }
    testFormAfterValue(form): any {
        const controls = this.t[form].controls;
        // tslint:disable-next-line: forin
        for (const key in controls) {
            this.t[form].get(key).setValue('sample value');
        }
        expect(this.t[form].valid).toBeTruthy();
    }

    testFormControlForRequiredError(form, formControlName): any {
        expect(this.t[form].get(formControlName).valid).toBeFalsy();
    }
    testFormControlForRequiredErrorAfterValue(form, formControlName): any {
        this.t[form].get(formControlName).setValue('test');
        expect(this.t[form].get(formControlName).valid).toBeTruthy();
    }

    checkMethodReturnType(name, returnType): any {
        const data = this.t[name]();
        expect(typeof data).toEqual(returnType);
    }

}
ERROR: 10:5   class-name-pascal       export class UniTest {
    name;
    app;
    constructor(public t: any, public title: string) {

    }

    executeMethod(fn): void {
        // app[fn]();
    }

    testTitleRendering(title): any {
        expect(this.t.title).toEqual(title);
    }
    testFormStatus(form): any {
        expect(this.t[form].valid).toBeFalsy();
    }
    testFormAfterValue(form): any {
        const controls = this.t[form].controls;
        // tslint:disable-next-line: forin
        for (const key in controls) {
            this.t[form].get(key).setValue('sample value');
        }
        expect(this.t[form].valid).toBeTruthy();
    }

    testFormControlForRequiredError(form, formControlName): any {
        expect(this.t[form].get(formControlName).valid).toBeFalsy();
    }
    testFormControlForRequiredErrorAfterValue(form, formControlName): any {
        this.t[form].get(formControlName).setValue('test');
        expect(this.t[form].get(formControlName).valid).toBeTruthy();
    }

    checkMethodReturnType(name, returnType): any {
        const data = this.t[name]();
        expect(typeof data).toEqual(returnType);
    }

}
ERROR: 10:5   class-name-pascal       name;
ERROR: 11:5   class-name-pascal       export class UniTest {
    name;
    app;
    constructor(public t: any, public title: string) {

    }

    executeMethod(fn): void {
        // app[fn]();
    }

    testTitleRendering(title): any {
        expect(this.t.title).toEqual(title);
    }
    testFormStatus(form): any {
        expect(this.t[form].valid).toBeFalsy();
    }
    testFormAfterValue(form): any {
        const controls = this.t[form].controls;
        // tslint:disable-next-line: forin
        for (const key in controls) {
            this.t[form].get(key).setValue('sample value');
        }
        expect(this.t[form].valid).toBeTruthy();
    }

    testFormControlForRequiredError(form, formControlName): any {
        expect(this.t[form].get(formControlName).valid).toBeFalsy();
    }
    testFormControlForRequiredErrorAfterValue(form, formControlName): any {
        this.t[form].get(formControlName).setValue('test');
        expect(this.t[form].get(formControlName).valid).toBeTruthy();
    }

    checkMethodReturnType(name, returnType): any {
        const data = this.t[name]();
        expect(typeof data).toEqual(returnType);
    }

}
ERROR: 11:5   class-name-pascal       app;
ERROR: 12:5   class-name-pascal       export class UniTest {
    name;
    app;
    constructor(public t: any, public title: string) {

    }

    executeMethod(fn): void {
        // app[fn]();
    }

    testTitleRendering(title): any {
        expect(this.t.title).toEqual(title);
    }
    testFormStatus(form): any {
        expect(this.t[form].valid).toBeFalsy();
    }
    testFormAfterValue(form): any {
        const controls = this.t[form].controls;
        // tslint:disable-next-line: forin
        for (const key in controls) {
            this.t[form].get(key).setValue('sample value');
        }
        expect(this.t[form].valid).toBeTruthy();
    }

    testFormControlForRequiredError(form, formControlName): any {
        expect(this.t[form].get(formControlName).valid).toBeFalsy();
    }
    testFormControlForRequiredErrorAfterValue(form, formControlName): any {
        this.t[form].get(formControlName).setValue('test');
        expect(this.t[form].get(formControlName).valid).toBeTruthy();
    }

    checkMethodReturnType(name, returnType): any {
        const data = this.t[name]();
        expect(typeof data).toEqual(returnType);
    }

}
ERROR: 12:17  class-name-pascal       constructor(public t: any, public title: string) {

    }
ERROR: 12:17  class-name-pascal       public t: any
ERROR: 12:24  class-name-pascal       public t: any
ERROR: 12:27  class-name-pascal       public t: any
ERROR: 12:32  class-name-pascal       constructor(public t: any, public title: string) {

    }
ERROR: 12:32  class-name-pascal       public title: string
ERROR: 12:39  class-name-pascal       public title: string
ERROR: 12:46  class-name-pascal       public title: string
ERROR: 12:54  class-name-pascal       constructor(public t: any, public title: string) {

    }
ERROR: 16:5   class-name-pascal       export class UniTest {
    name;
    app;
    constructor(public t: any, public title: string) {

    }

    executeMethod(fn): void {
        // app[fn]();
    }

    testTitleRendering(title): any {
        expect(this.t.title).toEqual(title);
    }
    testFormStatus(form): any {
        expect(this.t[form].valid).toBeFalsy();
    }
    testFormAfterValue(form): any {
        const controls = this.t[form].controls;
        // tslint:disable-next-line: forin
        for (const key in controls) {
            this.t[form].get(key).setValue('sample value');
        }
        expect(this.t[form].valid).toBeTruthy();
    }

    testFormControlForRequiredError(form, formControlName): any {
        expect(this.t[form].get(formControlName).valid).toBeFalsy();
    }
    testFormControlForRequiredErrorAfterValue(form, formControlName): any {
        this.t[form].get(formControlName).setValue('test');
        expect(this.t[form].get(formControlName).valid).toBeTruthy();
    }

    checkMethodReturnType(name, returnType): any {
        const data = this.t[name]();
        expect(typeof data).toEqual(returnType);
    }

}
ERROR: 16:5   class-name-pascal       executeMethod(fn): void {
        // app[fn]();
    }
ERROR: 16:19  class-name-pascal       executeMethod(fn): void {
        // app[fn]();
    }
ERROR: 16:19  class-name-pascal       fn
ERROR: 16:24  class-name-pascal       executeMethod(fn): void {
        // app[fn]();
    }
ERROR: 16:29  class-name-pascal       executeMethod(fn): void {
        // app[fn]();
    }
ERROR: 20:5   class-name-pascal       export class UniTest {
    name;
    app;
    constructor(public t: any, public title: string) {

    }

    executeMethod(fn): void {
        // app[fn]();
    }

    testTitleRendering(title): any {
        expect(this.t.title).toEqual(title);
    }
    testFormStatus(form): any {
        expect(this.t[form].valid).toBeFalsy();
    }
    testFormAfterValue(form): any {
        const controls = this.t[form].controls;
        // tslint:disable-next-line: forin
        for (const key in controls) {
            this.t[form].get(key).setValue('sample value');
        }
        expect(this.t[form].valid).toBeTruthy();
    }

    testFormControlForRequiredError(form, formControlName): any {
        expect(this.t[form].get(formControlName).valid).toBeFalsy();
    }
    testFormControlForRequiredErrorAfterValue(form, formControlName): any {
        this.t[form].get(formControlName).setValue('test');
        expect(this.t[form].get(formControlName).valid).toBeTruthy();
    }

    checkMethodReturnType(name, returnType): any {
        const data = this.t[name]();
        expect(typeof data).toEqual(returnType);
    }

}
ERROR: 20:5   class-name-pascal       testTitleRendering(title): any {
        expect(this.t.title).toEqual(title);
    }
ERROR: 20:24  class-name-pascal       testTitleRendering(title): any {
        expect(this.t.title).toEqual(title);
    }
ERROR: 20:24  class-name-pascal       title
ERROR: 20:32  class-name-pascal       testTitleRendering(title): any {
        expect(this.t.title).toEqual(title);
    }
ERROR: 20:36  class-name-pascal       testTitleRendering(title): any {
        expect(this.t.title).toEqual(title);
    }
ERROR: 21:9   class-name-pascal       {
        expect(this.t.title).toEqual(title);
    }
ERROR: 21:9   class-name-pascal       expect(this.t.title).toEqual(title);
ERROR: 21:9   class-name-pascal       expect(this.t.title).toEqual(title)
ERROR: 21:9   class-name-pascal       expect(this.t.title).toEqual
ERROR: 21:9   class-name-pascal       expect(this.t.title)
ERROR: 21:16  class-name-pascal       expect(this.t.title)
ERROR: 21:16  class-name-pascal       this.t.title
ERROR: 21:16  class-name-pascal       this.t
ERROR: 21:21  class-name-pascal       this.t
ERROR: 21:23  class-name-pascal       this.t.title
ERROR: 21:30  class-name-pascal       expect(this.t.title).toEqual
ERROR: 21:38  class-name-pascal       expect(this.t.title).toEqual(title)
ERROR: 23:5   class-name-pascal       export class UniTest {
    name;
    app;
    constructor(public t: any, public title: string) {

    }

    executeMethod(fn): void {
        // app[fn]();
    }

    testTitleRendering(title): any {
        expect(this.t.title).toEqual(title);
    }
    testFormStatus(form): any {
        expect(this.t[form].valid).toBeFalsy();
    }
    testFormAfterValue(form): any {
        const controls = this.t[form].controls;
        // tslint:disable-next-line: forin
        for (const key in controls) {
            this.t[form].get(key).setValue('sample value');
        }
        expect(this.t[form].valid).toBeTruthy();
    }

    testFormControlForRequiredError(form, formControlName): any {
        expect(this.t[form].get(formControlName).valid).toBeFalsy();
    }
    testFormControlForRequiredErrorAfterValue(form, formControlName): any {
        this.t[form].get(formControlName).setValue('test');
        expect(this.t[form].get(formControlName).valid).toBeTruthy();
    }

    checkMethodReturnType(name, returnType): any {
        const data = this.t[name]();
        expect(typeof data).toEqual(returnType);
    }

}
ERROR: 23:5   class-name-pascal       testFormStatus(form): any {
        expect(this.t[form].valid).toBeFalsy();
    }
ERROR: 23:20  class-name-pascal       testFormStatus(form): any {
        expect(this.t[form].valid).toBeFalsy();
    }
ERROR: 23:20  class-name-pascal       form
ERROR: 23:27  class-name-pascal       testFormStatus(form): any {
        expect(this.t[form].valid).toBeFalsy();
    }
ERROR: 23:31  class-name-pascal       testFormStatus(form): any {
        expect(this.t[form].valid).toBeFalsy();
    }
ERROR: 24:9   class-name-pascal       {
        expect(this.t[form].valid).toBeFalsy();
    }
ERROR: 24:9   class-name-pascal       expect(this.t[form].valid).toBeFalsy();
ERROR: 24:9   class-name-pascal       expect(this.t[form].valid).toBeFalsy()
ERROR: 24:9   class-name-pascal       expect(this.t[form].valid).toBeFalsy
ERROR: 24:9   class-name-pascal       expect(this.t[form].valid)
ERROR: 24:16  class-name-pascal       expect(this.t[form].valid)
ERROR: 24:16  class-name-pascal       this.t[form].valid
ERROR: 24:16  class-name-pascal       this.t[form]
ERROR: 24:16  class-name-pascal       this.t
ERROR: 24:21  class-name-pascal       this.t
ERROR: 24:23  class-name-pascal       this.t[form]
ERROR: 24:29  class-name-pascal       this.t[form].valid
ERROR: 24:36  class-name-pascal       expect(this.t[form].valid).toBeFalsy
ERROR: 26:5   class-name-pascal       export class UniTest {
    name;
    app;
    constructor(public t: any, public title: string) {

    }

    executeMethod(fn): void {
        // app[fn]();
    }

    testTitleRendering(title): any {
        expect(this.t.title).toEqual(title);
    }
    testFormStatus(form): any {
        expect(this.t[form].valid).toBeFalsy();
    }
    testFormAfterValue(form): any {
        const controls = this.t[form].controls;
        // tslint:disable-next-line: forin
        for (const key in controls) {
            this.t[form].get(key).setValue('sample value');
        }
        expect(this.t[form].valid).toBeTruthy();
    }

    testFormControlForRequiredError(form, formControlName): any {
        expect(this.t[form].get(formControlName).valid).toBeFalsy();
    }
    testFormControlForRequiredErrorAfterValue(form, formControlName): any {
        this.t[form].get(formControlName).setValue('test');
        expect(this.t[form].get(formControlName).valid).toBeTruthy();
    }

    checkMethodReturnType(name, returnType): any {
        const data = this.t[name]();
        expect(typeof data).toEqual(returnType);
    }

}
ERROR: 26:5   class-name-pascal       testFormAfterValue(form): any {
        const controls = this.t[form].controls;
        // tslint:disable-next-line: forin
        for (const key in controls) {
            this.t[form].get(key).setValue('sample value');
        }
        expect(this.t[form].valid).toBeTruthy();
    }
ERROR: 26:24  class-name-pascal       testFormAfterValue(form): any {
        const controls = this.t[form].controls;
        // tslint:disable-next-line: forin
        for (const key in controls) {
            this.t[form].get(key).setValue('sample value');
        }
        expect(this.t[form].valid).toBeTruthy();
    }
ERROR: 26:24  class-name-pascal       form
ERROR: 26:31  class-name-pascal       testFormAfterValue(form): any {
        const controls = this.t[form].controls;
        // tslint:disable-next-line: forin
        for (const key in controls) {
            this.t[form].get(key).setValue('sample value');
        }
        expect(this.t[form].valid).toBeTruthy();
    }
ERROR: 26:35  class-name-pascal       testFormAfterValue(form): any {
        const controls = this.t[form].controls;
        // tslint:disable-next-line: forin
        for (const key in controls) {
            this.t[form].get(key).setValue('sample value');
        }
        expect(this.t[form].valid).toBeTruthy();
    }
ERROR: 27:9   class-name-pascal       {
        const controls = this.t[form].controls;
        // tslint:disable-next-line: forin
        for (const key in controls) {
            this.t[form].get(key).setValue('sample value');
        }
        expect(this.t[form].valid).toBeTruthy();
    }
ERROR: 27:9   class-name-pascal       const controls = this.t[form].controls;
ERROR: 27:15  class-name-pascal       const controls = this.t[form].controls
ERROR: 27:15  class-name-pascal       controls = this.t[form].controls
ERROR: 27:26  class-name-pascal       controls = this.t[form].controls
ERROR: 27:26  class-name-pascal       this.t[form].controls
ERROR: 27:26  class-name-pascal       this.t[form]
ERROR: 27:26  class-name-pascal       this.t
ERROR: 27:31  class-name-pascal       this.t
ERROR: 27:33  class-name-pascal       this.t[form]
ERROR: 27:39  class-name-pascal       this.t[form].controls
ERROR: 29:9   class-name-pascal       {
        const controls = this.t[form].controls;
        // tslint:disable-next-line: forin
        for (const key in controls) {
            this.t[form].get(key).setValue('sample value');
        }
        expect(this.t[form].valid).toBeTruthy();
    }
ERROR: 29:14  class-name-pascal       for (const key in controls) {
            this.t[form].get(key).setValue('sample value');
        }
ERROR: 29:20  class-name-pascal       const key
ERROR: 29:20  class-name-pascal       key
ERROR: 29:27  class-name-pascal       for (const key in controls) {
            this.t[form].get(key).setValue('sample value');
        }
ERROR: 29:37  class-name-pascal       for (const key in controls) {
            this.t[form].get(key).setValue('sample value');
        }
ERROR: 30:13  class-name-pascal       {
            this.t[form].get(key).setValue('sample value');
        }
ERROR: 30:13  class-name-pascal       this.t[form].get(key).setValue('sample value');
ERROR: 30:13  class-name-pascal       this.t[form].get(key).setValue('sample value')
ERROR: 30:13  class-name-pascal       this.t[form].get(key).setValue
ERROR: 30:13  class-name-pascal       this.t[form].get(key)
ERROR: 30:13  class-name-pascal       this.t[form].get
ERROR: 30:13  class-name-pascal       this.t[form]
ERROR: 30:13  class-name-pascal       this.t
ERROR: 30:18  class-name-pascal       this.t
ERROR: 30:20  class-name-pascal       this.t[form]
ERROR: 30:26  class-name-pascal       this.t[form].get
ERROR: 30:30  class-name-pascal       this.t[form].get(key)
ERROR: 30:35  class-name-pascal       this.t[form].get(key).setValue
ERROR: 30:44  class-name-pascal       this.t[form].get(key).setValue('sample value')
ERROR: 32:9   class-name-pascal       {
        const controls = this.t[form].controls;
        // tslint:disable-next-line: forin
        for (const key in controls) {
            this.t[form].get(key).setValue('sample value');
        }
        expect(this.t[form].valid).toBeTruthy();
    }
ERROR: 32:9   class-name-pascal       expect(this.t[form].valid).toBeTruthy();
ERROR: 32:9   class-name-pascal       expect(this.t[form].valid).toBeTruthy()
ERROR: 32:9   class-name-pascal       expect(this.t[form].valid).toBeTruthy
ERROR: 32:9   class-name-pascal       expect(this.t[form].valid)
ERROR: 32:16  class-name-pascal       expect(this.t[form].valid)
ERROR: 32:16  class-name-pascal       this.t[form].valid
ERROR: 32:16  class-name-pascal       this.t[form]
ERROR: 32:16  class-name-pascal       this.t
ERROR: 32:21  class-name-pascal       this.t
ERROR: 32:23  class-name-pascal       this.t[form]
ERROR: 32:29  class-name-pascal       this.t[form].valid
ERROR: 32:36  class-name-pascal       expect(this.t[form].valid).toBeTruthy
ERROR: 35:5   class-name-pascal       export class UniTest {
    name;
    app;
    constructor(public t: any, public title: string) {

    }

    executeMethod(fn): void {
        // app[fn]();
    }

    testTitleRendering(title): any {
        expect(this.t.title).toEqual(title);
    }
    testFormStatus(form): any {
        expect(this.t[form].valid).toBeFalsy();
    }
    testFormAfterValue(form): any {
        const controls = this.t[form].controls;
        // tslint:disable-next-line: forin
        for (const key in controls) {
            this.t[form].get(key).setValue('sample value');
        }
        expect(this.t[form].valid).toBeTruthy();
    }

    testFormControlForRequiredError(form, formControlName): any {
        expect(this.t[form].get(formControlName).valid).toBeFalsy();
    }
    testFormControlForRequiredErrorAfterValue(form, formControlName): any {
        this.t[form].get(formControlName).setValue('test');
        expect(this.t[form].get(formControlName).valid).toBeTruthy();
    }

    checkMethodReturnType(name, returnType): any {
        const data = this.t[name]();
        expect(typeof data).toEqual(returnType);
    }

}
ERROR: 35:5   class-name-pascal       testFormControlForRequiredError(form, formControlName): any {
        expect(this.t[form].get(formControlName).valid).toBeFalsy();
    }
ERROR: 35:37  class-name-pascal       testFormControlForRequiredError(form, formControlName): any {
        expect(this.t[form].get(formControlName).valid).toBeFalsy();
    }
ERROR: 35:37  class-name-pascal       form
ERROR: 35:43  class-name-pascal       testFormControlForRequiredError(form, formControlName): any {
        expect(this.t[form].get(formControlName).valid).toBeFalsy();
    }
ERROR: 35:43  class-name-pascal       formControlName
ERROR: 35:61  class-name-pascal       testFormControlForRequiredError(form, formControlName): any {
        expect(this.t[form].get(formControlName).valid).toBeFalsy();
    }
ERROR: 35:65  class-name-pascal       testFormControlForRequiredError(form, formControlName): any {
        expect(this.t[form].get(formControlName).valid).toBeFalsy();
    }
ERROR: 36:9   class-name-pascal       {
        expect(this.t[form].get(formControlName).valid).toBeFalsy();
    }
ERROR: 36:9   class-name-pascal       expect(this.t[form].get(formControlName).valid).toBeFalsy();
ERROR: 36:9   class-name-pascal       expect(this.t[form].get(formControlName).valid).toBeFalsy()
ERROR: 36:9   class-name-pascal       expect(this.t[form].get(formControlName).valid).toBeFalsy
ERROR: 36:9   class-name-pascal       expect(this.t[form].get(formControlName).valid)
ERROR: 36:16  class-name-pascal       expect(this.t[form].get(formControlName).valid)
ERROR: 36:16  class-name-pascal       this.t[form].get(formControlName).valid
ERROR: 36:16  class-name-pascal       this.t[form].get(formControlName)
ERROR: 36:16  class-name-pascal       this.t[form].get
ERROR: 36:16  class-name-pascal       this.t[form]
ERROR: 36:16  class-name-pascal       this.t
ERROR: 36:21  class-name-pascal       this.t
ERROR: 36:23  class-name-pascal       this.t[form]
ERROR: 36:29  class-name-pascal       this.t[form].get
ERROR: 36:33  class-name-pascal       this.t[form].get(formControlName)
ERROR: 36:50  class-name-pascal       this.t[form].get(formControlName).valid
ERROR: 36:57  class-name-pascal       expect(this.t[form].get(formControlName).valid).toBeFalsy
ERROR: 38:5   class-name-pascal       export class UniTest {
    name;
    app;
    constructor(public t: any, public title: string) {

    }

    executeMethod(fn): void {
        // app[fn]();
    }

    testTitleRendering(title): any {
        expect(this.t.title).toEqual(title);
    }
    testFormStatus(form): any {
        expect(this.t[form].valid).toBeFalsy();
    }
    testFormAfterValue(form): any {
        const controls = this.t[form].controls;
        // tslint:disable-next-line: forin
        for (const key in controls) {
            this.t[form].get(key).setValue('sample value');
        }
        expect(this.t[form].valid).toBeTruthy();
    }

    testFormControlForRequiredError(form, formControlName): any {
        expect(this.t[form].get(formControlName).valid).toBeFalsy();
    }
    testFormControlForRequiredErrorAfterValue(form, formControlName): any {
        this.t[form].get(formControlName).setValue('test');
        expect(this.t[form].get(formControlName).valid).toBeTruthy();
    }

    checkMethodReturnType(name, returnType): any {
        const data = this.t[name]();
        expect(typeof data).toEqual(returnType);
    }

}
ERROR: 38:5   class-name-pascal       testFormControlForRequiredErrorAfterValue(form, formControlName): any {
        this.t[form].get(formControlName).setValue('test');
        expect(this.t[form].get(formControlName).valid).toBeTruthy();
    }
ERROR: 38:47  class-name-pascal       testFormControlForRequiredErrorAfterValue(form, formControlName): any {
        this.t[form].get(formControlName).setValue('test');
        expect(this.t[form].get(formControlName).valid).toBeTruthy();
    }
ERROR: 38:47  class-name-pascal       form
ERROR: 38:53  class-name-pascal       testFormControlForRequiredErrorAfterValue(form, formControlName): any {
        this.t[form].get(formControlName).setValue('test');
        expect(this.t[form].get(formControlName).valid).toBeTruthy();
    }
ERROR: 38:53  class-name-pascal       formControlName
ERROR: 38:71  class-name-pascal       testFormControlForRequiredErrorAfterValue(form, formControlName): any {
        this.t[form].get(formControlName).setValue('test');
        expect(this.t[form].get(formControlName).valid).toBeTruthy();
    }
ERROR: 38:75  class-name-pascal       testFormControlForRequiredErrorAfterValue(form, formControlName): any {
        this.t[form].get(formControlName).setValue('test');
        expect(this.t[form].get(formControlName).valid).toBeTruthy();
    }
ERROR: 39:9   class-name-pascal       {
        this.t[form].get(formControlName).setValue('test');
        expect(this.t[form].get(formControlName).valid).toBeTruthy();
    }
ERROR: 39:9   class-name-pascal       this.t[form].get(formControlName).setValue('test');
ERROR: 39:9   class-name-pascal       this.t[form].get(formControlName).setValue('test')
ERROR: 39:9   class-name-pascal       this.t[form].get(formControlName).setValue
ERROR: 39:9   class-name-pascal       this.t[form].get(formControlName)
ERROR: 39:9   class-name-pascal       this.t[form].get
ERROR: 39:9   class-name-pascal       this.t[form]
ERROR: 39:9   class-name-pascal       this.t
ERROR: 39:14  class-name-pascal       this.t
ERROR: 39:16  class-name-pascal       this.t[form]
ERROR: 39:22  class-name-pascal       this.t[form].get
ERROR: 39:26  class-name-pascal       this.t[form].get(formControlName)
ERROR: 39:43  class-name-pascal       this.t[form].get(formControlName).setValue
ERROR: 39:52  class-name-pascal       this.t[form].get(formControlName).setValue('test')
ERROR: 40:9   class-name-pascal       {
        this.t[form].get(formControlName).setValue('test');
        expect(this.t[form].get(formControlName).valid).toBeTruthy();
    }
ERROR: 40:9   class-name-pascal       expect(this.t[form].get(formControlName).valid).toBeTruthy();
ERROR: 40:9   class-name-pascal       expect(this.t[form].get(formControlName).valid).toBeTruthy()
ERROR: 40:9   class-name-pascal       expect(this.t[form].get(formControlName).valid).toBeTruthy
ERROR: 40:9   class-name-pascal       expect(this.t[form].get(formControlName).valid)
ERROR: 40:16  class-name-pascal       expect(this.t[form].get(formControlName).valid)
ERROR: 40:16  class-name-pascal       this.t[form].get(formControlName).valid
ERROR: 40:16  class-name-pascal       this.t[form].get(formControlName)
ERROR: 40:16  class-name-pascal       this.t[form].get
ERROR: 40:16  class-name-pascal       this.t[form]
ERROR: 40:16  class-name-pascal       this.t
ERROR: 40:21  class-name-pascal       this.t
ERROR: 40:23  class-name-pascal       this.t[form]
ERROR: 40:29  class-name-pascal       this.t[form].get
ERROR: 40:33  class-name-pascal       this.t[form].get(formControlName)
ERROR: 40:50  class-name-pascal       this.t[form].get(formControlName).valid
ERROR: 40:57  class-name-pascal       expect(this.t[form].get(formControlName).valid).toBeTruthy
ERROR: 43:5   class-name-pascal       export class UniTest {
    name;
    app;
    constructor(public t: any, public title: string) {

    }

    executeMethod(fn): void {
        // app[fn]();
    }

    testTitleRendering(title): any {
        expect(this.t.title).toEqual(title);
    }
    testFormStatus(form): any {
        expect(this.t[form].valid).toBeFalsy();
    }
    testFormAfterValue(form): any {
        const controls = this.t[form].controls;
        // tslint:disable-next-line: forin
        for (const key in controls) {
            this.t[form].get(key).setValue('sample value');
        }
        expect(this.t[form].valid).toBeTruthy();
    }

    testFormControlForRequiredError(form, formControlName): any {
        expect(this.t[form].get(formControlName).valid).toBeFalsy();
    }
    testFormControlForRequiredErrorAfterValue(form, formControlName): any {
        this.t[form].get(formControlName).setValue('test');
        expect(this.t[form].get(formControlName).valid).toBeTruthy();
    }

    checkMethodReturnType(name, returnType): any {
        const data = this.t[name]();
        expect(typeof data).toEqual(returnType);
    }

}
ERROR: 43:5   class-name-pascal       checkMethodReturnType(name, returnType): any {
        const data = this.t[name]();
        expect(typeof data).toEqual(returnType);
    }
ERROR: 43:27  class-name-pascal       checkMethodReturnType(name, returnType): any {
        const data = this.t[name]();
        expect(typeof data).toEqual(returnType);
    }
ERROR: 43:27  class-name-pascal       name
ERROR: 43:33  class-name-pascal       checkMethodReturnType(name, returnType): any {
        const data = this.t[name]();
        expect(typeof data).toEqual(returnType);
    }
ERROR: 43:33  class-name-pascal       returnType
ERROR: 43:46  class-name-pascal       checkMethodReturnType(name, returnType): any {
        const data = this.t[name]();
        expect(typeof data).toEqual(returnType);
    }
ERROR: 43:50  class-name-pascal       checkMethodReturnType(name, returnType): any {
        const data = this.t[name]();
        expect(typeof data).toEqual(returnType);
    }
ERROR: 44:9   class-name-pascal       {
        const data = this.t[name]();
        expect(typeof data).toEqual(returnType);
    }
ERROR: 44:9   class-name-pascal       const data = this.t[name]();
ERROR: 44:15  class-name-pascal       const data = this.t[name]()
ERROR: 44:15  class-name-pascal       data = this.t[name]()
ERROR: 44:22  class-name-pascal       data = this.t[name]()
ERROR: 44:22  class-name-pascal       this.t[name]()
ERROR: 44:22  class-name-pascal       this.t[name]
ERROR: 44:22  class-name-pascal       this.t
ERROR: 44:27  class-name-pascal       this.t
ERROR: 44:29  class-name-pascal       this.t[name]
ERROR: 45:9   class-name-pascal       {
        const data = this.t[name]();
        expect(typeof data).toEqual(returnType);
    }
ERROR: 45:9   class-name-pascal       expect(typeof data).toEqual(returnType);
ERROR: 45:9   class-name-pascal       expect(typeof data).toEqual(returnType)
ERROR: 45:9   class-name-pascal       expect(typeof data).toEqual
ERROR: 45:9   class-name-pascal       expect(typeof data)
ERROR: 45:16  class-name-pascal       expect(typeof data)
ERROR: 45:23  class-name-pascal       typeof data
ERROR: 45:29  class-name-pascal       expect(typeof data).toEqual
ERROR: 45:37  class-name-pascal       expect(typeof data).toEqual(returnType)
ERROR: 49:1   class-name-pascal       import { Type } from '@angular/compiler';
import { Component } from '@angular/core';
import { ComponentFixture, TestBed } from '@angular/core/testing';
import { FormGroup } from '@angular/forms';
import { AppComponent } from 'src/app/app.component';
// declare var fixture;
// declare var app;

export class UniTest {
    name;
    app;
    constructor(public t: any, public title: string) {

    }

    executeMethod(fn): void {
        // app[fn]();
    }

    testTitleRendering(title): any {
        expect(this.t.title).toEqual(title);
    }
    testFormStatus(form): any {
        expect(this.t[form].valid).toBeFalsy();
    }
    testFormAfterValue(form): any {
        const controls = this.t[form].controls;
        // tslint:disable-next-line: forin
        for (const key in controls) {
            this.t[form].get(key).setValue('sample value');
        }
        expect(this.t[form].valid).toBeTruthy();
    }

    testFormControlForRequiredError(form, formControlName): any {
        expect(this.t[form].get(formControlName).valid).toBeFalsy();
    }
    testFormControlForRequiredErrorAfterValue(form, formControlName): any {
        this.t[form].get(formControlName).setValue('test');
        expect(this.t[form].get(formControlName).valid).toBeTruthy();
    }

    checkMethodReturnType(name, returnType): any {
        const data = this.t[name]();
        expect(typeof data).toEqual(returnType);
    }

}


